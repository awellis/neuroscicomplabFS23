[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Neurowissenschaft Computerlab",
    "section": "",
    "text": "Frühjahrssemester 2023"
  },
  {
    "objectID": "pages/admin/01_overview.html",
    "href": "pages/admin/01_overview.html",
    "title": "Übersicht",
    "section": "",
    "text": "In diesem Kurs beschäftigen wir uns im weiteren Sinne mit Model-based Cognitive Neuroscience. Dieses Forschungsgebiet existiert noch nicht sehr lange, und ist aus dem Zusammenschluss von mathematischer Modellierung und neurowissenschaftlichen Methoden entstanden.\nWir widmen uns dem behavioralen/kognitiven Teil dieses Forschungsgebiets. Das bedeutet, wir analysieren Daten aus Verhaltensexperimenten — sowohl mit herkömmlichen statistischen Verfahren, als auch mit mathematischen Modellen. Die Resultate dieser Analysen können wiederum in der Analyse bildgebender Verfahren oder EEG benutzt werden.\n\nEs gibt ein sehr gutes Lehrbuch (Forstmann and Wagenmakers 2015) zum Thema Model-based Cognitive Neuroscience; wir werden einzelne Themen daraus aufgreifen. Das Buch ist auf SpringerLink verfügbar: An Introduction to Model-Based Cognitive Neuroscience.\n\nWir werden folgende Themen im Laufe des Semester behandeln:\n\nErstellen von behavioralen Experimenten\nImportieren und Bearbeiten von Daten (z.B. binäre Daten, Reaktionszeiten)\nGraphische Darstellung und explorative Datenanalyse\nAuswahl von statistischen Verfahren\nEinführung in die Bayesianische Datenanalyse\nAnalyse messwiederholter Daten anhand von Multilevel Modellen\nKognitive Prozessmodelle (mathematische Modelle von Entscheidungsverhalten)"
  },
  {
    "objectID": "pages/admin/01_overview.html#experimente",
    "href": "pages/admin/01_overview.html#experimente",
    "title": "Übersicht",
    "section": "Experimente",
    "text": "Experimente\nUm ein Experiment zu kreieren benutzen wir PsychoPy. PsychoPy ist ein Python-basiertes Tool, mit dem sich sowohl in einer grafischen Benutzeroberfläche (GUI) als auch mit Python Code Experimente programmieren lassen."
  },
  {
    "objectID": "pages/admin/01_overview.html#datenanalyse",
    "href": "pages/admin/01_overview.html#datenanalyse",
    "title": "Übersicht",
    "section": "Datenanalyse",
    "text": "Datenanalyse\nUm Daten zu verarbeiten (data cleaning), grafisch darzustellen und zu analysieren werden wir R verwenden. Sie sollten daher die aktuelle Version von R installieren (Version 4.2.2), sowie RStudio.\nR 👉 https://cloud.r-project.org/\nRStudio 👉 https://www.rstudio.com/products/rstudio/download/#download\nFür Bayesianische Datenanalyse verwenden wir ausserdem JASP und Stan. JASP ist ein GUI Programm, ähnlich wie Jamovi, mit dem sich simple Bayesianische Tests durchführen lassen.\nJASP 👉 https://jasp-stats.org/download/\nStan ist eine probabilistische Programmiersprache, welche wir von R aus benutzen. Die dafür benötigte Software werden wir im Verlauf des Semesters installieren."
  },
  {
    "objectID": "pages/admin/03_zulip_forum.html",
    "href": "pages/admin/03_zulip_forum.html",
    "title": "Zulip Forum",
    "section": "",
    "text": "Wir benutzen in dieser Veranstaltung Zulip als Diskussionforum. Zulip hat einige Vorteile gegenüber ILIAS und Email:\n\nZulip ist besser geeignet, um Code darzustellen.\nWir benutzen dasselbe Forum für die Vormittags- und Nachmittagsveranstaltungen.\nDie Diskussion ist für alle Teilnehmer*innen sichtbar.\nDiskussion kann in Echtzeit (synchron) oder offline (asynchron) stattfinden.\n\nBitte erstellen Sie unter diesem Link einen Account. Sie müssen dafür Ihre Uni Emailadresse verwenden. Account erstellen 👉 zulipchat.com/join/hyuinbg3mtcumccnzt3tpsqb/\n Wenn Sie einen Account erstellt haben, können Sie sich unter folgendem Link einloggen. Zulip Forum 👉 neuroscicomplab2022.zulipchat.com\nAusserdem ist Zulip als Desktop oder Mobile App für alle gängigen Betriebssysteme erhältlich. Apps 👉 zulip.com/apps\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{ellis,\n  author = {Andrew Ellis},\n  title = {Zulip {Forum}},\n  url = {https://kogpsy.github.io/neuroscicomplabFS23//03_zulip_forum.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nAndrew Ellis. n.d. “Zulip Forum.” https://kogpsy.github.io/neuroscicomplabFS23//03_zulip_forum.html."
  },
  {
    "objectID": "pages/admin/dozierende.html",
    "href": "pages/admin/dozierende.html",
    "title": "Dozierende",
    "section": "",
    "text": "Andrew ist Data Scientist an der Berner Fachhochschule und Wissenschaftlicher Mitarbeiter an der Abteilung Kognitive Psychologie, Wahrnehmung und Methodenlehre der Uni Bern. An der BFH beschäftigt er sich hauptsächlich mit der Verwendung künstlicher Intelligenz in der Lehre, und versucht ein intelligentes Tutoring-System zu entwickeln.\n📬 Email: andrew.ellis@unibe.ch\n🔗 Website: www.kog.psy.unibe.ch/ueber_uns/personen/dr_ellis_andrew"
  },
  {
    "objectID": "pages/admin/dozierende.html#gerda-wyssen",
    "href": "pages/admin/dozierende.html#gerda-wyssen",
    "title": "Dozierende",
    "section": "Gerda Wyssen",
    "text": "Gerda Wyssen\nGerda arbeitet an ihrer Dissertation an der Abteilung Kognitive Psychologie, Wahrnehmung und Methodenlehre. Sie untersucht den Einfluss von Gleichgewichts- und Bewegungsinformationen auf räumliches Denken. Hierzu nutzt sie die Moog Bewegungsplattform oder das starke Magnetfeld eines 7T MRI Scanners. Besonders faszinierend findet sie Bewegungsillusionen.\n📬 Email: gerda.wyssen@unibe.ch\n🔗 Website: www.kog.psy.unibe.ch/ueber_uns/personen/m_sc_wyssen_gerda"
  },
  {
    "objectID": "pages/admin/leistungsnachweise.html",
    "href": "pages/admin/leistungsnachweise.html",
    "title": "Leistungskontrollen",
    "section": "",
    "text": "Unsere Veranstaltungen werden so aufgebaut sein, dass wir etwa die Hälfte der Zeit Inhalt präsentieren; die andere Hälfte ist praktischen Hands-on Sessions gewidmet. Dies wird jedoch stark vom jeweiligen Inhalt anhängig sein. Wir denken, dass der Umgang mit Programmiersprachen und Datenanalyse am besten gelernt wird, indem man selber ausprobiert. Deshalb werden wir versuchen, die Theorie auf das Nötigste zu beschränken, und uns mehr auf praktische Anwendungen zu fokussieren."
  },
  {
    "objectID": "pages/admin/leistungsnachweise.html#leistungsnachweise",
    "href": "pages/admin/leistungsnachweise.html#leistungsnachweise",
    "title": "Leistungskontrollen",
    "section": "Leistungsnachweise",
    "text": "Leistungsnachweise\nLeistungsnachweise werden in Form von Übungen erbracht. Es wird insgesamt 5 Übungen geben – davon müssen alle abgegeben werden. Die Übungen werden in den Veranstaltungen angekündigt und in den entsprechenden Ordner auf ILIAS hochgeladen. Je nach Umfang der Übung wird die Zeit bis zur Abgabe unterschiedlich ausfallen. Sie wird jedoch immer mindestens eine Woche betragen.\nDie Evaluation der Übungen erfolgt in Form von Peer-Feedback; dies bedeutet, dass Sie nach dem Abgabetermin aufgefordert werden, zu den Übungen von zufällig ausgewählten Mitstudierenden Feedback zu geben. Danach erhalten Sie selber von anderen Mitstudierenden Feedback zu Ihrer Übung. Das Peer-Feedback ist somit Teil des Leistungsnachweises. Auf Ilias finden Sie Informationen zur Art und Form des Feedbacks passend zur Übung. Grundsätzliche Guidelines zum Peer-Feedback finden Sie untenstehend.\nILIAS (Montag) 👉 468703-FS2023-1\nILIAS (Donnerstag) 👉 468703-FS2023-0"
  },
  {
    "objectID": "pages/admin/leistungsnachweise.html#peer-feedback-guidelines",
    "href": "pages/admin/leistungsnachweise.html#peer-feedback-guidelines",
    "title": "Leistungskontrollen",
    "section": "Peer Feedback Guidelines",
    "text": "Peer Feedback Guidelines\nWissenschaftliche Artikel werden von Forschenden aus denselben/ähnlichen Forschungsgebieten begutachtet. In diesem Kurs wählen wir für das Feedback zu den Übungen ebenfalls dieses Prinzip des peer review. Für jede Übung erhalten Sie einen klaren Begutachtungsauftrag mit Fragen wie z.B. Was würde die Grafik informativer machen?. Wir bitten Sie, beim Verfassen des Peer-Feedbacks folgende Richtlinien zu beachten:\n\nbe kind: Seien Sie freundlich. Wählen Sie Ihre Rückmeldungspunkte sorgfältig. Nehmen Sie sich Zeit und geben Sie nicht sehr knappes, verspätetes oder gar kein Feedback. Schreiben Sie was Ihnen positiv aufgefallen ist und unbedingt beibehalten werden sollte.\nbe specific: Beschreiben Sie das Problem oder die Kritikpunkte präzise und spezifisch (statt z.B. “Code läuft nicht” könnten Sie schreiben “in Zeile 34 gibt es eine Fehlermeldung, es scheint die Variable wurde falsch benannt, …”)\nbe helpful: Seien Sie konstruktiv. Es gibt immer etwas was verbessert werden könnte. Beschreiben Sie diese Punkte und fügen Sie bestenfalls einen Lösungsansatz oder -vorschlag hinzu (statt z.B. “die Farben sind nicht geeignet für farbenblinde Personen” könnten Sie schreiben “die viridis Palette würde die Grafik für farbenblinde Personen zugänglich machen”).\n\nWertvolles Feedback zu geben benötigt Zeit. Deshalb planen Sie sich bitte ca. 1 Lektion für das jeweilige Peer Feedback ein."
  },
  {
    "objectID": "pages/admin/syllabus.html",
    "href": "pages/admin/syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Sitzungen\nAn den 14 Sitzungen werden wir voraussichtlich diese Themen behandeln (kleine Änderungen vorbehalten).\n\n1 Einführung\nSitzung 1\n\nWir schauen uns ein paar in den Neurowissenschaften verwendeten Programmiersprachen (Python, R, Matlab) an, und diskutieren ChatGPT.\nEinführung in DataCamp (für Python/R).\n\n\n\n\n\n\n\nHands-on\n\n\n\nAuf DataCamp den Python Einführungskurs ausprobieren.\n\n\n\n\n2 Experimente mit Python programmieren\nSitzungen 2 und 3\n\nWir erstellen selber ein Experiment mit Python und PsychoPy.\n\n\n\n3 Data Wrangling\nSitzungen 4, 5 und 6\n\nWir schauen uns an, wie wir mit R die Daten aus unserem selber programmierten Experiment einlesen und bearbeiten können, um damit statistische Analysen durchzuführen.\n\n\n\n4 Visualisieren\nSitzungen 7 und 8\n\nRmarkdown\nExplorative Datenanalyse und grafische Darstellung mit mit R package ggplot2.\n\n\n\n5 Signal Detection Theory\nSitzungen 9 und 10\n\nWir verwenden ein in den Neurowissenschaften und der Psychologie beliebtes Modell für kategoriale oder ordinale Verhaltensdaten, um Daten aus unserem Experiment zu analysieren.\n\n\n\n\n6 Bayesianische Datenanalyse\nSitzungen 11, 12, 13, und 14\n\nIm letzten Thema geht es um einen modernen Ansatz in der Statistik, welcher auf den Axiomen der Wahrscheinlichkeitstheorie beruht, und einige Vorteile gegenüber der herkömmlichen (frequentistischen) Statistik bietet. Wir werden hier mit dem Programm Jasp arbeiten.\n\n\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/"
  },
  {
    "objectID": "pages/chapters/chatgpt.html",
    "href": "pages/chapters/chatgpt.html",
    "title": "ChatGPT",
    "section": "",
    "text": "Eventuell haben Sie in den letzten Wochen von ChatGPT gehört, vielleicht schon selber benutzt. Sowohl an Hochschulen als auch an Gymnasien stellt sich die brennende Frage, wie Lehrpersonen und Studierende/Schüler damit umgehen sollen. Darf man ChatGPT benutzen? Werden die abgegeben Übungen darauf untersucht, ob sie mit Hilfe künstlicher Intelligenz generiert wurden.\nWir versuchen hier, unsere Haltung in Bezug auf ChatGPT bekanntzugeben, und zu erklären, was ChatGPT kann, und wo es hilfreich sein könnte.\n\n\n\n\nChatGPT benutzt das Codex Modell von OpenAI, welches auf Programmiersprachen spezialisiert ist. Vor allem Python, aber auch R (und Matlab) Code spricht ChatGPT hervorragend.\n\n\n\nNein. ChatGPT besteht aus verschiedenen Komponent. Eines davon ist ein large language model (LLM), die weiteren Komponenten braucht es, um einen Chatbot zu kreieren, welcher menschenähnliche Konversationen führen kann.\nDas LLM hat im wesentlichen die Verteilung von Wortstämmen (Tokens) des Textkorpus (mit dem es trainiert wurde) gelernt. Die Aufgabe des LLM ist es, gegeben einen Input (Prompt) eine oder mehrere wahrscheinliche Vervollständigungen zu erzeugen. Wenn nun im Textkorpus Programmcode vorkam, wird das LLM syntaktisch korrekten Code zu generieren. Das LLM hat jedoch keine Möglichkeit, diesen Code auszuführen, auf Korrektheit zu überprüfen, oder überhaupt herauszufinden, ob der Code sinnvoll ist.\nChatGPT kann mitunter hervorragenden Code generieren, aber ob der Code wirklich das macht, was er soll, liegt in der Verantwortung der Benutzer:in.\n\nImmer kritisch überprüfen, ob von ChatGPT generierter Code wirklich korrekt ist, und tut was verlangt wird!\n\n\n\n\nSie können ChatGPT helfen, gute Antworten zu erzeugen, in dem Sie gute Fragen stellen. Dies bedeutet, dass Sie in der Frage (Prompt) möglichst viele Kontextinformationen mitliefern. Denken Sie daran, dass ChatGPT, gegeben dem Input und den Trainingsdaten, eine möglichst wahrscheinliche Sequenz von Token erzeugt.\n\n\n\n\nWir gehen davon aus, dass Technologien wie ChatGPT nicht mehr vom modernen Unterricht wegzudenken sind, und es daher sinnvoll und notwendig ist, einen möglichst guten Umgang damit zu erlernen.\n\n\n\n\n\n\nHinweis\n\n\n\nChatGPT darf für die Übungen genutzt werden.\n\n\nEs ist aus unserer Sicht jedoch sinnvoll, wenn Sie ChatGPT als eine von vielen möglichen Quellen benutzen (wie z.B. Google, Stackoverflow), und diese auch als solche transparent angeben.\nAus unserer Sicht ist ChatGPT (und Codex) ein sehr wertvolles Tool. Sie sind jedoch dafür verantwortlich, dass ihr Code ausführbar ist. Dies wird beim Peer-Feedback eines der Kriterien sein. Das Ziel ist primär, dass sie Code verstehen und anwenden können, nicht dass sie Code aus dem Nichts selber schreiben können. Dies ist übrigens auch die Vorgehensweise vieler erfahrener Programmierer - oft wird zuerst mal gegoogelt und im Internet nachgeschaut, ob es schon Lösungsansätze gibt. ChatGPT macht im Prinzip nichts anderes.\n\n\n\nIm Prinzip ja, aber Sie würden dabei wahrscheinlich sehr wenig lernen. Den Umgang mit Computern und das Programmieren lernt man, indem man selber Code ausführt, Fehler macht und versucht zu verstehen was der Fehler war. Das Ziel sollte sein, dass Sie jederzeit erklären könnten, was Ihr Code macht, oder wieso Sie ein bestimmtes Feedback gegeben haben. Ohne selber etwas dafür zu tun wird der Lern efolg wahrscheinlich ausbleiben.\n\n\n\nChatGPT kann sowohl Code generieren als auch Code evaluieren. Sie können ChatGPT benutzen\n\num Vorschläge zu erhalten, wenn Sie nicht weiterkommen.\num ein Gerüst für ein Programm zu erstellen.\num Code auf Lesbarkeit/Verständlichkeit zu überprüfen.\num Code kommentieren zu lassen.\num Code zu verstehen/bewerten zu lassen.\n\n\n\n\n\n\n\nHinweis\n\n\n\nBitte überprüfen Sie aber immer kritisch den Output von ChatGPT, und stellen sie sicher, dass der Code tatsächlich ausgeführt werden kann."
  },
  {
    "objectID": "pages/chapters/data_visualization_1.html",
    "href": "pages/chapters/data_visualization_1.html",
    "title": "Grafiken erstellen mit ggplot\n",
    "section": "",
    "text": "Lernziele\n\n\n\n\n\nErstellen eines (reproduzierbaren) Data Reports mit Datenvisualisierungen zu unserem Experiment.\n\ndas Erstellen von R Markdown Files\ndas Verwenden des ggplot2-packages"
  },
  {
    "objectID": "pages/chapters/data_visualization_1.html#daten",
    "href": "pages/chapters/data_visualization_1.html#daten",
    "title": "Grafiken erstellen mit ggplot\n",
    "section": "Daten",
    "text": "Daten\nZuerst laden wir das tidyverse Package und lesen das im Ordner data_example gespeicherte .csv File ein und machen die Variable condition zu einem Faktor. Wir schauen uns die Daten mit glimpse() an. Passen Sie hierzu den Datei-Pfad an Ihren Ordner an.\n\nDer verwendete Datensatz stammt von Matejka and Fitzmaurice (2017).\n\nlibrary(tidyverse)\n\ndata <- read.csv(\"../../data/data_example/DatasaurusDozen.csv\") %>%\n    mutate(condition = as.factor(condition))\n\nglimpse(data)\n\nRows: 1,846\nColumns: 3\n$ condition <fct> away, away, away, away, away, away, away, away, away, away, …\n$ value1    <dbl> 32.33111, 53.42146, 63.92020, 70.28951, 34.11883, 67.67072, …\n$ value2    <dbl> 61.411101, 26.186880, 30.832194, 82.533649, 45.734551, 37.11…\n\n\nDatenformat\nAm einfachsten ist das plotten, wenn die Daten im long-Format vorliegen. Das bedeutet:\n\nJede Variable die gemessen/erhoben wird hat eine Spalte (z.B. Versuchspersonennummer, Reaktionszeit, Taste).\nJede Messung hat eine Zeile. In unserem PsychoPy-Experiment entspricht dies einer Zeile pro Trial.\n\nDie hier eingelesenen Daten sind schon im long-Format.\n\nFalls die Daten im wide-Format abgespeichert sind, lohnt es sich diese umzuformatieren z.B. mit pivot_longer().\nVariablen\nBevor wir weiterfahren, müssen wir wissen, welche Variablen wir plotten möchten und welches Skalenniveau diese Variablen haben. Je nach Anzahl Variablen und den entsprechenden Skalenniveaus eignen sich andere Grafik-Formen.\n\n\nCC BY-SA 3.0, https://commons.wikimedia.org/w/index.php?curid=724035\n\n\n\n\n\n\n\n\nHands-on\n\n\n\nSchauen Sie sich den Datensatz an.\n\nWie viele unterschiedliche Variablen gibt es?\nWie heissen die Variablen?\nWelches Skalenniveau haben sie?\n\n\n\nSubsetting\nManchmal möchte man nur einen Teil der Daten plotten. Der aktuelle Datensatz enthält beispielsweise verschiedene Bedingungen, jeweils mit Werten für Variable value1 und value2. Folgende 13 Bedingungen sind enthalten:\n\nunique(data$condition)\n\n [1] away       bullseye   circle     dino       dots       h_lines   \n [7] high_lines slant_down slant_up   star       v_lines    wide_lines\n[13] x_shape   \n13 Levels: away bullseye circle dino dots h_lines high_lines ... x_shape\n\n\n\n\n\n\n\n\n\n\n\n\nFürs erste entscheiden wir uns für die Bedingung away.\n\ndata_away <- data %>%\n    filter(condition == \"away\")\n\nWir können für diese Bedingung zusätzlich summary statistics berechnen, hier Mittelwert und Standardabweichung.\n\ndata_away_summary <- data %>%\n    summarise(mean_v1 = mean(value1),\n              sd_v1 = sd(value1),\n              mean_v2 = mean(value2),\n              sd_v2 = sd(value2))\n\nglimpse(data_away_summary)\n\nRows: 1\nColumns: 4\n$ mean_v1 <dbl> 54.2657\n$ sd_v1   <dbl> 16.713\n$ mean_v2 <dbl> 47.8351\n$ sd_v2   <dbl> 26.84777\n\n\nDiese Werte geben Ihnen einen Anhaltspunkt, in welchem Bereich sich die Werte bewegen werden.\nPlot\nIn den folgenden Beispielen verwenden wir die Daten der Bedingung away. Wir geben in die Funktion ggplot als erstes Argument data = data_away ein.\n\nggplot(data = data_away)\n\n\n\n\nWir haben nun die Daten eingegeben, aber noch keine Formen und kein Mapping, deshalb ist die Grafik leer."
  },
  {
    "objectID": "pages/chapters/data_visualization_1.html#geom-formen",
    "href": "pages/chapters/data_visualization_1.html#geom-formen",
    "title": "Grafiken erstellen mit ggplot\n",
    "section": "Geom / Formen",
    "text": "Geom / Formen\nIn ggplot wird die Form mit geom_ hinzugefügt. Beispielsweise werden mit geom_point() Punkte erstellt, mit geom_line() Linien, mit geom_boxplot Boxplots, usw. Bei der Wahl der passenden Form kommt es einerseits auf die Daten an. Sind die Daten nominal, ordinal, interval oder ratio skaliert? Wie viele Variablen werden gleichzeitig in die Grafik einbezogen? Andererseits ist es wichtig, was mit der Grafik gezeigt werden soll: Unterschiede? Gemeinsamkeiten? Veränderungen über Zeit?\nOft verwendete Formen sind:\n\nPunkte / Scatterplots - geom_point()\n\nLinien - geom_line()\n\n\nOder wenn zusammenfassende Werte geplottet werden sollen:\n\nHistogramme - geom_histogram()\n\nMittelwerte und Standardabweichungen - geom_pointrange()\n\nDichte - geom_density()\n\nBoxplots - geom_boxplot()\n\nViolinplots - geom_violin()\n\n\n\nEs gibt auch weitere Arten informative Arten der Darstellung wie heat maps oder shift functions, auf die wir in dieser Veranstaltung nicht eingehen.\n\n\n\n\n\n\nHands-on\n\n\n\nWelche geoms eignen sich für welches Skalenniveau und welche Variablenanzahl?\n👉 Hier finden Sie das ggplot-Cheatsheet.\nSchauen Sie sich die verschiedenen Formen von Plots hier an.\n\n\nWenn wir nun aber\nggplot(data = data_away) +\n    geom_point()\nausführen würden, ergäbe das eine Fehlermeldung. Wir haben nämlich nicht angegeben, wie die Daten mit geom verbunden werden soll: Das mapping fehlt."
  },
  {
    "objectID": "pages/chapters/data_visualization_1.html#mapping",
    "href": "pages/chapters/data_visualization_1.html#mapping",
    "title": "Grafiken erstellen mit ggplot\n",
    "section": "Mapping",
    "text": "Mapping\nJede geom-Funktion in ggplot benötigt Angaben zum mapping. Damit wird definiert, wie die Variablen auf die Formen (aesthetics) gemappt werden sollen. Am einfachsten geht das, wenn wir dies zu Beginn festlegen (wir könnten es auch in der Funktion geom_ eingeben). Wir geben ein welche Variable auf der x-Achse und auf der y-Achse abgetragen werden soll. Eine weitere Variable könnten wir hier als group = ... oder color = ... einfügen.\n\nggplot(data = data_away,\n       mapping = aes(x = value1,\n                     y = value2))\n\n\n\n\nJetzt können wir das geom hinzufügen:\n\nggplot(data = data_away,\n       mapping = aes(x = value1,\n                     y = value2)) +\n    geom_point()"
  },
  {
    "objectID": "pages/chapters/data_visualization_1.html#beschriftungen-und-themes",
    "href": "pages/chapters/data_visualization_1.html#beschriftungen-und-themes",
    "title": "Grafiken erstellen mit ggplot\n",
    "section": "Beschriftungen und Themes",
    "text": "Beschriftungen und Themes\nSchönere und informativere Plots lassen sich gestalten, wenn wir einen Titel hinzufügen, die Achsenbeschriftung anpassen und das theme verändern:\n\nggplot(data = data_away,\n       mapping = aes(x = value1,\n                     y = value2)) +\n    geom_point() +\n    ggtitle (\"Ein etwas schönerer Plot\") +\n    xlab(\"Wert 1 [a.u.]\") +\n    ylab(\"Wert 2 [a.u.]\") +\n    theme_minimal()\n\n\n\n\n\nAuch theme_classic oder theme_bw eignen sich gut."
  },
  {
    "objectID": "pages/chapters/data_visualization_1.html#weitere-hilfreiche-informationen",
    "href": "pages/chapters/data_visualization_1.html#weitere-hilfreiche-informationen",
    "title": "Grafiken erstellen mit ggplot\n",
    "section": "Weitere hilfreiche Informationen",
    "text": "Weitere hilfreiche Informationen\n\nDokumentation von ggplot2\nKurzweilige, sehr informative Informationen und Videos über das Erstellen von Grafiken in ggplot finden Sie hier: Website PsyTeachR: Data Skills for reproducible research\nHier ist der Start der PsyTeachR Videoliste von Lisa deBruine, dort finden sich auch hilfreiche Kurzvideos zu Themen von Daten einlesen bis zu statistischen Analysen. Beispielsweise zu Basic Plots, Common Plots und Plot Themes and Customization\nEinführung in R von Andrew Ellis und Boris Mayer"
  },
  {
    "objectID": "pages/chapters/data_visualization_2.html",
    "href": "pages/chapters/data_visualization_2.html",
    "title": "Daten Visualisierung",
    "section": "",
    "text": "Datenvisualisierung ist ein wichtiger Schritt in der Analyse neurowissenschaftlicher Daten. Das grafische Darstellen von Informationen wird dient dazu die Datenkomplexität zu reduzieren und wichtige Eigenschaften herauszuheben und zusammenzufassen.\nDabei geht es nicht nur darum Ergebnisse zu kommunizieren, sondern auch dazu Einsichten über die Daten zu gewinnen: Auch wenn in den meisten wissenschaftlichen Artikeln nur wenige Grafiken gezeigt werden, wurden die Daten oft während der Analyse zahlreiche Male visualisiert.\nWir schauen uns drei Kernaufgaben der Datenvisualisierung an:\nJe nachdem welchem Zweck eine Grafik dienen soll, müssen andere Grafikeigenschaften berücksichtigt werden. Eine “gute” Grafik komprimiert die Information in den Daten so, dass Erkenntnisse gewonnen werden können.\nZuerst laden wir das tidyverse Package, lesen das gespeicherte .csv File ein und machen aus allen Variablen mit Text Faktoren."
  },
  {
    "objectID": "pages/chapters/data_visualization_2.html#fehlende-werte",
    "href": "pages/chapters/data_visualization_2.html#fehlende-werte",
    "title": "Daten Visualisierung",
    "section": "Fehlende Werte",
    "text": "Fehlende Werte\nHierbei ist es wichtig, vor allem systematisch fehlende Datenpunkte zu entdecken: Fehlt bei einer Person die Hälfte der Antworten? Möchten wir diese ausschliessen?\nDiese können mit dem Package naniar relativ schnell sichtbar gemacht werden.\n\nnaniar::vis_miss(data)\n\n\n\n\n\nBevor Sie das Package verwenden können, müssen Sie dies erst herunterladen. Sie können dies unter dem Reiter Tools > Install Packages ... tun oder in der Konsole mit install.packages(\"naniar\").\n\n\n\n\n\n\nHands-on\n\n\n\n\nWas sehen Sie in der Grafik?\nWeshalb fehlen nur Daten in der Reaktionszeitvariablen, aber keine in der Variable, die die Antwort angeben?\nWas ist zu tun?\n\n\n\n\n\n\n\n\n\nFehlende Werte\n\n\n\n\n\nWir hatten in Übung 2 die response- Variable wie folgt umkodiert:\ndata <- data |> \n    mutate(choice = if_else(response == \"j\", \"right\", \"left\"), \n    response = if_else(choice == \"right\", 1, 0))\nWenn wir Antworten mit ifelse kodieren, ergibt dies für keine Antwort auch die zweite Alternative (hier left). Sie können dies im Datensatz überprüfen: Alle Trials mit fehlenden Reaktionszeiten, sollten eine left-response aufweisen. Es wäre empfehlenswerter gewesen 3 Varianten zuzulassen: right, left sowie NA.\nEin Ansatz könnte sein, dass wir die Trials, die keine Reaktionszeiten enthalten rauslöschen:\n\ndata <- data |>\n    filter(rt != \"NA\")\n\nnaniar::vis_miss(data)\n\n\n\n\nDrei wichtige Punkte:\n\nWir löschen die Datenpunkte nicht aus den Rohdaten, sondern aus dem Datensatz, den wir für die Analysen verwenden. So können wir uns immer noch umentscheiden.\nDadurch, dass wir die Datenverarbeitung in reproduzierbarem Code geschrieben haben, konnten wir nun nachschauen, wo der Fehler entstanden ist und diesen korrigieren.\nEs macht nicht immer Sinn die Trials mit missing data zu löschen! Dies muss von Fall zu Fall entschieden werden.\n\n\n\n\nNachdem wir Trials ohne Antwort ausgeschlossen haben, interessiert es uns, wie viele Trials jede Versuchsperson gelöst hat:\n\n# Daten gruppieren und Anzahl Trials berechnen\ntrial_n <- data |>\n    group_by(id, condition) |>\n    summarise(N = n())\n\n# Plot: Anzahl Trials pro Bedingung für jede Versuchsperson \ntrial_n |> \n    ggplot(aes(x = id, y = N)) +\n    geom_point() +\n    facet_wrap(~ condition) +\n    theme_minimal()"
  },
  {
    "objectID": "pages/chapters/data_visualization_2.html#performanz-der-versuchspersonen",
    "href": "pages/chapters/data_visualization_2.html#performanz-der-versuchspersonen",
    "title": "Daten Visualisierung",
    "section": "Performanz der Versuchspersonen",
    "text": "Performanz der Versuchspersonen\nBevor wir die Daten analysieren, möchten wir wissen, ob die Personen die Aufgabe einigermassen gut lösen konnten. In unserem Experiment erwarten wir in der neutralen Bedingung eine Genauigkeit (accuracy) über dem Rateniveau von 50%. Dafür berechnen wir die accuracy für jede Versuchsperson und Bedingung, wie im Kapitel Aggregierte Statistiken beschrieben.\n\nacc_rt_individual <- data |>\n    group_by(id, condition) |>\n    summarise(\n        N = n(),\n        ncorrect = sum(correct),\n        accuracy = mean(correct),\n        median_rt = median(rt)\n    )\n\nWir plotten hier die accuracy für jede Person und Bedingung.\n\n# Plot accuracy per person and condition\nacc_rt_individual |> \n  ggplot(aes(x = condition, y = accuracy, color = condition, group = id)) +\n    geom_jitter(size = 3, alpha = 0.8, \n                width = 0.2, height = 0) +\n    scale_color_manual(values = c(invalid = \"tomato2\",\n                                 neutral = \"snow4\",\n                                 valid = \"skyblue3\")) +\n    labs(x = \"Cue\",\n         y = \"Proportion correct\",\n         title = \"Accuracy per Person and Condition\") +\n    theme_minimal(base_size = 12) +\n    theme(legend.position = \"none\")\n\n\n\n\nUnd wir interessieren uns, wie die accuracy zwischen den Bedingungen zusammenhängt. Dafür fügen wir Linien ein, die die accuracy- Werte pro Versuchsperson verbindet:\n\nacc_rt_individual |> \n    ggplot(aes(x = condition, y = accuracy, color = condition, group = id)) +\n    geom_line(color = \"grey40\", alpha = 0.5) +\n    geom_jitter(size = 3, alpha = 0.8, \n                width = 0, height = 0) +\n    scale_color_manual(values = c(invalid = \"tomato2\",\n                                 neutral = \"snow4\",\n                                 valid = \"skyblue3\")) +\n    labs(x = \"Cue\",\n         y = \"Proportion correct\",\n         title = \"Accuracy per Person and Condition\") +\n    theme_minimal(base_size = 12) +\n    theme(legend.position = \"none\")"
  },
  {
    "objectID": "pages/chapters/data_visualization_2.html#extreme-datenpunkte-ausreisser",
    "href": "pages/chapters/data_visualization_2.html#extreme-datenpunkte-ausreisser",
    "title": "Daten Visualisierung",
    "section": "Extreme Datenpunkte (Ausreisser)",
    "text": "Extreme Datenpunkte (Ausreisser)\nWir können Visualisierungen auch verwenden, um extreme Datenpunkte zu identifizieren.\nDafür teilen wir hier die Accuracywerte in 3 Gruppen ein und plotten diese:\n\n# Trials nach accuracy einteilen\nacc_rt_individual_grouped <- acc_rt_individual %>% \n  mutate(\n    performance = case_when(\n      accuracy > 0.5 ~ \"OK\",\n      accuracy < 0.2 ~ \"very bad\",\n      TRUE ~ \"bad\") %>% \n      factor(levels = c(\"OK\", \"bad\", \"very bad\")))\n\n# visualize outlier trials\nacc_rt_individual_grouped %>% \n    ggplot(aes(x = id, y = accuracy, color = performance, shape = performance)) +\n    geom_point(alpha = 0.6) + \n    geom_point(data = filter(acc_rt_individual_grouped, performance != \"OK\"), \n               alpha = 0.9) + \n    facet_grid(~condition) +\n    scale_color_manual(values = c(\"gray40\", \"steelblue\", \"red\")) +\n    geom_hline(yintercept = 0.5, linetype='dotted', col = 'black')+\n    annotate(\"text\", x = \"511\", y = 0.5, label = \"chance level\", vjust = -0.5, size = 3) +\n    theme_minimal()\n\n\n\n\n\nDasselbe könnte man für die Reaktionszeiten machen. Informationen dazu, wie Ausreisser in Reaktionszeiten gefunden und visualisiert werden können, finden Sie hier."
  },
  {
    "objectID": "pages/chapters/data_visualization_2.html#verlaufseffekte-ermüdung-und-lernen",
    "href": "pages/chapters/data_visualization_2.html#verlaufseffekte-ermüdung-und-lernen",
    "title": "Daten Visualisierung",
    "section": "Verlaufseffekte: Ermüdung und Lernen",
    "text": "Verlaufseffekte: Ermüdung und Lernen\nVerlaufseffekte können uns interessieren, weil wir starke Ermüdungs- oder Lerneffekte ausschliessen möchten. Sie könnten aber auch inhaltlich interessant sein, dann wären sie eher analytisch.\nIn unserem Experiment möchten wir sicher sein, dass die Performanz sich nicht zu stark verändert über die Zeit hinweg. Hierzu können wir beispielsweise die accuracy in den beiden Blöcken plotten:\n\nacc_rt_individual_block <- data |>\n    group_by(id, condition, block) |>\n    summarise(\n        accuracy = mean(correct)\n        )\n\nacc_rt_individual_block |>\n    ggplot(aes(x = block, y = accuracy, group = id, color = condition)) +\n    geom_point() +\n    geom_line() +\n    scale_color_manual(values = c(invalid = \"tomato3\",\n                                  neutral = \"snow4\",\n                                  valid = \"skyblue3\")) +\n    facet_wrap(~ condition) +\n    theme_minimal()\n\n\n\n\nOder wir können die Reaktionszeiten über die Zeit hinweg anschauen:\n\ndata |>\n    filter(id %in% c(\"184\", \"238\", \"511\")) |>\n    ggplot(aes(x = trial_all, y = rt, color = condition)) +\n    geom_smooth(method = \"lm\", se = FALSE) +\n    geom_point(alpha = 0.5) +\n    scale_color_manual(values = c(invalid = \"tomato2\",\n                                 neutral = \"snow4\",\n                                 valid = \"skyblue3\")) +\n    facet_wrap(~ id) +\n    theme_minimal()\n\n\n\n\n\n\n\n\n\n\nHands-on\n\n\n\nBesprechen Sie 5 Minuten miteinander, was wir nun über unsere Daten wissen.\n\nHaben die Versuchspersonen die Aufgaben lösen können?\nWelche Datensätze / Trials möchten wir ausschliessen? (Dies müsste eigentlich vor dem Anschauen der Daten entschieden werden, um zu verhindern, dass man Datenpunkte ausschliesst, welche die Hypothese nicht bestätigen.)\nWie gut eignen sich die Daten, um die Forschungsfrage zu beantworten?\nWas könnte bei einem nächsten Experiment besser gemacht werden?"
  },
  {
    "objectID": "pages/chapters/data_visualization_2.html#verteilung-der-rohdaten",
    "href": "pages/chapters/data_visualization_2.html#verteilung-der-rohdaten",
    "title": "Daten Visualisierung",
    "section": "Verteilung der Rohdaten",
    "text": "Verteilung der Rohdaten\nDaten von neurowissenschaftlichen Studien können wichtige Informationen enthalten, die ohne Grafiken übersehen werden können (Rousselet, Pernet, and Wilcox (2017)). Das Visualisieren kann Muster zum Vorschein bringen, die durch statistische Auswertungen nicht sichtbar sind.\nDie Wichtigkeit von Datenvisualisierung für das Entdecken von Mustern in den Daten zeigte Francis Anscombe 1973 mit dem Anscombe’s Quartet. Dies diente als Inspiration für das Erstellen des “künstlichen” Datensatzes DatasaurusDozen, welchen wir in der letzten Veranstaltung visualisiert haben. Verschiedene Rohwerte, können dieselben Mittelwerte, Standardabweichungen und Korrelationen ergeben. Nur wenn man die Rohwerte plottet erkennt man, wie unterschiedlich die Datenpunkte verteilt sind.\nDies wird ersichtlich, wenn wir die Mittelwerte und Standardabweichungen für jede Gruppe berechnen und plotten:\n\n# load DatasaurusDozen dataset\ndino_data <- read.csv(\"../../data/data_example/DatasaurusDozen.csv\") %>%\n    mutate(condition = as.factor(condition))\n\n# Plot mean and standard deviation for value 1 per condition \ndino_data |>   \n    group_by(condition) |>\n    summarise(mean_value1 = mean(value1),\n              sd_value1 = sd(value1)) |>\n    ggplot(mapping = aes(x = mean_value1,\n                     y = condition)) +\n    geom_point() +\n    geom_errorbar(aes(xmin = mean_value1 - sd_value1, \n                      xmax = mean_value1 + sd_value1), \n                  width = 0.2) +\n    theme_minimal()\n\n\n\n\nUnd dann die Rohwerte visualisieren:\n\n# Plot raw values\ndino_data |> \n    ggplot(aes(x = value1, y = value2)) +\n    geom_point(size = 1) +\n    facet_wrap(~condition) +\n    theme_minimal()\n\n\n\n\nHier sehen Sie das Ganze animiert:\n\n\nDatensatz und Visualisierung von Matejka and Fitzmaurice (2017)"
  },
  {
    "objectID": "pages/chapters/data_visualization_2.html#zentrale-tendenz-und-verteilungsmasse",
    "href": "pages/chapters/data_visualization_2.html#zentrale-tendenz-und-verteilungsmasse",
    "title": "Daten Visualisierung",
    "section": "Zentrale Tendenz und Verteilungsmasse",
    "text": "Zentrale Tendenz und Verteilungsmasse\nMasse der zentralen Tendenz sind beispielsweise der Mittelwert, der Median und Modus. Wenn wir uns dafür interessieren, wie sich die accuracy in Bezug auf alle Teilnehmenden verhält, schauen wir uns die zentrale Tendenz über alle Personen hinweg an. Es sollte nie nur die zentrale Tendenz, sondern immer auch ein passendes Verteilungsmass berichtet werden.\nDies können wir mit z.B. Boxplots tun. Diese zeigen uns den Median und die Quartile sowie Ausreisser an. Eine andere Möglichkeit Verteilungen anzuzeigen sind die Violinplots. Hier wurden mit geom_jitter() auch die Mittelwerte der einzelnen Personen im Plot eingefügt.\n\np1 <- acc_rt_individual |> \n  ggplot(aes(x = condition, y = accuracy, fill = condition)) +\n    geom_boxplot(alpha = .5) +\n    geom_jitter(alpha = .25, width = .2) +\n    scale_fill_manual(values = c(invalid = \"tomato3\",\n                                 neutral = \"snow3\",\n                                 valid = \"skyblue3\")) +\n    labs(x = \"Cue\",\n         y = \"Proportion correct\",\n         title = \"Accuracy per Person and Condition\") +\n    theme_minimal(base_size = 12) +\n    theme(legend.position = \"none\")\n\np2 <- acc_rt_individual |> \n  ggplot(aes(x = condition, y = accuracy, fill = condition)) +\n    geom_violin(alpha = .5) +\n    geom_jitter(alpha = .25, width = .2) +\n    scale_fill_manual(values = c(invalid = \"tomato3\",\n                                 neutral = \"snow3\",\n                                 valid = \"skyblue3\")) +\n    labs(x = \"Cue\",\n         y = \"Proportion correct\",\n         title = \"Accuracy per Person and Condition\") +\n    theme_minimal(base_size = 12) +\n    theme(legend.position = \"none\")\n\nlibrary(patchwork)\n\nWarning: Paket 'patchwork' wurde unter R Version 4.2.3 erstellt\n\np1 + p2\n\n\n\n\nHier finden Sie weitere Code-Beispiele für das Plotten von Verteilungsmassen."
  },
  {
    "objectID": "pages/chapters/data_visualization_2.html#aggregierte-statistiken",
    "href": "pages/chapters/data_visualization_2.html#aggregierte-statistiken",
    "title": "Daten Visualisierung",
    "section": "Aggregierte Statistiken",
    "text": "Aggregierte Statistiken\nWie in die Kapitel Aggregierte Statistiken berechnen wir nun den Mittelwert und den within-subject Standardfehler für unseren Datensatz.\n\ndatasum_3 <- data |>\n    Rmisc::summarySEwithin(measurevar = \"correct\",\n                               withinvars = \"condition\",\n                               idvar = \"id\",\n                               na.rm = FALSE,\n                               conf.interval = 0.95)\n\np_accuracy <- datasum_3 |>\n    ggplot(aes(x = condition, y = correct, group = 1)) +\n    geom_line() +\n    geom_errorbar(width = .1, aes(ymin = correct-se, ymax = correct+se), colour=\"red\") +\n    geom_point(shape=21, size=3, fill=\"white\") +\n    theme_minimal()\np_accuracy\n\n\n\n\nHier finden Sie Informationen, wie die Reaktionszeiten zusammengefasst und visualisiert werden könnten."
  },
  {
    "objectID": "pages/chapters/data_visualization_2.html#visualisieren-von-modellschätzungen",
    "href": "pages/chapters/data_visualization_2.html#visualisieren-von-modellschätzungen",
    "title": "Daten Visualisierung",
    "section": "Visualisieren von Modellschätzungen",
    "text": "Visualisieren von Modellschätzungen\nWenn für die statistische Analyse ein Modell geschätzt wurde, kann auch dies visualisiert werden. Auf diese Form der Visualisierung wird hier aber nicht eingegangen. Wir lernen dies im Rahmen der noch kommenden Versanstaltungen kennen."
  },
  {
    "objectID": "pages/chapters/data_visualization_2.html#beschriftungen",
    "href": "pages/chapters/data_visualization_2.html#beschriftungen",
    "title": "Daten Visualisierung",
    "section": "Beschriftungen",
    "text": "Beschriftungen\nDie genaue Beschriftung und deren Lesbarkeit ist für diese Form von Grafiken zentral. Achten Sie sich auf Folgendes:\n\nDie Achsenbeschriftungen enthalten die verwendete Variable in Klartext (nicht den R Variablennamen) und wenn zutreffend auch die Masseinheit (z.B. Response Time [ms]).\nFarben / Formen usw. werden in einer Legende den Gruppen zugeordnet (Ausnahme: wenn Daten von einzelnen Personen geplottet werden, wird die Versuchspersonennummer nicht aufgefürt).\nMasse der zentralen Tendenz und Varianzmasse werden beschrieben (z.B. Standardfehler oder Standardabweichung?)"
  },
  {
    "objectID": "pages/chapters/data_visualization_2.html#merkmale-einer-guten-grafik",
    "href": "pages/chapters/data_visualization_2.html#merkmale-einer-guten-grafik",
    "title": "Daten Visualisierung",
    "section": "5 Merkmale einer guten Grafik",
    "text": "5 Merkmale einer guten Grafik\nEs gibt unzählige Optionen die eigenen Daten zu visualisieren. Folgende Prinzipien helfen beim Erstellen einer informativen Grafik, die zur Kommunikation der Ergebnisse dient.\n\nDie Punkte 3-5 wurden aus dem Buch “The Visual Display of Quantitative Information” von Edward Tufte, 1986 entnommen: Link.\n1. Eine Frage beantworten\nJede Grafik sollte mindestens eine teilweise aber auch mehrere Fragen beantworten.\n👉 Welche Frage möchte ich beantworten? Welche Form der Visualisierung beantwortet diese Frage am besten?\nHierbei kann es hilfreich sein den “Arbeitstitel” der Grafik als Frage zu formulieren.\n2. Zielpublikum berücksichtigen\nBeim Erstellen der Grafik sollte beachtet werden, an wen sich die Grafik richtet. Für eine Präsentation müssen die Achsenbeschriftungen vergrössert und die Grafik simpel gehalten werden. In einem wissenschaftlichen Artikel kann die Grafik komplexer gestaltet werden, da die Lesenden sich mehr Zeit zum Anschauen nehmen können. Zudem sollten hier die Vorgaben des Journals berücksichtigt werden. Auch wichtig ist das Verwenden von “farbenblind-freundlichen” Palletten, rot und grün ist z.B. eine schlechte Wahl.\n👉 Für welchen Zweck / für wen erstelle ich die Grafik? Wie ist das Vorwissen des Zielpublikums?\n\nFür einen Fachartikel lohnt es sich, zu Beginn die Vorgaben der Fachzeitschrift zu berücksichtigen.\n3. Die Daten zeigen\nDas tönt simpel, wird aber oft nicht berücksichtigt. Bei einer Grafik geht es in erster Linie um die Daten. Es sollte die simpelste Form gewählt werden, welche die Informationen vermittelt. Oft braucht es keine ausgefallenen Grafikideen oder neuartigen Formate. Hierbei ist es wichtig, die Art der Daten zu berücksichtigen: Wie viele Variablen sind es? Sind diese kontinuierlich (z.B. Reaktionszeiten) oder diskret (z.B. Experimentalbedingungen)? Wie viele Dimensionen haben meine Daten? Mit zwei Achsen lassen sich zwei Dimensionen darstellen, zusätzlich können mit Farben und Formen noch weitere Dimensionen abgebildet werden (z.B. Millisekunden, Bedingung 1 und Bedingung 2). Es können Rohwerte geplottet werden oder summary statistics (z.B. Mittelwerte, Standardabweichungen)\n👉 Welche Art Grafik eignet sich für meine Frage und meine Daten? Schauen Sie z.B. hier nach oder nutzen Sie das esquisse-Package.\n\nBeispiele für verschiedenen Plots in R sind z.B. histogram, boxplot, violin plot, scatter plot / correlogram, jitter plot, raincloud plot, percentiles / shift functions, area chart, heat map.\n4. Optimieren des data-ink ratios\nDas Daten-Tinte-Verhältnis sollte so optimal wie möglich sein. Das bedeutet, das idealerweite jeder Strich, jeder Punkt, jedes Textfeld Information beinhaltet. Alles was keine Information transportiert oder nur wiederholt kann weggelassen werden.\n👉 Was kann ich weglassen?\n\nIn R kann zum Schluss des Plots + theme_minimal() hinzugefügt werden, dies entfernt u.a. den grauen Hintergrund. Das Grau des Hintergrunds ist Farbe (ink), welche keine Information transportiert, das Weglassen lässt die Grafik ruhiger wirken.\n5. Feedback einholen und revidieren\nDas Erstellen einer guten Grafik ist iterativ, das heisst, sie wird immer wieder überarbeitet, bis sie die Information möglichst einfach, genau aber klar kommuniziert. Hierbei ist Feedback oft unerlässlich.\n👉 Was denken andere über Ihre Grafik?"
  },
  {
    "objectID": "pages/chapters/data_visualization_2.html#mehrere-plots-in-einer-grafik-darstellen",
    "href": "pages/chapters/data_visualization_2.html#mehrere-plots-in-einer-grafik-darstellen",
    "title": "Daten Visualisierung",
    "section": "Mehrere Plots in einer Grafik darstellen",
    "text": "Mehrere Plots in einer Grafik darstellen\nDies können Sie mit dem Package patchwork sehr einfach machen. Sie finden oben oder hier ein Beispiel."
  },
  {
    "objectID": "pages/chapters/data_visualization_2.html#grafik-abspeichern",
    "href": "pages/chapters/data_visualization_2.html#grafik-abspeichern",
    "title": "Daten Visualisierung",
    "section": "Grafik abspeichern",
    "text": "Grafik abspeichern\nEine Grafik lässt sich abspeichern unter dem Reiter Plots > Export oder mit der Funktion ggsave()."
  },
  {
    "objectID": "pages/chapters/data_visualization_2.html#inspiration",
    "href": "pages/chapters/data_visualization_2.html#inspiration",
    "title": "Daten Visualisierung",
    "section": "Inspiration",
    "text": "Inspiration\n\nGrafiken für verschiedene Datenarten: From Data to Viz\nSimple bis crazy Chartideen: R Charts: Ggplot\nFarben für Grafiken: R Charts: Colors, noch mehr Farben"
  },
  {
    "objectID": "pages/chapters/datacamp.html",
    "href": "pages/chapters/datacamp.html",
    "title": "DataCamp",
    "section": "",
    "text": "Im Rahmen dieser Lehrveranstaltung können alle Teilnehmende sich bei DataCamp registrieren\nDataCamp ist eine Online-Lernplattform, welche sich auf Data Science und Datenanalyse konzentriert. Es bietet interaktive Kurse, Tutorials und Projekte in verschiedenen Programmiersprachen wie Python, R und SQL an. DataCamp Kurse auf unterschiedlichen Niveaus an; sowohl für Anfänger als auch für Fortgeschrittene gibt es ein breites Angebot an Kursen.\nSie können Sich unter folgendem Link mit Ihrer Uni Bern E-Mail Adresse (*unibe.ch) registrieren:\n👉🏼 DataCamp registration"
  },
  {
    "objectID": "pages/chapters/datacamp.html#hands-on-session",
    "href": "pages/chapters/datacamp.html#hands-on-session",
    "title": "DataCamp",
    "section": "Hands-on session",
    "text": "Hands-on session\nWir werden in der zweiten Sitzung mit Psychopy und Python ein Experiment erstellen. In Psychopy können Sie viel sehr über die grafische Oberfläche; es gibt jedoch einige kleine Dinge, welche wir mit Python selber coden müssen. Deshalb wäre es für Sie hiflreich, wenn Sie sich vorher auf der DataCamp Website ein wenig mit Python vertraut machen.\n\n1 - Python Basics\nJe nachdem wie viel Erfahrung Sie mit Python haben, können Sie sich entweder für den Kurs “Introduction to Python” oder “Intermediate Python” entscheiden.\n👉🏼 Introduction to Python\n👉🏼 Intermediate Python\nFür fortgeschrittene empfehlen wir die Kurse:\n👉🏼 Python Data Science Toolbox (Part 1)\n👉🏼 Python Data Science Toolbox (Part 2)\nDiese Kurse sind nicht obligatorisch; Sie brauchen für PsychoPy wirklich nur Grundkenntnisse. Python ist aber sowohl in der Forschung als der Privatwirtschaft sehr beliebt und Sie werden es sicherlich noch öfters brauchen, wenn Sie sich mit Datenanalyse beschäftigen.\n\n\n2 - Python Code mit ChatGPT generieren\nDies benötigt einen ChatGPT Account; einen solchen können Sie bei OpenAI gratis erstellen.\n👉🏼 chat.openai.com/chat\nVersuchen Sie, mit ChatGPT ein paar Zeilen Python Code zu generieren. Sie können hierzu einige Beispiele als den DataCamp Kursen verwenden.\n\nKann ChatGPT die Aufgaben lösen?\nWie kann Ihnen ChatGPT helfen, Code zu schreiben?\nWas müssen Sie beachten, wenn Sie Code von ChatGPT verwenden?"
  },
  {
    "objectID": "pages/chapters/experiment_stepbystep.html",
    "href": "pages/chapters/experiment_stepbystep.html",
    "title": "Experiment erstellen: Step by step",
    "section": "",
    "text": "Schauen Sie sich in PsychoPy die verschiedenen möglichen Bausteine für Experimente an. Versuchen Sie Stück für Stück das Experiment von Mulder et al. (2012) nachzubauen."
  },
  {
    "objectID": "pages/chapters/experiment_stepbystep.html#allgemeine-informationen-zu-psychopy",
    "href": "pages/chapters/experiment_stepbystep.html#allgemeine-informationen-zu-psychopy",
    "title": "Experiment erstellen: Step by step",
    "section": "Allgemeine Informationen zu PsychoPy",
    "text": "Allgemeine Informationen zu PsychoPy\nHilfreiche Informationen zum Erstellen von Experimenten in PsychoPy finden Sie hier:\n\nPsychoPy Website\nWalk-through: Builder\nDiskussionsforum"
  },
  {
    "objectID": "pages/chapters/experiment_stepbystep.html#random-dot-stimulus",
    "href": "pages/chapters/experiment_stepbystep.html#random-dot-stimulus",
    "title": "Experiment erstellen: Step by step",
    "section": "1. Random Dot Stimulus",
    "text": "1. Random Dot Stimulus\nErstellen Sie einen Random Dot Stimulus. Beachten Sie folgende Aspekte:\n\nTiming (Stimulusdauer): 1500 ms\nFarbe\nGrösse: gut sichtbar\nKohärenz: 0.08\nField size: 75% des Displays\n\n(Die Bewegungsrichtung können Sie noch vernachlässigen.)"
  },
  {
    "objectID": "pages/chapters/experiment_stepbystep.html#trialschleife",
    "href": "pages/chapters/experiment_stepbystep.html#trialschleife",
    "title": "Experiment erstellen: Step by step",
    "section": "2. Trialschleife",
    "text": "2. Trialschleife\nErstellen Sie eine Trial-Schleife.\n\nFixation 1 (100/350/800/1200 ms) (Zur Vereinfachung können Sie hier auch nur einen Wert wählen.)\nCue (1000 ms)\nFixation 2 (3400/4000/4500/5000 ms) (Zur Vereinfachung können Sie hier auch nur einen Wert wählen.)\nDots (1500 ms)\nFeedback\nTiming (ITI: Inter-Trial-Intervall)\nAntwort der Versuchsperson aufnehmen\n\n(Die Variation der Bewegungsrichtung und des Vorwissens können Sie noch vernachlässigen.)"
  },
  {
    "objectID": "pages/chapters/experiment_stepbystep.html#bedingungen",
    "href": "pages/chapters/experiment_stepbystep.html#bedingungen",
    "title": "Experiment erstellen: Step by step",
    "section": "3. Bedingungen",
    "text": "3. Bedingungen\n\nVariieren Sie die Bewegungsrichtung der Random Dots mit dem conditions.csv file: Bewegungsrichtung ist zu 50% rechts, zu 50% links.\nVariieren Sie den Cue fürs Vorwissen in jedem Trial mit dem conditions.csv file: Der Cue kann valide (4x), invalide (2x) oder neutral (4x) sein. Die Bewegungsrichtungen müssen auf alle Bedingungen gleich verteilt sein."
  },
  {
    "objectID": "pages/chapters/experiment_stepbystep.html#instruktion-und-debriefing",
    "href": "pages/chapters/experiment_stepbystep.html#instruktion-und-debriefing",
    "title": "Experiment erstellen: Step by step",
    "section": "4. Instruktion und Debriefing",
    "text": "4. Instruktion und Debriefing\n\nFügen Sie zu Beginn des Experiments eine Instruktion hinzu.\nFügen Sie am Ende des Experiments ein Debriefing hinzu."
  },
  {
    "objectID": "pages/chapters/experiment_stepbystep.html#test",
    "href": "pages/chapters/experiment_stepbystep.html#test",
    "title": "Experiment erstellen: Step by step",
    "section": "5. Test",
    "text": "5. Test\nFühren Sie das Experiment aus und schauen Sie sich den Datensatz an: Sind die untenstehenden Infos auf jeder Zeile vorhanden?\n\nVersuchspersonennummer\nRichtung des Stimulus\nCue / Vorwissen\nAntwort der Versuchsperson\nAntwortdauer der Versuchsperson"
  },
  {
    "objectID": "pages/chapters/experiment_stepbystep.html#übungsexperiment",
    "href": "pages/chapters/experiment_stepbystep.html#übungsexperiment",
    "title": "Experiment erstellen: Step by step",
    "section": "6. Übungsexperiment",
    "text": "6. Übungsexperiment\n\nLaden Sie hier das Experiment für Übung 1 herunter.\nVergleichen Sie das Experiment mit Ihrer Version, was fällt Ihnen auf?"
  },
  {
    "objectID": "pages/chapters/functions-loops.html",
    "href": "pages/chapters/functions-loops.html",
    "title": "Automatisieren",
    "section": "",
    "text": "Lernziele\n\n\n\n\n\nIn der heutigen Sitzung lernen wir:\n\nConditionals und Control Flow\nFunktionen erstellen\nLoops anwenden\nWir nun zwei Programmierkonzepte kennenlernen, die uns dabei helfen, Tasks zu automatisieren. Wir werden hier nicht in die Tiefe gehen; es geht uns vielmehr darum, Ihnen einen Überblick zu geben, was Sie mit diesen Konzepten machen können. Falls Sie tiefer in die Materie einsteigen möchten, gibt es entsprechende Kurse auf Datacamp."
  },
  {
    "objectID": "pages/chapters/functions-loops.html#alternativen-zu-for-loops",
    "href": "pages/chapters/functions-loops.html#alternativen-zu-for-loops",
    "title": "Automatisieren",
    "section": "Alternativen zu for-Loops",
    "text": "Alternativen zu for-Loops\nEs gibt in R mehrere Möglichkeiten, um über Vektoren oder Listen zu iterieren, ohne dabei explizite for-Loops zu schreiben. Dies hat den Vorteil, dass der Code kürzer und übersichtlicher wird.\n\nlapply und sapply\n\nlapply und sapply sind zwei Funktionen, welche über Listen iterieren. lapply und sapply sind sehr ähnlich. lapply gibt eine Liste zurück, während sapply eine Liste retournieren kann.\nAls Beispiel wollen wir jedes Element eines Vektors verdoppeln (dies kann in R auch einfacher gemacht werden, aber dies ist nur ein Übungsbeispiel).\n\nnumbers <- c(1, 2, 3, 4, 5)\n\nMit for können wir dies wie folgt tun.\n\nfor (number in numbers) {\n    print(number * 2)\n}\n\n[1] 2\n[1] 4\n[1] 6\n[1] 8\n[1] 10\n\n\nMit lapply und sapply haben wir zwei Möglichkeiten. Wir können entweder eine anonyme Funktion definieren, oder wir können eine Funktion zuerst definieren, und dann verwenden.\n\\(x) x * 2 definiert eine sogenannte anonyme Funktion. Diese Funktion nimmt ein Argument x und multipliziert es mit 2, erhält aber keinen eigenen Namen. Folglich können wir diese Funktion nicht wiederverwenden.\n\nlapply(numbers, \\(x) x * 2)\n\n[[1]]\n[1] 2\n\n[[2]]\n[1] 4\n\n[[3]]\n[1] 6\n\n[[4]]\n[1] 8\n\n[[5]]\n[1] 10\n\n\nMit einer Funktion, die wir zuerst definieren, sieht unser Beispiel so aus.\n\ndouble <- function(x) {\n    x * 2\n}\n\n\nlapply(numbers, double)\n\n[[1]]\n[1] 2\n\n[[2]]\n[1] 4\n\n[[3]]\n[1] 6\n\n[[4]]\n[1] 8\n\n[[5]]\n[1] 10\n\n\n\nsapply(numbers, double)\n\n[1]  2  4  6  8 10\n\n\nmap\nEine weitere Möglichkeit, über Listen zu iterieren, ist die Funktion map. map ist eine Funktion aus dem Paket purrr (wird automatisch geladen, wenn tidyverse geladen wird). map gibt immer eine Liste zurück.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.1.8\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\n\n\nnumbers |> map(double)\n\n[[1]]\n[1] 2\n\n[[2]]\n[1] 4\n\n[[3]]\n[1] 6\n\n[[4]]\n[1] 8\n\n[[5]]\n[1] 10\n\n\nWenn wir als Output einen Vektor haben wollen, müssen wir die Funktion unlist() verwenden.\n\nnumbers |> map(double) |> unlist()\n\n[1]  2  4  6  8 10"
  },
  {
    "objectID": "pages/chapters/functions_and_loops-2.html",
    "href": "pages/chapters/functions_and_loops-2.html",
    "title": "Funktionen und Schleifen",
    "section": "",
    "text": "Lernziele\n\n\n\n\n\nIn der heutigen Sitzung lernen wir:\n\nMehrere Datensätze importieren\nEine Schleife (loop) zu schreiben\nEine eigene Funktion schreiben"
  },
  {
    "objectID": "pages/chapters/functions_and_loops-2.html#schleifen-loops",
    "href": "pages/chapters/functions_and_loops-2.html#schleifen-loops",
    "title": "Funktionen und Schleifen",
    "section": "Schleifen (loops)",
    "text": "Schleifen (loops)\nSchleifen ermöglichen das x-beliebige Wiederholen eines Schrittes z.B. statt dem einzelnen Einlesen eines Datensatzes, werden alle Datensätze in einem Ordner eingelesen auf einmal eingelesen.\nUm mehrere Datensätze einzulesen benötigen wir:\n\nEine Liste aller Datensätze, die man einlesen möchte\nEine Schleife, die besagt, dass wir für jedes Objekt in der Liste etwas machen möchten\nEine Aufgabe, die wir mit jedem Objekt ausführen möchten\n\nMit einer Schleife sagt man dem Programm “Führe für jeden Datensatz dieser Liste folgendes durch: Lade den Datensatz.”\nEine Schleife wird in R wie folgt formuliert:\n\nfor (var in seq){\n    expr\n}\n\nMit var ist eine Variable in einer Sequenz seq gemeint. Bei uns wäre die Variable ein Name eines Datensatzes, und die Sequenz wäre eine Liste mit Datensätzen (z.B. alle Files in einem Ordner). expr meint expression, also was wir mit dieser Variable tun wollen, in unserem Beispiel wollen wir den Datensatz öffnen.\n\n\n\nInhalt\nBsp. Datensatz einlesen\n\n\n\nvar\nLaufvariable\nName des einzelnen Datensatzes\n\n\nseq\nSequenz/Vektor\nListe mit Namen aller Datensätze\n\n\nexpr\nSchritt/Aufgabe\nÖffnen des Datensatzes\n\n\n\nNun müssen wir statt var, seq und expr natürlich sinnvolle Variablen und Schritte einfügen. Zuerst erstellen wir die Liste, über die die Schleife laufen soll.\n\nmyFiles <- list.files(path = \"../../data/rdk_decision_experiment/data\",  # Pfad des Ordners mit den Datensätzen\n                      pattern = \".csv\", # Endung der Datensätze, hier .csv\n                      full.names = TRUE) \n\nmyFiles # zeige die Liste\n\n[1] \"../../data/rdk_decision_experiment/data/JH_rdk-discrimination_2022_Mar_07_1403.csv\"   \n[2] \"../../data/rdk_decision_experiment/data/NS_rdk-discrimination_2022_Mar_07_1331.csv\"   \n[3] \"../../data/rdk_decision_experiment/data/rh_rdk-discrimination_2022_Mar_02_1105.csv\"   \n[4] \"../../data/rdk_decision_experiment/data/sb_rdk-discrimination_2022_Mar_06_0746.csv\"   \n[5] \"../../data/rdk_decision_experiment/data/SS91_rdk-discrimination_2022_Mar_06_0953.csv\" \n[6] \"../../data/rdk_decision_experiment/data/VP1_rdk-discrimination_2022_Mar_07_1237.csv\"  \n[7] \"../../data/rdk_decision_experiment/data/VP2_rdk-discrimination_2022_Mar_07_1302.csv\"  \n[8] \"../../data/rdk_decision_experiment/data/VPN01_rdk-discrimination_2022_Mar_01_2142.csv\"\n[9] \"../../data/rdk_decision_experiment/data/VPN02_rdk-discrimination_2022_Mar_01_2208.csv\"\n\n\nDie Variable var können wir beliebig benennen, wir wählen hier file. Danach können wir die Schleife erstellen, die für jedes file in myFiles den Schritt Daten laden mit read.csv ausführt. Das sieht dann so aus:\n\nDiese Variable wird oft i oder j genannt.\n\nd <- NULL # Vorbereiten des Datensatzes \n\nfor (file in myFiles){\n    dataset <- read.csv(file)\n    d <- rbind(d, dataset) # wir fügen jeden neu eingelesenen Datensatz hinzu\n}"
  },
  {
    "objectID": "pages/chapters/functions_and_loops-2.html#funktionen",
    "href": "pages/chapters/functions_and_loops-2.html#funktionen",
    "title": "Funktionen und Schleifen",
    "section": "Funktionen",
    "text": "Funktionen\nStatt der Schleife, können wir es uns aber noch einfacher machen, in dem wir statt einer Schleide die Funktion mapverwenden. Funktionen sind sehr hilfreich, wenn man einen Schritt mehrmals machen will. Funktionen sind kleine Programme, denen man Infos geben muss (Parameter) und die dann immer dasselbe mit diesen Infos machen. Eine Funktion hat folgende Struktur:\n\nfunctionname <- function(parameter) {\n  body\n}\n\nDie Funktion mean()zum Beispiel macht immer dasselbe mit den Zahlen, die man ihr füttert.\n\nx <- c(1, 21, 3, 234, 5) # verschiedene Zahlen\n\nmean(x)\n\n\n\n\n\n\n\nHands-on\n\n\n\nWas macht die Funktion mean()?\nTipp: Geben Sie ?mean in Ihre R-Konsole ein.\n\nWas kann man bei der Funktion mean() als Parameter eingeben?\nMuss die eingegebene Variable x heissen? Probieren Sie aus.\nWas passiert, wenn man mean(x, trim = 1) eingibt?\nWas bedeutet na.rm? Fügen Sie im Vektor x ein NAhinzu und probieren Sie es aus.\n\n\n\nUm unsere Daten einzulesen verwenden wir die Funktion map vom Package purrr. Diese Funktion ist sehr praktisch. Sie nimmt als Parameter unsere Liste mit den Datensätzen und wendet für jeden Punkt in der Liste das an, was wir in Klammern angeben. Wir wollen Daten einlesen also schreiben wir hier: read.csv. Anschliessend müssen wir die Listen noch zu einem Datensatz umwandeln indem wir alle untereinander anordnen, also die Listen reihenweise binden: list_rbind().\n\nFalls Sie das Package purrr noch nicht installiert haben, können Sie in der Konsole install.packages(\"purrr\") eingeben. Jedes Package muss nur einmal installiert werden. Will man es verwenden, muss es aber mit library(purrr) geladen werden. Statt list_rbindzu verwenden könnten wir auch map_dfrnutzen, dann wäre der Code noch kompakter.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.1.8\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(purrr)\n\nd <- myFiles %>%\n    map(read.csv) |>\n    list_rbind()\n\nglimpse(d, width = 10)\n\nRows: 1,503\nColumns: 40\n$ cue                                        <chr> …\n$ direction                                  <chr> …\n$ practice_block_loop.thisRepN               <int> …\n$ practice_block_loop.thisTrialN             <int> …\n$ practice_block_loop.thisN                  <int> …\n$ practice_block_loop.thisIndex              <int> …\n$ main_blocks_loop.thisRepN                  <int> …\n$ main_blocks_loop.thisTrialN                <int> …\n$ main_blocks_loop.thisN                     <int> …\n$ main_blocks_loop.thisIndex                 <int> …\n$ static_isi.started                         <dbl> …\n$ static_isi.stopped                         <dbl> …\n$ fixation_pre.started                       <dbl> …\n$ fixation_pre.stopped                       <chr> …\n$ image.started                              <dbl> …\n$ image.stopped                              <chr> …\n$ fixation_post.started                      <dbl> …\n$ fixation_post.stopped                      <chr> …\n$ dots_background.started                    <dbl> …\n$ dots_background.stopped                    <chr> …\n$ dots_stimulus.started                      <dbl> …\n$ dots_stimulus.stopped                      <chr> …\n$ dots_keyboard_response.keys                <chr> …\n$ dots_keyboard_response.started             <dbl> …\n$ dots_keyboard_response.stopped             <chr> …\n$ feedback_text.started                      <dbl> …\n$ feedback_text.stopped                      <chr> …\n$ dots_keyboard_response.rt                  <dbl> …\n$ instruction_main_text.started              <dbl> …\n$ instruction_main_text.stopped              <chr> …\n$ instruction_main_keyboard_response.keys    <chr> …\n$ instruction_main_keyboard_response.rt      <dbl> …\n$ instruction_main_keyboard_response.started <dbl> …\n$ instruction_main_keyboard_response.stopped <chr> …\n$ Pseudonym                                  <chr> …\n$ date                                       <chr> …\n$ expName                                    <chr> …\n$ psychopyVersion                            <chr> …\n$ frameRate                                  <dbl> …\n$ X                                          <lgl> …"
  },
  {
    "objectID": "pages/chapters/importing_data-2.html",
    "href": "pages/chapters/importing_data-2.html",
    "title": "Daten importieren: Teil 2",
    "section": "",
    "text": "Lernziele\n\n\n\n\n\nIn der heutigen Sitzung lernen wir:\n\nArbeitsschritte automatisieren: mehrere Datensätze automatisch importieren\nMit ChatGPT Code verstehen"
  },
  {
    "objectID": "pages/chapters/importing_data-2.html#alle-files-in-einem-ordner-auflisten",
    "href": "pages/chapters/importing_data-2.html#alle-files-in-einem-ordner-auflisten",
    "title": "Daten importieren: Teil 2",
    "section": "Alle Files in einem Ordner auflisten",
    "text": "Alle Files in einem Ordner auflisten\nZuerst erstellen wir mit list.files() eine Liste aller .csv Files im Ordner data.\n\ndatadir <- \"data\"\n\ncsv_files <- datadir |>\n    list.files(pattern = \"csv\", full.names = TRUE)\n\n\ncsv_files\n\n[1] \"data/JH_rdk-discrimination_2022_Mar_07_1403.csv\"   \n[2] \"data/NS_rdk-discrimination_2022_Mar_07_1331.csv\"   \n[3] \"data/rh_rdk-discrimination_2022_Mar_02_1105.csv\"   \n[4] \"data/sb_rdk-discrimination_2022_Mar_06_0746.csv\"   \n[5] \"data/SS91_rdk-discrimination_2022_Mar_06_0953.csv\" \n[6] \"data/VP1_rdk-discrimination_2022_Mar_07_1237.csv\"  \n[7] \"data/VP2_rdk-discrimination_2022_Mar_07_1302.csv\"  \n[8] \"data/VPN01_rdk-discrimination_2022_Mar_01_2142.csv\"\n[9] \"data/VPN02_rdk-discrimination_2022_Mar_01_2208.csv\"\n\n\ncsv_files enthält nun die “Pfade” zu allen .csv Files im Ordner data. Diese Pfade können nun einzeln and read_csv() übergeben werden."
  },
  {
    "objectID": "pages/chapters/importing_data-2.html#mit-for-loop",
    "href": "pages/chapters/importing_data-2.html#mit-for-loop",
    "title": "Daten importieren: Teil 2",
    "section": "Mit for-Loop",
    "text": "Mit for-Loop\nZuerst brauchen wir eine Liste, in die wir die Daten einlesen können. Wir erstellen eine Liste mit der Länge der Anzahl Files, die wir haben.\n\ndata_list <- vector(\"list\", length(csv_files))\n\nNun können wir entweder über die Elemente der Liste iterieren, oder über die Indizes. Wir wählen letzteres, da wir die Indizes später für die Zuweisung der Daten verwenden können.\n\nfor (i in seq_along(csv_files)) {\n            df <- read_csv(csv_files[i])\n            data_list[[i]] <- df\n}\n\nDas Resultat ist eine Liste, in deren Elementen die neun csv Files gepesichert sind.\n\nlength(data_list)\n\n[1] 9\n\n\nDiese wollen wir nun zu einem Dataframe zusammenfügen. Dazu können wir do.call() verwenden. do.call() nimmt eine Funktion und eine Liste als Argumente. Die Liste werden wiederum als Argumente der Funktion verwendet.\n\ndata_loop <- do.call(rbind, data_list)\n\n\nhead(data_loop)\n\n# A tibble: 6 × 40\n  cue   direct…¹ pract…² pract…³ pract…⁴ pract…⁵ main_…⁶ main_…⁷ main_…⁸ main_…⁹\n  <chr> <chr>      <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1 none  right          0       0       0       5      NA      NA      NA      NA\n2 left  right          0       1       1       2      NA      NA      NA      NA\n3 right right          0       2       2       1      NA      NA      NA      NA\n4 left  left           0       3       3       0      NA      NA      NA      NA\n5 none  left           0       4       4       4      NA      NA      NA      NA\n6 right left           0       5       5       3      NA      NA      NA      NA\n# … with 30 more variables: static_isi.started <dbl>, static_isi.stopped <dbl>,\n#   fixation_pre.started <dbl>, fixation_pre.stopped <chr>,\n#   image.started <dbl>, image.stopped <chr>, fixation_post.started <dbl>,\n#   fixation_post.stopped <chr>, dots_background.started <dbl>,\n#   dots_background.stopped <chr>, dots_stimulus.started <dbl>,\n#   dots_stimulus.stopped <chr>, dots_keyboard_response.keys <chr>,\n#   dots_keyboard_response.started <dbl>, …"
  },
  {
    "objectID": "pages/chapters/importing_data-2.html#mit-map-und-list_rbind",
    "href": "pages/chapters/importing_data-2.html#mit-map-und-list_rbind",
    "title": "Daten importieren: Teil 2",
    "section": "Mit map und list_rbind\n",
    "text": "Mit map und list_rbind\n\nDasselbe können wir auch mit map() machen. Da auch hier der Output eine Liste ist, müssen wir diese auch zu einem Dataframe zusammenfügen. Dazu können wir list_rbind() verwenden.\n\ndata <- csv_files |> \n    map(read_csv) |>\n    list_rbind()\n\n\ndata |>\n  slice_head(n = 20)\n\n# A tibble: 20 × 40\n   cue   direc…¹ pract…² pract…³ pract…⁴ pract…⁵ main_…⁶ main_…⁷ main_…⁸ main_…⁹\n   <chr> <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 none  right         0       0       0       5      NA      NA      NA      NA\n 2 left  right         0       1       1       2      NA      NA      NA      NA\n 3 right right         0       2       2       1      NA      NA      NA      NA\n 4 left  left          0       3       3       0      NA      NA      NA      NA\n 5 none  left          0       4       4       4      NA      NA      NA      NA\n 6 right left          0       5       5       3      NA      NA      NA      NA\n 7 <NA>  <NA>         NA      NA      NA      NA      NA      NA      NA      NA\n 8 right right        NA      NA      NA      NA       0       0       0      18\n 9 right right        NA      NA      NA      NA       0       1       1      31\n10 none  right        NA      NA      NA      NA       0       2       2      66\n11 none  right        NA      NA      NA      NA       0       3       3      75\n12 left  left         NA      NA      NA      NA       0       4       4      13\n13 none  right        NA      NA      NA      NA       0       5       5      62\n14 none  left         NA      NA      NA      NA       0       6       6      41\n15 left  left         NA      NA      NA      NA       0       7       7      15\n16 left  right        NA      NA      NA      NA       0       8       8      32\n17 none  right        NA      NA      NA      NA       0       9       9      68\n18 none  left         NA      NA      NA      NA       0      10      10      40\n19 left  left         NA      NA      NA      NA       0      11      11       1\n20 left  left         NA      NA      NA      NA       0      12      12       3\n# … with 30 more variables: static_isi.started <dbl>, static_isi.stopped <dbl>,\n#   fixation_pre.started <dbl>, fixation_pre.stopped <chr>,\n#   image.started <dbl>, image.stopped <chr>, fixation_post.started <dbl>,\n#   fixation_post.stopped <chr>, dots_background.started <dbl>,\n#   dots_background.stopped <chr>, dots_stimulus.started <dbl>,\n#   dots_stimulus.stopped <chr>, dots_keyboard_response.keys <chr>,\n#   dots_keyboard_response.started <dbl>, …\n\n\nNun können wir wie in Teil 1 die Practice Trials entfernen.\n\ndata  <- data |>  \n        filter(!is.na(main_blocks_loop.thisN)) |>\n        select(-contains(\"practice_block_loop\"))"
  },
  {
    "objectID": "pages/chapters/importing_data-2.html#variablen-auswählen-und-umbennen",
    "href": "pages/chapters/importing_data-2.html#variablen-auswählen-und-umbennen",
    "title": "Daten importieren: Teil 2",
    "section": "Variablen auswählen und umbennen",
    "text": "Variablen auswählen und umbennen\nWir eliminieren die Variablen, die wir nicht brauchen (ISI, Fixationskreuz, Zeitangaben der Bilder, etc.).\n\ndata <- data |>\n    select(-contains(\"static\"),\n           -contains(\"fixation\"),\n           -contains(\"image\"),\n           -contains(\"instruction\"),\n           -contains(\"feedback\"))\n\nZum Schluss geben wir den Variablen, die wir behalten, noch deskriptivere Namen.\n\ndata <- data |>\n    select(trial = main_blocks_loop.thisN,\n           ID = Pseudonym,\n           cue,\n           direction,\n           response = dots_keyboard_response.keys,\n           rt = dots_keyboard_response.rt)\n\n\ndata |>\n  slice_head(n = 20)\n\n# A tibble: 20 × 6\n   trial ID    cue   direction response    rt\n   <dbl> <chr> <chr> <chr>     <chr>    <dbl>\n 1     0 JH    right right     j        0.714\n 2     1 JH    right right     j        0.627\n 3     2 JH    none  right     f        0.670\n 4     3 JH    none  right     j        0.574\n 5     4 JH    left  left      j        0.841\n 6     5 JH    none  right     j        0.668\n 7     6 JH    none  left      j        1.12 \n 8     7 JH    left  left      f        0.640\n 9     8 JH    left  right     f        1.13 \n10     9 JH    none  right     j        1.03 \n11    10 JH    none  left      f        1.35 \n12    11 JH    left  left      f        0.688\n13    12 JH    left  left      f        0.721\n14    13 JH    none  left      f        0.655\n15    14 JH    right right     j        1.02 \n16    15 JH    none  right     j        1.12 \n17    16 JH    left  left      f        1.08 \n18    17 JH    right left      f        0.643\n19    18 JH    right right     j        0.716\n20    19 JH    left  left      f        0.578"
  },
  {
    "objectID": "pages/chapters/importing_data-2.html#neue-variablen-definieren",
    "href": "pages/chapters/importing_data-2.html#neue-variablen-definieren",
    "title": "Daten importieren: Teil 2",
    "section": "Neue Variablen definieren",
    "text": "Neue Variablen definieren\nEine Antwort ist korrekt, wenn die gewählte Richtung der Richtung des Dot-Stimulus entspricht. Zuvor definieren wir zwei Variablen: choice besteht aus den Angaben “right” und “left”, response ist eine numerische Version davon (0 = “left”, 1 = “right”).\nKorrekte Antworten\n\ndata <- data |>\n    mutate(choice = if_else(response == \"j\", \"right\", \"left\"),\n           response = if_else(choice == \"right\", 1, 0))\n\ncorrect ist TRUE wenn choice == direction, FALSE wenn nicht. Wir konvertieren diese logische Variable mit as.numeric() in eine numerische Variable. as.numeric() konvertiert TRUE in 1 und FALSE in 0.\n\n\n\n\n\n\nLösung\n\n\n\n\nas.numeric(c(TRUE, FALSE))\n\n[1] 1 0\n\n\n\n\n\ndata <- data |>\n    mutate(correct = as.numeric(choice == direction))\n\n\nglimpse(data)\n\nRows: 1,440\nColumns: 8\n$ trial     <dbl> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17…\n$ ID        <chr> \"JH\", \"JH\", \"JH\", \"JH\", \"JH\", \"JH\", \"JH\", \"JH\", \"JH\", \"JH\", …\n$ cue       <chr> \"right\", \"right\", \"none\", \"none\", \"left\", \"none\", \"none\", \"l…\n$ direction <chr> \"right\", \"right\", \"right\", \"right\", \"left\", \"right\", \"left\",…\n$ response  <dbl> 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, …\n$ rt        <dbl> 0.7136441, 0.6271285, 0.6703410, 0.5738488, 0.8405913, 0.667…\n$ choice    <chr> \"right\", \"right\", \"left\", \"right\", \"right\", \"right\", \"right\"…\n$ correct   <dbl> 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n\n\nWir schauen uns die ersten 20 Zeilen an.\n\ndata |> \n  slice_head(n = 20)\n\n# A tibble: 20 × 8\n   trial ID    cue   direction response    rt choice correct\n   <dbl> <chr> <chr> <chr>        <dbl> <dbl> <chr>    <dbl>\n 1     0 JH    right right            1 0.714 right        1\n 2     1 JH    right right            1 0.627 right        1\n 3     2 JH    none  right            0 0.670 left         0\n 4     3 JH    none  right            1 0.574 right        1\n 5     4 JH    left  left             1 0.841 right        0\n 6     5 JH    none  right            1 0.668 right        1\n 7     6 JH    none  left             1 1.12  right        0\n 8     7 JH    left  left             0 0.640 left         1\n 9     8 JH    left  right            0 1.13  left         0\n10     9 JH    none  right            1 1.03  right        1\n11    10 JH    none  left             0 1.35  left         1\n12    11 JH    left  left             0 0.688 left         1\n13    12 JH    left  left             0 0.721 left         1\n14    13 JH    none  left             0 0.655 left         1\n15    14 JH    right right            1 1.02  right        1\n16    15 JH    none  right            1 1.12  right        1\n17    16 JH    left  left             0 1.08  left         1\n18    17 JH    right left             0 0.643 left         1\n19    18 JH    right right            1 0.716 right        1\n20    19 JH    left  left             0 0.578 left         1\n\n\nCue-Bedingungsvariable\nNun brauchen wir eine Variable, die angibt, ob die Bedingung “neutral”, “valid” oder “invalid” ist. Wir erstellen eine neue Variable condition und füllen sie mit case_when() mit den Werten “neutral”, “valid” oder “invalid”. case_when() erlaubt, mehrere if_else()-Bedingungen zu kombinieren. So wird hier der Variablen condition der Wert neutral zugewiesen, wenn cue == \"none\" ist. Falls cue == direction ist, wird der Wert valid zugewiesen. Falls cue != direction ist, wird der Wert invalid zugewiesen.\n\ndata <- data |>\n    mutate(condition = case_when(cue == \"none\" ~ \"neutral\",\n                                 cue == direction ~ \"valid\",\n                                 cue != direction ~ \"invalid\"))\n\n\ndata |> \n  slice_head(n = 20)\n\n# A tibble: 20 × 9\n   trial ID    cue   direction response    rt choice correct condition\n   <dbl> <chr> <chr> <chr>        <dbl> <dbl> <chr>    <dbl> <chr>    \n 1     0 JH    right right            1 0.714 right        1 valid    \n 2     1 JH    right right            1 0.627 right        1 valid    \n 3     2 JH    none  right            0 0.670 left         0 neutral  \n 4     3 JH    none  right            1 0.574 right        1 neutral  \n 5     4 JH    left  left             1 0.841 right        0 valid    \n 6     5 JH    none  right            1 0.668 right        1 neutral  \n 7     6 JH    none  left             1 1.12  right        0 neutral  \n 8     7 JH    left  left             0 0.640 left         1 valid    \n 9     8 JH    left  right            0 1.13  left         0 invalid  \n10     9 JH    none  right            1 1.03  right        1 neutral  \n11    10 JH    none  left             0 1.35  left         1 neutral  \n12    11 JH    left  left             0 0.688 left         1 valid    \n13    12 JH    left  left             0 0.721 left         1 valid    \n14    13 JH    none  left             0 0.655 left         1 neutral  \n15    14 JH    right right            1 1.02  right        1 valid    \n16    15 JH    none  right            1 1.12  right        1 neutral  \n17    16 JH    left  left             0 1.08  left         1 valid    \n18    17 JH    right left             0 0.643 left         1 invalid  \n19    18 JH    right right            1 0.716 right        1 valid    \n20    19 JH    left  left             0 0.578 left         1 valid    \n\n\nDaten als CSV speichern\nAn dieser Stelle speichern wir den neu kreierten Datensatz als .csv File in einen Ordner names data_clean. Somit können wir zu einem späteren Zeitpunkt die Daten einfach importieren, ohne die ganzen Schritte wiederholen zu müssen.\n\ndata |> write_csv(file = \"data_clean/rdkdata.csv\")"
  },
  {
    "objectID": "pages/chapters/importing_data-2.html#gruppierungsvariablen",
    "href": "pages/chapters/importing_data-2.html#gruppierungsvariablen",
    "title": "Daten importieren: Teil 2",
    "section": "Gruppierungsvariablen",
    "text": "Gruppierungsvariablen\nAlle Gruppierungsvariablen sollten nun zu Faktoren konvertiert werden.\n\ndata <- data |>\n    mutate(across(where(is.character), as_factor))\n\n\nglimpse(data)\n\nRows: 1,440\nColumns: 9\n$ trial     <dbl> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17…\n$ ID        <fct> JH, JH, JH, JH, JH, JH, JH, JH, JH, JH, JH, JH, JH, JH, JH, …\n$ cue       <fct> right, right, none, none, left, none, none, left, left, none…\n$ direction <fct> right, right, right, right, left, right, left, left, right, …\n$ response  <dbl> 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, …\n$ rt        <dbl> 0.7136441, 0.6271285, 0.6703410, 0.5738488, 0.8405913, 0.667…\n$ choice    <fct> right, right, left, right, right, right, right, left, left, …\n$ correct   <dbl> 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ condition <fct> valid, valid, neutral, neutral, valid, neutral, neutral, val…"
  },
  {
    "objectID": "pages/chapters/importing_data-2.html#daten-überprüfen",
    "href": "pages/chapters/importing_data-2.html#daten-überprüfen",
    "title": "Daten importieren: Teil 2",
    "section": "Daten überprüfen",
    "text": "Daten überprüfen\nWir überprüfen, ob die Daten korrekt sind. Dazu schauen wir uns die Anzahl der Trials pro Person und pro Bedingung an. Sie können mehr Zeilen anzeigen, indem sie n = in der Funktion slice_head() ändern.\n\ndata |> \n  group_by(ID, condition) |>\n  summarise(n_trials = n()) |>\n  slice_head(n = 20)\n\n`summarise()` has grouped output by 'ID'. You can override using the `.groups`\nargument.\n\n\n# A tibble: 27 × 3\n# Groups:   ID [9]\n   ID    condition n_trials\n   <fct> <fct>        <int>\n 1 JH    valid           64\n 2 JH    neutral         80\n 3 JH    invalid         16\n 4 NS    valid           64\n 5 NS    neutral         80\n 6 NS    invalid         16\n 7 rh    valid           64\n 8 rh    neutral         80\n 9 rh    invalid         16\n10 sb    valid           64\n# … with 17 more rows"
  },
  {
    "objectID": "pages/chapters/importing_data-2.html#accuracy-pro-personbedingung",
    "href": "pages/chapters/importing_data-2.html#accuracy-pro-personbedingung",
    "title": "Daten importieren: Teil 2",
    "section": "Accuracy pro Person/Bedingung",
    "text": "Accuracy pro Person/Bedingung\nNun berechnen wir pro Person und pro Bedingung die Anzahl der korrekten Antworten und die Accuracy. Die Accuracy ist die Anzahl der korrekten Antworten geteilt durch die Anzahl der Trials.\n\naccuracy <- data |>\n    group_by(ID, condition) |>\n    summarise(N = n(),\n              ncorrect = sum(correct),\n              accuracy = mean(correct))\n\n`summarise()` has grouped output by 'ID'. You can override using the `.groups`\nargument.\n\n\n\naccuracy\n\n# A tibble: 27 × 5\n# Groups:   ID [9]\n   ID    condition     N ncorrect accuracy\n   <fct> <fct>     <int>    <dbl>    <dbl>\n 1 JH    valid        64       60    0.938\n 2 JH    neutral      80       66    0.825\n 3 JH    invalid      16       13    0.812\n 4 NS    valid        64       58    0.906\n 5 NS    neutral      80       56    0.7  \n 6 NS    invalid      16       11    0.688\n 7 rh    valid        64       61    0.953\n 8 rh    neutral      80       64    0.8  \n 9 rh    invalid      16        2    0.125\n10 sb    valid        64       62    0.969\n# … with 17 more rows"
  },
  {
    "objectID": "pages/chapters/importing_data-2.html#visualisieren",
    "href": "pages/chapters/importing_data-2.html#visualisieren",
    "title": "Daten importieren: Teil 2",
    "section": "Visualisieren",
    "text": "Visualisieren\n\naccuracy |> \n  ggplot(aes(x = condition, y = accuracy, fill = condition)) +\n  geom_col() +\n  geom_line(aes(group = ID), linewidth = 2) +\n  geom_point(size = 4) +\n  scale_fill_manual(values = c(invalid = \"#9E0142\",\n                    neutral = \"#C4C4B7\",\n                    valid = \"#2EC762\")) +\n  labs(x = \"Cue\",\n      y = \"Proportion correct\",\n      title = \"Accuracy per person/condition\") +\n  facet_wrap(~ID) +\n  theme_linedraw(base_size = 28) +\n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "pages/chapters/importing_data.html",
    "href": "pages/chapters/importing_data.html",
    "title": "Daten importieren: Teil 1",
    "section": "",
    "text": "Lernziele\n\n\n\n\n\nIn der heutigen Sitzung lernen wir:\n\nMit RStudio arbeiten\nEinzelne Psychopy .csv Datensätze importieren\nVariablen auswählen/umbenennen\nNeue Variablen berechnen\nMehrere Datensätze importieren\nMit ChatGPT Code verstehen"
  },
  {
    "objectID": "pages/chapters/importing_data.html#csv-file-importieren",
    "href": "pages/chapters/importing_data.html#csv-file-importieren",
    "title": "Daten importieren: Teil 1",
    "section": "CSV File importieren",
    "text": "CSV File importieren\nWir werden nun das File ZZ_rdk-discrimination_2022_Mar_07_1403.csv aus dem testdata Ordner einlesen. Bevor wir das tun, ist es sinnvoll, sich das File z.B. in Excel anschauen.\n\n\n\n\n\n\nLösung\n\n\n\nÖffnen Sie ZZ_rdk-discrimination_2022_Mar_07_1403.csv in Excel.\nWas steht in den Spalten? Was steht in den Zeilen?\n\n\nNun können Sie entweder über die GUI-Option (Menu > File > Import Dataset > From text (readr)) oder direkt das File einlesen.\n\ntestdata <- read_csv(\"testdata/ZZ_rdk-discrimination_2022_Mar_07_1403.csv\") \n\nVariablen überprüfen\n\nglimpse(testdata)\n\nRows: 167\nColumns: 39\n$ cue                                        <chr> \"none\", \"left\", \"right\", \"l…\n$ direction                                  <chr> \"right\", \"right\", \"right\", …\n$ practice_block_loop.thisRepN               <dbl> 0, 0, 0, 0, 0, 0, NA, NA, N…\n$ practice_block_loop.thisTrialN             <dbl> 0, 1, 2, 3, 4, 5, NA, NA, N…\n$ practice_block_loop.thisN                  <dbl> 0, 1, 2, 3, 4, 5, NA, NA, N…\n$ practice_block_loop.thisIndex              <dbl> 5, 2, 1, 0, 4, 3, NA, NA, N…\n$ main_blocks_loop.thisRepN                  <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ main_blocks_loop.thisTrialN                <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ main_blocks_loop.thisN                     <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ main_blocks_loop.thisIndex                 <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ static_isi.started                         <dbl> 0.01033428, 0.03202713, 0.0…\n$ static_isi.stopped                         <dbl> 2.010334, 2.032027, 2.03217…\n$ fixation_pre.started                       <dbl> 26.79425, 36.16522, 44.7852…\n$ fixation_pre.stopped                       <chr> \"None\", \"None\", \"None\", \"No…\n$ image.started                              <dbl> 27.19849, 36.28205, 46.0032…\n$ image.stopped                              <chr> \"None\", \"None\", \"None\", \"No…\n$ fixation_post.started                      <dbl> 28.17814, 37.28240, 47.0037…\n$ fixation_post.stopped                      <chr> \"None\", \"None\", \"None\", \"No…\n$ dots_background.started                    <dbl> 32.18642, 41.30145, 52.0107…\n$ dots_background.stopped                    <chr> \"None\", \"None\", \"None\", \"No…\n$ dots_stimulus.started                      <dbl> 32.18642, 41.30145, 52.0107…\n$ dots_stimulus.stopped                      <chr> \"None\", \"None\", \"None\", \"No…\n$ dots_keyboard_response.keys                <chr> \"None\", \"f\", \"j\", \"f\", \"Non…\n$ dots_keyboard_response.started             <dbl> 32.18642, 41.30145, 52.0107…\n$ dots_keyboard_response.stopped             <chr> \"None\", \"None\", \"None\", \"No…\n$ feedback_text.started                      <dbl> 33.70200, 42.28899, 52.9229…\n$ feedback_text.stopped                      <chr> \"None\", \"None\", \"None\", \"No…\n$ dots_keyboard_response.rt                  <dbl> NA, 0.9339199, 0.8488816, 0…\n$ instruction_main_text.started              <dbl> NA, NA, NA, NA, NA, NA, 81.…\n$ instruction_main_text.stopped              <chr> NA, NA, NA, NA, NA, NA, \"No…\n$ instruction_main_keyboard_response.keys    <chr> NA, NA, NA, NA, NA, NA, \"sp…\n$ instruction_main_keyboard_response.rt      <dbl> NA, NA, NA, NA, NA, NA, 3.1…\n$ instruction_main_keyboard_response.started <dbl> NA, NA, NA, NA, NA, NA, 81.…\n$ instruction_main_keyboard_response.stopped <chr> NA, NA, NA, NA, NA, NA, \"No…\n$ Pseudonym                                  <chr> \"ZZ\", \"ZZ\", \"ZZ\", \"ZZ\", \"ZZ…\n$ date                                       <chr> \"2022_Mar_07_1403\", \"2022_M…\n$ expName                                    <chr> \"rdk-discrimination\", \"rdk-…\n$ psychopyVersion                            <chr> \"03.02.21\", \"03.02.21\", \"03…\n$ frameRate                                  <dbl> 59.9, 59.9, 59.9, 59.9, 59.…"
  },
  {
    "objectID": "pages/chapters/importing_data.html#practice-trials-löschen",
    "href": "pages/chapters/importing_data.html#practice-trials-löschen",
    "title": "Daten importieren: Teil 1",
    "section": "Practice Trials löschen",
    "text": "Practice Trials löschen\nVielleicht haben Sie bemerkt, dass die ersten 6 Zeilen Übungstrials sind. Diese wollen wir nicht analysieren, und können folglich gelöscht werden.\n\n\n\n\n\n cue \n    direction \n    practice_block_loop.thisRepN \n    practice_block_loop.thisTrialN \n    practice_block_loop.thisN \n    practice_block_loop.thisIndex \n    main_blocks_loop.thisRepN \n    main_blocks_loop.thisTrialN \n    main_blocks_loop.thisN \n    main_blocks_loop.thisIndex \n    static_isi.started \n    static_isi.stopped \n    fixation_pre.started \n    fixation_pre.stopped \n    image.started \n    image.stopped \n    fixation_post.started \n    fixation_post.stopped \n    dots_background.started \n    dots_background.stopped \n    dots_stimulus.started \n    dots_stimulus.stopped \n    dots_keyboard_response.keys \n    dots_keyboard_response.started \n    dots_keyboard_response.stopped \n    feedback_text.started \n    feedback_text.stopped \n    dots_keyboard_response.rt \n    instruction_main_text.started \n    instruction_main_text.stopped \n    instruction_main_keyboard_response.keys \n    instruction_main_keyboard_response.rt \n    instruction_main_keyboard_response.started \n    instruction_main_keyboard_response.stopped \n    Pseudonym \n    date \n    expName \n    psychopyVersion \n    frameRate \n  \n\n\n none \n    right \n    0 \n    0 \n    0 \n    5 \n    NA \n    NA \n    NA \n    NA \n    0.0103343 \n    2.010334 \n    26.79425 \n    None \n    27.19849 \n    None \n    28.17814 \n    None \n    32.18642 \n    None \n    32.18642 \n    None \n    None \n    32.18642 \n    None \n    33.70200 \n    None \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    ZZ \n    2022_Mar_07_1403 \n    rdk-discrimination \n    03.02.21 \n    59.9 \n  \n\n left \n    right \n    0 \n    1 \n    1 \n    2 \n    NA \n    NA \n    NA \n    NA \n    0.0320271 \n    2.032027 \n    36.16522 \n    None \n    36.28205 \n    None \n    37.28240 \n    None \n    41.30145 \n    None \n    41.30145 \n    None \n    f \n    41.30145 \n    None \n    42.28899 \n    None \n    0.9339199 \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    ZZ \n    2022_Mar_07_1403 \n    rdk-discrimination \n    03.02.21 \n    59.9 \n  \n\n right \n    right \n    0 \n    2 \n    2 \n    1 \n    NA \n    NA \n    NA \n    NA \n    0.0321732 \n    2.032173 \n    44.78521 \n    None \n    46.00329 \n    None \n    47.00374 \n    None \n    52.01072 \n    None \n    52.01072 \n    None \n    j \n    52.01072 \n    None \n    52.92295 \n    None \n    0.8488816 \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    ZZ \n    2022_Mar_07_1403 \n    rdk-discrimination \n    03.02.21 \n    59.9 \n  \n\n left \n    left \n    0 \n    3 \n    3 \n    0 \n    NA \n    NA \n    NA \n    NA \n    0.0321533 \n    2.032153 \n    55.39138 \n    None \n    56.19407 \n    None \n    57.22527 \n    None \n    61.23181 \n    None \n    61.23181 \n    None \n    f \n    61.23181 \n    None \n    62.21611 \n    None \n    0.9396018 \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    ZZ \n    2022_Mar_07_1403 \n    rdk-discrimination \n    03.02.21 \n    59.9 \n  \n\n none \n    left \n    0 \n    4 \n    4 \n    4 \n    NA \n    NA \n    NA \n    NA \n    0.0321391 \n    2.032139 \n    64.71204 \n    None \n    64.81315 \n    None \n    65.84603 \n    None \n    69.25240 \n    None \n    69.25240 \n    None \n    None \n    69.25240 \n    None \n    70.78541 \n    None \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    ZZ \n    2022_Mar_07_1403 \n    rdk-discrimination \n    03.02.21 \n    59.9 \n  \n\n right \n    left \n    0 \n    5 \n    5 \n    3 \n    NA \n    NA \n    NA \n    NA \n    0.0323178 \n    2.032318 \n    73.24960 \n    None \n    74.45209 \n    None \n    75.48391 \n    None \n    79.99045 \n    None \n    79.99045 \n    None \n    f \n    79.99045 \n    None \n    80.80311 \n    None \n    0.7490084 \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    ZZ \n    2022_Mar_07_1403 \n    rdk-discrimination \n    03.02.21 \n    59.9 \n  \n\n NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    81.30346 \n    None \n    space \n    3.187924 \n    81.30346 \n    None \n    ZZ \n    2022_Mar_07_1403 \n    rdk-discrimination \n    03.02.21 \n    59.9 \n  \n\n right \n    right \n    NA \n    NA \n    NA \n    NA \n    0 \n    0 \n    0 \n    18 \n    0.0160001 \n    2.016000 \n    86.52245 \n    None \n    86.89231 \n    None \n    87.92302 \n    None \n    92.92987 \n    None \n    92.92987 \n    None \n    j \n    92.92987 \n    None \n    93.70924 \n    None \n    0.7136441 \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    ZZ \n    2022_Mar_07_1403 \n    rdk-discrimination \n    03.02.21 \n    59.9 \n  \n\n right \n    right \n    NA \n    NA \n    NA \n    NA \n    0 \n    1 \n    1 \n    31 \n    0.0318162 \n    2.031816 \n    96.17699 \n    None \n    96.54602 \n    None \n    97.57770 \n    None \n    101.58423 \n    None \n    101.58423 \n    None \n    j \n    101.58423 \n    None \n    102.26673 \n    None \n    0.6271285 \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    ZZ \n    2022_Mar_07_1403 \n    rdk-discrimination \n    03.02.21 \n    59.9 \n  \n\n none \n    right \n    NA \n    NA \n    NA \n    NA \n    0 \n    2 \n    2 \n    66 \n    0.0321148 \n    2.032115 \n    104.76463 \n    None \n    105.13302 \n    None \n    106.16508 \n    None \n    110.67183 \n    None \n    110.67183 \n    None \n    f \n    110.67183 \n    None \n    111.38828 \n    None \n    0.6703410 \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    ZZ \n    2022_Mar_07_1403 \n    rdk-discrimination \n    03.02.21 \n    59.9 \n  \n\n none \n    right \n    NA \n    NA \n    NA \n    NA \n    0 \n    3 \n    3 \n    75 \n    0.0321121 \n    2.032112 \n    113.88535 \n    None \n    115.08794 \n    None \n    116.11989 \n    None \n    119.52612 \n    None \n    119.52612 \n    None \n    j \n    119.52612 \n    None \n    120.15512 \n    None \n    0.5738488 \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    ZZ \n    2022_Mar_07_1403 \n    rdk-discrimination \n    03.02.21 \n    59.9 \n  \n\n left \n    left \n    NA \n    NA \n    NA \n    NA \n    0 \n    4 \n    4 \n    13 \n    0.0321118 \n    2.032112 \n    122.62295 \n    None \n    123.82583 \n    None \n    124.85742 \n    None \n    129.36397 \n    None \n    129.36397 \n    None \n    j \n    129.36397 \n    None \n    130.25975 \n    None \n    0.8405913 \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    ZZ \n    2022_Mar_07_1403 \n    rdk-discrimination \n    03.02.21 \n    59.9 \n  \n\n\n\n\nDie Variable main_blocks_loop.thisN ist die Trialnummer. Diese können wir verwenden, um die Zeilen auszuschliessen, die nicht zum Main Block gehören – bei den Übungstrials ist der Wert NA.\n\n\n\n\n\n\n\n\n main_blocks_loop.thisRepN \n    main_blocks_loop.thisTrialN \n    main_blocks_loop.thisN \n    main_blocks_loop.thisIndex \n  \n\n\n NA \n    NA \n    NA \n    NA \n  \n\n NA \n    NA \n    NA \n    NA \n  \n\n NA \n    NA \n    NA \n    NA \n  \n\n NA \n    NA \n    NA \n    NA \n  \n\n NA \n    NA \n    NA \n    NA \n  \n\n NA \n    NA \n    NA \n    NA \n  \n\n NA \n    NA \n    NA \n    NA \n  \n\n 0 \n    0 \n    0 \n    18 \n  \n\n 0 \n    1 \n    1 \n    31 \n  \n\n 0 \n    2 \n    2 \n    66 \n  \n\n 0 \n    3 \n    3 \n    75 \n  \n\n 0 \n    4 \n    4 \n    13 \n  \n\n\n\n\nMit folgendem Code filtern wir zuerst, so dass , bei wir nur noch Zeilen behalten, bei denen nicht der Wert NA in der Spalte main_blocks_loop.thisN steht. Dann wählen wir alle Spalten ausser practice_block_loop.\n\ntestdata <- testdata |> \n    filter(!is.na(main_blocks_loop.thisN)) |>\n    select(-contains(\"practice_block_loop\"))\n\n\n\n\n\n\n\nChatGPT\n\n\n\nFalls Code nicht verständlich finden, können Sie ChatGPT fragen. Benutzen Sie folgenden Prompt:\nWhat does the following R code do? \n\ntestdata <- testdata |> \n    filter(!is.na(main_blocks_loop.thisN)) |>\n    select(-contains(\"practice_block_loop\"))"
  },
  {
    "objectID": "pages/chapters/importing_data.html#variablen-auswählen",
    "href": "pages/chapters/importing_data.html#variablen-auswählen",
    "title": "Daten importieren: Teil 1",
    "section": "Variablen auswählen",
    "text": "Variablen auswählen\nDie folgenden Variablen enthalten Informationen zu den Inter-Trial Intervallen, Fixationskreuzen, Feedback, etc, und sind für uns an dieser Stelle nicht interessant.\n\ntestdata |>\n    select(contains(\"static\"),\n           contains(\"fixation\"),\n           contains(\"image\"),\n           contains(\"instruction\"),\n           contains(\"feedback\"))\n\n# A tibble: 160 × 16\n   static_isi.…¹ stati…² fixat…³ fixat…⁴ fixat…⁵ fixat…⁶ image…⁷ image…⁸ instr…⁹\n           <dbl>   <dbl>   <dbl> <chr>     <dbl> <chr>     <dbl> <chr>     <dbl>\n 1        0.0160    2.02    86.5 None       87.9 None       86.9 None         NA\n 2        0.0318    2.03    96.2 None       97.6 None       96.5 None         NA\n 3        0.0321    2.03   105.  None      106.  None      105.  None         NA\n 4        0.0321    2.03   114.  None      116.  None      115.  None         NA\n 5        0.0321    2.03   123.  None      125.  None      124.  None         NA\n 6        0.0321    2.03   133.  None      135.  None      134.  None         NA\n 7        0.0321    2.03   142.  None      144.  None      143.  None         NA\n 8        0.0321    2.03   152.  None      154.  None      153.  None         NA\n 9        0.0321    2.03   161.  None      163.  None      162.  None         NA\n10        0.0321    2.03   172.  None      173.  None      172.  None         NA\n# … with 150 more rows, 7 more variables: instruction_main_text.stopped <chr>,\n#   instruction_main_keyboard_response.keys <chr>,\n#   instruction_main_keyboard_response.rt <dbl>,\n#   instruction_main_keyboard_response.started <dbl>,\n#   instruction_main_keyboard_response.stopped <chr>,\n#   feedback_text.started <dbl>, feedback_text.stopped <chr>, and abbreviated\n#   variable names ¹​static_isi.started, ²​static_isi.stopped, …\n\n\nMit select können wir alle Variablen ausser diesen auswählen.\n\ntestdata <- testdata |>\n    select(-contains(\"static\"),\n           -contains(\"fixation\"),\n           -contains(\"image\"),\n           -contains(\"instruction\"),\n           -contains(\"feedback\"))\n\n\ntestdata\n\n# A tibble: 160 × 19\n   cue   direc…¹ main_…² main_…³ main_…⁴ main_…⁵ dots_…⁶ dots_…⁷ dots_…⁸ dots_…⁹\n   <chr> <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl> <chr>     <dbl> <chr>  \n 1 right right         0       0       0      18    92.9 None       92.9 None   \n 2 right right         0       1       1      31   102.  None      102.  None   \n 3 none  right         0       2       2      66   111.  None      111.  None   \n 4 none  right         0       3       3      75   120.  None      120.  None   \n 5 left  left          0       4       4      13   129.  None      129.  None   \n 6 none  right         0       5       5      62   139.  None      139.  None   \n 7 none  left          0       6       6      41   148.  None      148.  None   \n 8 left  left          0       7       7      15   158.  None      158.  None   \n 9 left  right         0       8       8      32   168.  None      168.  None   \n10 none  right         0       9       9      68   178.  None      178.  None   \n# … with 150 more rows, 9 more variables: dots_keyboard_response.keys <chr>,\n#   dots_keyboard_response.started <dbl>, dots_keyboard_response.stopped <chr>,\n#   dots_keyboard_response.rt <dbl>, Pseudonym <chr>, date <chr>,\n#   expName <chr>, psychopyVersion <chr>, frameRate <dbl>, and abbreviated\n#   variable names ¹​direction, ²​main_blocks_loop.thisRepN,\n#   ³​main_blocks_loop.thisTrialN, ⁴​main_blocks_loop.thisN,\n#   ⁵​main_blocks_loop.thisIndex, ⁶​dots_background.started, …"
  },
  {
    "objectID": "pages/chapters/importing_data.html#variablen-umbenennen",
    "href": "pages/chapters/importing_data.html#variablen-umbenennen",
    "title": "Daten importieren: Teil 1",
    "section": "Variablen umbenennen",
    "text": "Variablen umbenennen\nNun wollen Variablen identifizieren, die uns interessieren. Diese wollen wir umbenennen.\n\ntestdata <- testdata |>\n    select(trial = main_blocks_loop.thisN,\n           ID = Pseudonym,\n           cue,\n           direction,\n           response = dots_keyboard_response.keys,\n           rt = dots_keyboard_response.rt)\n\n\ntestdata\n\n# A tibble: 160 × 6\n   trial ID    cue   direction response    rt\n   <dbl> <chr> <chr> <chr>     <chr>    <dbl>\n 1     0 ZZ    right right     j        0.714\n 2     1 ZZ    right right     j        0.627\n 3     2 ZZ    none  right     f        0.670\n 4     3 ZZ    none  right     j        0.574\n 5     4 ZZ    left  left      j        0.841\n 6     5 ZZ    none  right     j        0.668\n 7     6 ZZ    none  left      j        1.12 \n 8     7 ZZ    left  left      f        0.640\n 9     8 ZZ    left  right     f        1.13 \n10     9 ZZ    none  right     j        1.03 \n# … with 150 more rows"
  },
  {
    "objectID": "pages/chapters/importing_data.html#neue-variablen-definieren",
    "href": "pages/chapters/importing_data.html#neue-variablen-definieren",
    "title": "Daten importieren: Teil 1",
    "section": "Neue Variablen definieren",
    "text": "Neue Variablen definieren\nNun wollen wir zwei neue Variablen erstellen: eine “character” Variable, die uns sagt, ob “rechts” oder “links” entschieden wurde, und eine numerische Variable mit derselben Information. Je nachdem, ob wir die Daten grafisch darstellen oder analysieren wollen, brauchen wir beide Variablen.\n\ntestdata <- testdata |>\n    mutate(choice = if_else(response == \"j\", \"right\", \"left\"),\n           response = if_else(choice == \"right\", 1, 0))\n\nFolgender Code löst das gleiche Problem mit der Funktion as.numeric(). Fragen Sie ruhig ChatGPT, falls Sie den Code nicht verstehen.\n\ntestdata <- testdata |>\n    mutate(choice = if_else(response == \"j\", \"right\", \"left\"),\n           response = as.numeric(choice == \"right\"))\n\nWir erstellen ausserdem hier eine Variable, welche angibt, ob der Cue valid, invalid oder neutral war. Ein Cue ist genau dann valide, wenn er dieselbe Richtung hat wie der Random Dot Stimulus, d.h. wenn cue == direction.\n\ntestdata <- testdata |>\n    mutate(condition = case_when(cue == \"none\" ~ \"neutral\",\n                                 cue == direction ~ \"valid\",\n                                 cue != direction ~ \"invalid\"))\n\n\n\n\n\n\n\nChatGPT\n\n\n\nWhat does the R function case_when() do?\n\n\nZum Schluss erstellen wir noch eine Variable, welche festhält, ob die Antwort der Versuchsperson korrekt war.\n\ntestdata <- testdata |>\n    mutate(correct = as.numeric(choice == direction))"
  },
  {
    "objectID": "pages/chapters/importing_data.html#gruppierungsvariablen",
    "href": "pages/chapters/importing_data.html#gruppierungsvariablen",
    "title": "Daten importieren: Teil 1",
    "section": "Gruppierungsvariablen",
    "text": "Gruppierungsvariablen\n\nglimpse(testdata)\n\nRows: 160\nColumns: 9\n$ trial     <dbl> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17…\n$ ID        <chr> \"ZZ\", \"ZZ\", \"ZZ\", \"ZZ\", \"ZZ\", \"ZZ\", \"ZZ\", \"ZZ\", \"ZZ\", \"ZZ\", …\n$ cue       <chr> \"right\", \"right\", \"none\", \"none\", \"left\", \"none\", \"none\", \"l…\n$ direction <chr> \"right\", \"right\", \"right\", \"right\", \"left\", \"right\", \"left\",…\n$ response  <dbl> 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, …\n$ rt        <dbl> 0.7136441, 0.6271285, 0.6703410, 0.5738488, 0.8405913, 0.667…\n$ choice    <chr> \"right\", \"right\", \"left\", \"right\", \"right\", \"right\", \"right\"…\n$ condition <chr> \"valid\", \"valid\", \"neutral\", \"neutral\", \"valid\", \"neutral\", …\n$ correct   <dbl> 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n\n\n\ntestdata <- testdata |>\n    mutate_if(is.character, as.factor)\n\n\nglimpse(testdata)\n\nRows: 160\nColumns: 9\n$ trial     <dbl> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17…\n$ ID        <fct> ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, …\n$ cue       <fct> right, right, none, none, left, none, none, left, left, none…\n$ direction <fct> right, right, right, right, left, right, left, left, right, …\n$ response  <dbl> 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, …\n$ rt        <dbl> 0.7136441, 0.6271285, 0.6703410, 0.5738488, 0.8405913, 0.667…\n$ choice    <fct> right, right, left, right, right, right, right, left, left, …\n$ condition <fct> valid, valid, neutral, neutral, valid, neutral, neutral, val…\n$ correct   <dbl> 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …"
  },
  {
    "objectID": "pages/chapters/importing_data.html#accuracy-pro-bedingung",
    "href": "pages/chapters/importing_data.html#accuracy-pro-bedingung",
    "title": "Daten importieren: Teil 1",
    "section": "Accuracy pro Bedingung",
    "text": "Accuracy pro Bedingung\nWir können nun die accuracy in jeder Cue-Bedingung berechnen. Es gibt hier zwei Möglichkeiten: wir berechen die Anzahl Trials (N), und die Anzahl korrekter Antworten (ncorrect) separat. Der Anteil korrekter Antworten ist dann einfach ncorrect/N. Dasselbe Ergebnis erhalten wir, wenn wir einfach den Mittelwert der korrekten Antworten nehmen.\n\ntestaccuracy <- testdata |>\n    group_by(condition) |>\n    summarise(N = n(),\n              ncorrect = sum(correct),\n              accuracy = ncorrect/N,\n              accuracy2 = mean(correct))\n\ntestaccuracy\n\n# A tibble: 3 × 5\n  condition     N ncorrect accuracy accuracy2\n  <fct>     <int>    <dbl>    <dbl>     <dbl>\n1 invalid      16       13    0.812     0.812\n2 neutral      80       66    0.825     0.825\n3 valid        64       60    0.938     0.938"
  },
  {
    "objectID": "pages/chapters/psychopy_experiments.html",
    "href": "pages/chapters/psychopy_experiments.html",
    "title": "Verhaltensexperiment mit PsychoPy",
    "section": "",
    "text": "Neurowissenschaftliche Experimente müssen exakt auf die Fragestellung zugeschnitten werden um aussagekräftige Daten zu liefern. Deshalb programmieren die meisten Forschenden ihre Experimentalparadigmen selbst. So können beispielsweise Instruktionen oder verwendete Stimuli, deren Grösse und Anzeigedauer präzise definiert werden. In dieser Sitzung erstellen wir mit PsychoPy ein perzeptuelles Entscheidungsexperiment, ähnlich dem Experiment aus Mulder et al. (2012). Dieses neurowissenschaftliche Experiment untersucht den Einfluss von Vorwissen auf Entscheidungsverhalten von Menschen sowie die dazugehörigen neuronalen Korrelate."
  },
  {
    "objectID": "pages/chapters/psychopy_experiments.html#ablauf",
    "href": "pages/chapters/psychopy_experiments.html#ablauf",
    "title": "Verhaltensexperiment mit PsychoPy",
    "section": "Ablauf",
    "text": "Ablauf\nDas Experiment besteht aus der Instruktion, mehreren Versuchsblöcken und der Nachbesprechung. Die Anweisungen und die Nachbesprechung sind Textanzeigen, während die Versuche (und die Versuchsblöcke) etwas komplizierter sind."
  },
  {
    "objectID": "pages/chapters/psychopy_experiments.html#trial",
    "href": "pages/chapters/psychopy_experiments.html#trial",
    "title": "Verhaltensexperiment mit PsychoPy",
    "section": "Trial",
    "text": "Trial\nZunächst wird ein Fixationskreuz entweder für 100 ms, 350 ms, 800 ms oder 1200 ms angezeigt. Die tatsächliche Dauer wird für jeden Versuch randomisiert. Eine solche Randomisierung kann nicht über die Benutzeroberfläche vorgenommen werden, sondern erfordert ein kleines Stück Python-Code. Sehen Sie sich den Codeblock der Routine Fixation_pre_cue an, um zu erfahren, wie dies erreicht werden kann.\n\nDas Experiment wurde im Scanner und ausserhalb durchgeführt. Die beiden Version unterscheiden sich ganz stark in ihrem Timing. Wir implementieren hier die Scanner Version des Tasks.\n\nAnschließend wird für 1000 ms ein Hinweis (cue) präsentiert. Dabei kann es sich entweder um einen Pfeil handeln, der nach rechts zeigt, einen Pfeil, der nach links zeigt, oder einen einfachen Kreis (für die Kontrollbedingung). Der Codeblock in der Cue-Routine legt den tatsächlichen Hinweis für jeden Versuch auf der Grundlage der Schleifenvariablen cue fest.\nNach dem Cue wird ein weiteres Fixationskreuz präsentiert - dieses Mal für entweder 3400 ms, 4000 ms, 4500 ms oder 5000 ms. Wie beim ersten Fixationskreuz wird die tatsächliche Dauer zufällig gewählt.\nNach dem zweiten Fixationskreuz wird für 1500 ms der eigentliche Stimulus angezeigt: ein random dot kinematogram (RDK). Die Punkte bewegen sich entweder nach rechts oder nach links mit einem Kohärenzniveau von 8%. Die Bewegungsrichtung eines einzelnen Versuchs wird durch die Schleifenvariable direction bestimmt und im Codeblock der Routine Dots festgelegt. Die Teilnehmer müssen entscheiden, welche Richtung sie wahrnehmen, und können ihre Antwort durch Drücken der linken oder rechten Pfeiltaste auf der Tastatur eingeben.\nSchließlich wird ein Feedback-Bildschirm angezeigt. Wenn der Teilnehmer innerhalb der ersten 100 ms geantwortet hat, wird der Hinweis “zu schnell” angezeigt. Wurde während des gesamten Stimulus keine Antwort erfasst, wird das Wort “miss” angezeigt. War die Antwort richtig, wird “+5 Punkte” angezeigt, war sie falsch, wird “+0 Punkte” angezeigt."
  },
  {
    "objectID": "pages/chapters/psychopy_experiments.html#experimentalschleife-main_blocks_loop",
    "href": "pages/chapters/psychopy_experiments.html#experimentalschleife-main_blocks_loop",
    "title": "Verhaltensexperiment mit PsychoPy",
    "section": "Experimentalschleife: main_blocks_loop",
    "text": "Experimentalschleife: main_blocks_loop\nMit loops in PsychoPy haben wir die Möglichkeit, eine oder mehrere Routinen zu wiederholen. In diesem Experiment wird dies genutzt, um denselben Versuch (wie oben beschrieben) mehrfach zu zeigen, aber jedes Mal mit anderen Werten für die loop variables. Eine Schleife wiederholt also einen Versuch einige Male, wobei die Schleifenvariablen bei jeder Wiederholung geändert werden. Der Versuch selbst wiederum liest diese Schleifenvariablen aus, um z.B. zu wissen, ob sich die Punkte nach rechts oder nach links bewegen sollen. Hier wird nur die main_blocks_loop erklärt, aber das Prinzip gilt auch für die practice_block_loop.\nUm die verschiedenen Werte für die Schleifenvariablen zu definieren, müssen wir eine einfache CSV-Datei erstellen:\ncue,direction\nleft,right\nleft,left\nnone,right\n...\nDiese CSV-Datei (die Bedingungsdatei) definiert die beiden loop Variablen cue und direction. Das Stichwort kann entweder left, right oder none, sein, während die Richtung left oder right sein kann.\nIn der Benutzeroberfläche können wir die Variablen loopType und nReps für die Schleife angeben, wenn wir sie anklicken. Mit ersterer können wir steuern, ob wir z.B. die Zeilen in der Bedingungsdatei mischen oder sie sequentiell von oben nach unten ablaufen lassen wollen, während die letztere definiert, wie oft jede Zeile der Bedingungsdatei wiederholt werden soll.\nFür die main_blocks_loop haben wir eine Bedingungsdatei mit 80 Zeilen, die 40 neutralen Versuchen und 40 verzerrten Versuchen entsprechen. In der einen Hälfte der neutralen Trials bewegen sich die Punkte nach rechts, in der anderen Hälfte nach links. Bei den voreingenommenen Versuchen sind 32 der Hinweise gültig (d. h. sie stimmen mit der Bewegungsrichtung der Punkte überein) und 16 ungültig, wobei sich die Punkte sowohl bei gültigen als auch bei ungültigen Hinweisen in 50 % der Versuche nach rechts und in den anderen 50 % der Versuche nach links bewegen.\nDie Variable nReps wird auf 2 gesetzt, so dass alle diese Reihen zweimal durchlaufen werden (insgesamt 160 Versuche), und die Variable “loopType” wird auf random gesetzt, so dass die Versuche in zufälliger Reihenfolge durchgeführt werden."
  },
  {
    "objectID": "pages/chapters/psychopy_experiments.html#daten",
    "href": "pages/chapters/psychopy_experiments.html#daten",
    "title": "Verhaltensexperiment mit PsychoPy",
    "section": "Daten",
    "text": "Daten\nWenn man die default-Einstellungen nicht ändert, speichert PsychoPy die Daten automatisch in einem trial-by-trial CSV File. Das bedeutet, dass jeder Trial 1 Zeile generiert. Das CSV File erhält einen Namen, der sich aus der Versuchspersonen-ID, dem Namen des Experiments, und dem aktuellen Datum inkl. Uhrzeit zusammensetzt. So ist es möglich, mit derselben Versuchspersonen-ID beliebig oft das Experiment zu wiederholen. Die CSV Files werden in einem Ordner mit dem Name data abgelegt.\n\nBei der Wahl vom Datenfile-Namen empfiehlt es sich immer Datum und Uhrzeit anzuhängen. Dies verhindert, dass Daten überschrieben werden, wenn z.B. eine Versuchspersonen-ID falsch eingetippt oder doppelt vergeben wird."
  },
  {
    "objectID": "pages/chapters/psychopy_experiments.html#degrees-of-visual-angle",
    "href": "pages/chapters/psychopy_experiments.html#degrees-of-visual-angle",
    "title": "Verhaltensexperiment mit PsychoPy",
    "section": "Degrees of Visual Angle",
    "text": "Degrees of Visual Angle\nOftmals werden Grössenangaben von Stimuli noch in Pixel oder Zentimeter, sondern in degrees of visual angle gemacht. Dies hat den Vorteil, dass die Angaben nicht vom Monitor selber oder der Entferung vom Monitor abhängig sind. Degrees of visual angle gibt die wahrgenommene Grösse des Stimulus an, und berücksichtigt die Grösse des Monitors und des Stimulus, und die Entfernung der Versuchsperson vom Monitor. Weitere Informationen dazu finden Sie auf der Website von 👉 OpenSesame. Üblicherweise entspricht ein degrees of visual angle etwa einem cm bei einer Entfernung von 57 cm vom Monitor.\nZur Umrechnung zwischen cm und degrees of visual angle finden Sie unter diesem 👉 Link mehr Information.\n\nOpenSesame ist ein weiteres, Python-basierendes Programm für die Erstellung behavioraler Experimente."
  },
  {
    "objectID": "pages/chapters/reproducibility.html",
    "href": "pages/chapters/reproducibility.html",
    "title": "Reproducibility",
    "section": "",
    "text": "Die Replikationskrise hat in der Psychologie, aber auch in den kognitiven Neurowissenschaften ein Umdenken ausgelöst. Reproduzierbarkeit und Replizierbarkeit sind zu wichtigen Konzepten für nachhaltige Forschung geworden. Die Begriffe werden verwirrenderweise aber oft unterschiedlich definiert (Plesser (2018)).\n\nReplizierbarkeit\nReplizierbarkeit (replicability) bedeutet, dass ein Experiment von einer anderen Forschungsgruppe mit einer neuen Stichprobe durchgeführt werden kann, und ähnliche oder dieselben Resultate hervorbringt, wie die Originalstudie. Wird eine Studie mehrmals repliziert, steigt die Wahrscheinlichkeit, dass kein Zufallsbefund vorliegt.\n\nReplicability refers to the ability of a researcher to duplicate the results of a prior study if the same procedures are followed but new data are collected. Cacioppo et al. (2015)\n\n\n\nReproduzierbarkeit\nReproduzierbarkeit (reproducibility) hängt eng mit der Replizierbarkeit zusammen, ist aber nicht dasselbe. Der Begriff wird teilweise sehr allgemein verwendet, und bedeutet so dass Forschungsergebnisse wiederholt gefunden werden auch von anderen Forschenden mit neuen Stichproben.\nReproduzierbarkeit im engeren Sinn hingegen bezieht sich darauf, ob die durchgeführte Analyse wiederholt werden kann. Die Reproduzierbarkeit ist somit hoch, wenn Forschende die Daten und Datenanalyseskripts bereitstellen und andere Forschende damit dieselben Analysen durchführen können und zu gleichen Resultaten kommen.\n\nReproducibility refers to the ability of a researcher to duplicate the results of a prior study using the same materials as were used by the original investigator. That is, a second researcher might use the same raw data to build the same analysis files and implement the same statistical analysis in an attempt to yield the same results…. Reproducibility is a minimum necessary condition for a finding to be believable and informative. Cacioppo et al. (2015)\n\nUm die Begriffe zusammenzufassen schlugen Goodman, Fanelli, and Ionnidis (2016) vor von Reproduzierbarkeit der Methoden (Daten und Prozesse können exakt wiederholt werden), Reproduzierbarkeit der Resultate (andere Studien kommen auf dieselben Resultate) und Reproduzierbarkeit der wissenschaftlichen Schlussfolgerung (bei Repetition der Analyse oder der Experimente werden dieselben Schlüsse gezogen) zu sprechens.\nGrundsätzlich besteht das Ziel, dass in der Forschung möglichst viel Evidenz für eine Schlussfolgerung gesammelt werden kann. Dies gelingt, wenn die Prozesse transparent, fehlerfrei und wiederholbar sind.\n\n\nHindernisse bei der Reproduzierbarkeit\nReproduzierbarkeit kann laut Nosek et al. (2022) vor allem aus zwei Gründen nicht gegeben sein: Weil die Daten/Skripte nicht zur Verfügung stehen, oder weil diese Fehler enthalten:\n\nIn principle, all reported evidence should be reproducible. If someone applies the same analysis to the same data, the same result should occur. Reproducibility tests can fail for two reasons. A process reproducibility failure occurs when the original analysis cannot be repeated because of the unavailability of data, code, information needed to recreate the code, or necessary software or tools. An outcome reproducibility failure occurs when the reanalysis obtains a different result than the one reported originally. This can occur because of an error in either the original or the reproduction study.\n\nFührt die Reproduktion nicht zum selben Resultat, löst das Zweifel am Forschungsergebnis aus. Wenn die Reproduzierbarkeit am Prozess scheitert, etwa weil die Daten nicht vorhanden sind, kann kein Schluss gezogen werden, ob die Resultate stimmen.\n\nAchieving reproducibility is a basic foundation of credibility, and yet many efforts to test reproducibility reveal success rates below 100%. … Whereas an outcome reproducibility failure suggests that the original result may be wrong, a process reproducibility failure merely indicates that the original result cannot be verified. Either reason challenges credibility and increases uncertainty about the value of investing additional resources to replicate or extend the findings (Nuijten et al. 2018). Sharing data and code reduces process reproducibility failures (Kidwell et al. 2016), which can reveal more outcome reproducibility failures (Hardwicke et al. 2018, 2021; Wicherts et al. 2011). Nosek et al. (2022)\n\nDas Teilen von Daten und Datenverarbeitungsskripten erhöht die Wahrscheinlichkeit, dass mögliche Fehler im Prozess gefunden werden, da auch andere Forschende die Daten/Skripts verwenden können. Das ist vorerst unangenehm, gehört aber zum Prozess der Wissenschaft dazu. Reproduzierbarkeit erhöht also indirekt auch die Replizierbarkeit.\n\n\nTools für Reproduzierbarkeit\nFür reproduzierbare Forschung gibt es inzwischen viele gute Tools:\n\nWebsite der Open Science Foundation: Eine kostenfreie und unkomplizierte Möglichkeit Daten und Skripts zu teilen, und diese in Projekten abzulegen. Es lässt sich dafür sogar ein doi erstellen. Auch Preregistrationsformulare sind hier implementiert.\n\nBeim Veröffentlichen von wissenschaftlichen Artikeln ist es empfohlen, die Daten (falls anonymisiert möglich) sowie die Analyseskripts mitzuveröffentlichen.\n\nFür Datensätze gelten die FAIR Guiding Principles (Wilkinson et al. (2016)):\n\nF indability: Es ist klar unter welchen Umständen und wie die Daten zugänglich sind\nA ccessibility: Daten sind zugänglich bzw. es ist klar wo sie zu finden wären\nI nteroperability: Verwendbare Datenformate/strukturen\nR eusability: gute Beschreibung des Datensatzes/der enthaltenen Variablen\n\n\n\nHier finden Sie weitere Informationen zu FAIR.\n\n\nFür Neuroimaging-Daten gibt es beispielsweise vorgegebene Konventionen, wie ein Datensatz und die Verarbeitungsskripts abgespeichert werden. Ein Beispiel dafür ist Brain Imaging Data Structure (BIDS). So können Datensätze mit einer für alle verständlichen Struktur veröffentlicht und geteilt werden.\n\n\nHier finden Sie weitere Informationen zu BIDS.\n\n\nFür das Veröffentlichen von Analyseskripts eignen sich Formate wie RMarkdown in R, oder LiveScripts in MATLAB sehr gut. Aber auch .r-Skripte, wie Sie sie in dieser Veranstaltung verwenden können veröffentlicht werden.\n\n\nHier finden Sie eine sehr gut erklärte Einführung zu RMarkdown.\n\n\n\nCode kommentieren\nDas Teilen von Skripts macht am meisten Sinn, wenn sie verständlich strukturiert und kommentiert sind. Beim Kommentieren von Code sollte folgendes beachtet werden:\n\nKommentare sollten geschrieben werden, wenn der Code erstellt wird und laufend überarbeitet werden. Oft wird es sonst nicht nachgeholt.\nWenn man nicht genau kommentieren kann, was man im Code macht, dann ist evtl. der Code unklar, oder man versteht ihn noch nicht. Vielleicht kann man Variablennamen vereinfachen/präzisieren und es braucht weniger Kommentare?\nWenn Code kopiert wird, sollte die Quelle angegeben werden.\nVor dem Veröffentlichen, lohnt es sich jemanden den Code ausführen lassen. So zeigt sich wo noch unklare Stellen sind, die Kommentare benötigen.\n\n\n\n\n\n\nReferences\n\nCacioppo, J. T., R. M. Kaplan, J. A. Krosnick, J. L. Olds, and H. Dean. 2015. “Social, Behavioral, and Economic Sciences Perspectives on Robust and Reliable Science.” Report of the Subcommittee on Replicability in Science Advisory Committee to the National Science Foundation Directorate for Social, Behavioral, and Economic Sciences.\n\n\nGoodman, Steven N., Daniele Fanelli, and John P. A. Ionnidis. 2016. “What Does Research Reproducibility Mean?” Science Translational Medicine 341. https://doi.org/10.1126/scitranslmed.aaf5027.\n\n\nNosek, Brian A, Tom E Hardwicke, Hannah Moshontz, Aurélien Allard, Katherine S Corker, Anna Dreber, Fiona Fidler, et al. 2022. “Replicability, Robustness, and Reproducibility in Psychological Science.” Annual Review of Psychology 73: 719–48. https://doi.org/10.1146/annurev-psych-020821-114157.\n\n\nPlesser, Hans E. 2018. “Reproducibility Vs. Replicability: A Brief History of a Confused Terminology.” Frontiers in Neuroinformatics 11 (January): 76. https://doi.org/10.3389/fninf.2017.00076.\n\n\nWilkinson, Mark D., Michel Dumontier, IJsbrand Jan Aalbersberg, Gabrielle Appleton, Myles Axton, Arie Baak, Niklas Blomberg, et al. 2016. “The FAIR Guiding Principles for Scientific Data Management and Stewardship.” Scientific Data 3 (1): 160018. https://doi.org/10.1038/sdata.2016.18.\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{ellis2023,\n  author = {Andrew Ellis and Gerda Wyssen},\n  title = {Reproducibility},\n  date = {2023-03-20},\n  url = {https://kogpsy.github.io/neuroscicomplabFS23//reproducibility.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nAndrew Ellis, and Gerda Wyssen. 2023. “Reproducibility.”\nMarch 20, 2023. https://kogpsy.github.io/neuroscicomplabFS23//reproducibility.html."
  },
  {
    "objectID": "pages/chapters/rmarkdown.html",
    "href": "pages/chapters/rmarkdown.html",
    "title": "R Markdown",
    "section": "",
    "text": "Lernziele\n\n\n\n\n\nErstellen eines (reproduzierbaren) Data Reports mit Datenvisualisierungen zu unserem Experiment.\nIn der heutigen Sitzung lernen wir die Basics, die man braucht um einen Data Report in R Markdown erstellen zu können.\n\nR Markdown File erstellen\nR Markdown File ausführen (knitten)\nTitel und Layout anpassen\nText schreiben in R Markdown\nCode verwenden in R Markdown"
  },
  {
    "objectID": "pages/chapters/rmarkdown.html#r-markdown-file-erstellen-und-ausführen",
    "href": "pages/chapters/rmarkdown.html#r-markdown-file-erstellen-und-ausführen",
    "title": "R Markdown",
    "section": "R Markdown File erstellen und ausführen",
    "text": "R Markdown File erstellen und ausführen\nZuerst erstellen wir ein R Markdown File und schauen uns die wichtigsten Funktionen an. Wir wählen als Outputformat html.\n\n\n\n\n\n\nHands-on\n\n\n\n\nLaden Sie hier den Projektordner herunter und entzippen Sie diesen.\nÖffnen Sie das Projekt und erstellen Sie unter File > New File > R Markdown ... ein neues RMarkdown-File.\nGeben Sie einen Titel und Ihren Namen ein und wählen Sie HTMLals Output-Format\nSpeichern Sie dass Dokument unter dem Namen rmarkdown_exampleab.\n\n\n\n\nWeiterführende Informationen:\n👉 Einführung in die Verwendung von R/RStudio/Notebooks im Rahmen des Psychologie Studiums von Andrew Ellis und Boris Mayer Einführung in R\n👉 Sehr kompakte, praxisnahe Einführung in R Markdown von Danielle Navarro (Slidedeck in englisch) Einführung in R Markdown\n\nWenn Sie die obigen Schritte ausgeführt haben, beantworten Sie bitte folgende Fragen:\n\n\n\n\n\n\nAufgabe 1\n\n\n\nWelches Format (Endung) hat das abgespeicherte R Markdown Skript nun in Ihrem Ordner?\n\n\n\n\n\n\n\n\nLösung 1\n\n\n\n\n\n.Rmd für R Markdown"
  },
  {
    "objectID": "pages/chapters/rmarkdown.html#knitten",
    "href": "pages/chapters/rmarkdown.html#knitten",
    "title": "R Markdown",
    "section": "Knitten",
    "text": "Knitten\nMit Knit führen wir das R Markdown Skript nun aus und erstellen so (wie vorher ausgewählt) ein html-File.\n\n\n\n\n\n\nAufgabe 2\n\n\n\nFühren Sie das File mit Knit aus und vergleichen Sie das R Markdown Skript mit dem Output den Sie erhalten haben. Was fällt Ihnen auf?\n\nWas ist nicht mehr zu sehen?\nWas ist zusätzlich zu sehen?\nWas hat sich im Projekt-Ordner verändert?\n\n\n\n\n\n\n\n\n\nLösung 2\n\n\n\n\n\nNicht mehr zu sehen ist der vollständige YAML-header, ganz oben im R Markdown Skript.\nAuch nicht mehr zu sehen ist die “Umrandung” des Code-Snippets.\nNeu sieht man nun den Output des Codes.\nIm Projektordner wurde ein .html-File erstellt. Sie können dieses öffnen, um zu schauen wie das aussieht."
  },
  {
    "objectID": "pages/chapters/rmarkdown.html#yaml-header",
    "href": "pages/chapters/rmarkdown.html#yaml-header",
    "title": "R Markdown",
    "section": "YAML header",
    "text": "YAML header\nZu Beginn des R Markdown Skripts finden Sie den YAML header. Hier werden Informationen zu Titel, Autor:Innen, Datum, Outputformat, Literaturverzeichnis und Layout festgelegt.\n\nYAML: Yet Another Markdown Language\n\nDas Layout kann unter themegeändert werden. Das kann beispielsweise wie folgt aussehen:\noutput:\n  html_document:\n    theme: cosmo\nAchtung: Einrückungen müssen stimmen! Hier wurde das theme namens cosmo ausgewählt. Mögliche andere themessind z.B. default, cerulean, journal, flatly, darkly, readable, spacelab, united, cosmo, lumen, paper, sandstone, simplex, yeti.\n\n\n\n\n\n\nHands-on\n\n\n\n\nGeben Sie dem Dokument einen neuen Titel z.B. R Markdown Einführung\nÄndern Sie das Layout so, dass es Ihnen gefällt."
  },
  {
    "objectID": "pages/chapters/rmarkdown.html#text-erstellen-in-r-markdown",
    "href": "pages/chapters/rmarkdown.html#text-erstellen-in-r-markdown",
    "title": "R Markdown",
    "section": "Text erstellen in R Markdown",
    "text": "Text erstellen in R Markdown\nText kann in R Markdown Files nicht nur geschrieben, sondern auch relativ simpel formatiert werden.\n👉 Hier können Sie das Cheatsheet herunterladen. Auf der rechten Seite finden Sie die Informationen für die Textformatierung.\nKnitten Sie das Skript immer wieder um zu überprüfen, ob alles passt. Es empfiehlt sich anfangs häufig zu knitten, so findet man den Fehler schneller, weil man noch weiss, was man verändert hat.\n\n\n\n\n\n\nHands-on\n\n\n\n\nLöschen Sie alles bis auf den YAML-Header\nSchreiben Sie im Textbereich eine Überschrift für ein Kapitel, ein Unterkapitel und normalen Text.\nSchreiben Sie im Text etwas kursiv und etwas fett.\nErstellen Sie im Textbereich eine Liste mit 3 Punkten.\nFügen Sie die Formel a^2 + b^2 = c^2 in den Text ein. Verwenden Sie dafür zwei Dollarzeichen am Anfang und am Ende. Was passiert? Schreiben Sie alpha innerhalb von Dollarzeichen, was passiert?\nFügen Sie einen Link ein, knitten Sie das File und schauen Sie ob der Link funktioniert. Können Sie einen Link nur mit einem unterstrichenen Text anzeigen, so dass die Linkadresse nicht sichtbar ist?\nFügen Sie ein Bild ein. Sie können beispielsweise das Bild logo_landing.png aus dem Projektordner nutzen oder ein eigenes verwenden."
  },
  {
    "objectID": "pages/chapters/rmarkdown.html#code-erstellen-in-r-markdown",
    "href": "pages/chapters/rmarkdown.html#code-erstellen-in-r-markdown",
    "title": "R Markdown",
    "section": "Code erstellen in R Markdown",
    "text": "Code erstellen in R Markdown\nNun erstellen wir Code. Zuerst fügen wir ein Code-Chunk ein, darin muss der Code stehen um ausgeführt zu werden. Dies können Sie unter Code > Insert Chunk tun oder Ctrl+Alt+ I drücken. Code-Chunks werden mit ``` begonnen und beendet. In den geschweiften Klammern steht r, das bedeutet das der Code in der Sprache R geschrieben ist. In dieser Klammer können wir dem Code-Chunk einen Namen geben und bestimmen, ob der Code ausgeführt und angezeigt wird, und ob der Output des Codes angezeigt werden soll.\nSie können mit dem grünen Pfeil den Code-Chunk ausführen. Aber auch einzelne Zeilen können ausgeführt werden, genau so wie in einem .R- Skript.\n\n\n\n\n\n\nHands-on\n\n\n\n\nErstellen Sie einen Code-Chunk, der ausgeführt, aber nicht angezeigt wird. Erstellen Sie eine Variable mit dem Namen numbers, die 10 Zahlen enthält.\nErstellen Sie ein Code-Chunk, der ausgeführt wird und dessen Output angezeigt wird. Berechnen Sie in diesem Chunk den Mittelwert und die Standardabweichung von numbers.\n\n👉 Schauen Sie dafür nochmals im Cheatsheet nach oder drücken Sie auf das Zahnrädchen-Symbol beim Code-Chunk.\n\nErstellen Sie einen Plot mit plot(numbers).\nKnitten Sie das File, um zu überprüfen, ob alles funktioniert"
  },
  {
    "objectID": "pages/chapters/software.html",
    "href": "pages/chapters/software.html",
    "title": "Programmiersprachen",
    "section": "",
    "text": "In diesem Kurs beschäftigen wir uns im weiteren Sinne mit dem Einsatz vom Computern im Bereich Cognitive Neuroscience. Es ist nicht Ziel dieses Kurses, EEG oder fMRI Daten zu analysieren (dafür gibt es eigene Kurse); wir werden uns stattdessen mit Daten aus Verhaltensexperimenten beschäftigen. Dies sind zum Beispiel binäre Antworten oder Reaktionszeiten, welche wir mit entsprechenden Modellen untersuchen werden. Unsere Anwendungsbeispiele werden immer aus der neurowissenschaftlichen Forschung stammen; der Fokus wird aber vor allem der Umgang mit Computern sein. Unser Ziel ist es, dass Sie nach dem Abschluss dieses Kurses eine neurowissenschaftliches Paper lesen können, und die darin verwendeten Experimente nachvollziehen können. Sie könnten eventuell sogar das Experiment selber programmieren, und die Daten analysieren."
  },
  {
    "objectID": "pages/chapters/software.html#programmiersprachen",
    "href": "pages/chapters/software.html#programmiersprachen",
    "title": "Programmiersprachen",
    "section": "Programmiersprachen",
    "text": "Programmiersprachen\nProgrammiersprachen sind essentielle Werkzeuge für die Neurowissenschaftliche Forschung. Wir werden uns zuerst einen kurzen Überblick über drei häufig verwendete Programmiersprachen (Matlab, Python und R) verschaffen und kurz deren Verwendungszwecke und Vor- und Nachteile diskutieren.\n\nMatlab\nMatlab ist ein Software für numerische Anwendung, welche in den Ingenieurwissenschaften, Naturwissenschaften und der Mathematik weit verbreitet ist.\n\n👍🏼 Stärken:\n\nLeistungsstarke Matrix- und Vektoroperationen, gut geeignet für Matrix-basierte Operationen, die in der Neurowissenschaftlichen Forschung häufig vorkommen.\nUmfangreiche Bibliothek von integrierten Funktionen für wissenschaftliches Rechnen.\n\n\n\n👎🏼 Schwächen:\n\nTeuer\nWeniger flexibel als Python oder R in Bezug auf Datenarten und Strukturen.\nMatlab is kommerziell und proprietär. Dies bedeutet man muss teuere Lizenzen kaufen, und der Source Code der Software ist nicht offen.\n\n\n\nTypische Anwendung:\n\nDatenverarbeitung und -analyse,\nSignalverarbeitung\nVisualisierung\nViele fMRI Forscher arbeiten mit Matlab, da es dafür eine spezielle Toolbox gibt: SPM\nExperimente programmieren, z.B. mit Psychtoolbox\n\n\n\nBeispielcode:\nload('data.mat')\nfs = 1000;\nt = (0:numel(data)-1)/fs;\nplot(t, data)\n\n\n\nPython\nPython ist eine allgemeine (general purpose) Programmiersprache, die in vielen verschiedenen Bereichen wie wissenschaftlichem Rechnen, Datenanalyse und maschinellem Lernen weit verbreitet ist.\n\n👍🏼 Stärken:\n\nEine Vielzahl von Bibliotheken und Modulen wie NumPy, SciPy und Pandas, die leistungsstarke Werkzeuge für wissenschaftliches Rechnen und Datenanalyse bieten.\nDatenanalysewerkzeuge wie Pandas-Dataframes, die Seaborn-Visualisierungsbibliothek, und Jupyter Notebooks.\nOpen-source und kostenlos\n\n\n\n👎🏼 Schwächen:\n\nKann in einigen numerischen Berechnungen langsamer sein als Matlab.\nDa Python eine allgemeine Sprache ist, muss man für numerische Anwendungen immer verschiedene Packages importieren (z.B.) numpy, wenn man damit rechnen will. Dies führt zu weniger gut lesbarem Code.\n\n\n\nTypische Anwendung:\n\nDatenverarbeitung und -analyse,\nVisualisierung\nMachine learning und Künstliche Intelligenz\nExperimente programmieren, z.B. mit PsychoPy\n\n\n\nBeispielcode:\nimport pandas as pd\nimport seaborn as sns\ndata = pd.read_csv('data.csv')\nsns.lineplot(data=data, x='time', y='voltage')\n\n\n\nR\nR ist eine Programmiersprache und Umgebung für statistisches Rechnen und Grafiken.\n\n👍🏼 Stärken:\n\nEntwickelt von Statistikern für statistisches Rechnen und Grafiken.\nEine große Bibliothek von statistischen Werkzeugen und Paketen, einschliesslich Visualisierungspackages (grammar of graphics).\nOpen-source und kostenlos\ntidyverse Packages für Data Wrangling (sehr elegante Syntax, um mit Daten zu arbeiten).\n\n\n\n👎🏼 Schwächen:\n\nSteilere Lernkurve als Python.\nKann in einigen numerischen Berechnungen langsamer sein als Matlab oder Python.\nEntwickelt von Statistiker (nicht von Software Designers). R gilt als sehr idiosynkratisch.\n\n\n\nTypische Anwendung:\n\nStatistische Analyse\nDatenvisualisierung. R hat eine sehr gute Bibliothek für Grafiken, die ggplot2 Bibliothek. Diese Bibliothek verwendet die sogenannte grammar of graphics (GoG) - eine Methode, um Daten in Grafiken zu visualisieren. Die GoG ist eine sehr elegante und effiziente Methode, um Daten zu visualisieren.\n\n\n\nBeispielcode:\nlibrary(tidyverse)\ndata <- read.csv('data.csv')\nggplot(data, aes(x=time, y=voltage)) + geom_line()\n\n\n\nFazit\nMatlab, Python und R sind leistungsstarke Werkzeuge für die neurowissenschaftliche Forschung. Die Wahl der Sprache hängt unter anderem von der spezifischen Aufgabe ab. Weitere Faktoren ist Tradition: bestimmte Gruppen bevorzugen eher eine Sprache als andere. So ist Matlab unter Ingenieuren weit verbreiten und R unter Statistikern. Python ist im Bereich Künstliche Intelligenz und Machine Learning die beliebteste Sprache. Eine neuere Sprache ist Julia - diese vereint die Vorteile aller oben genannten Sprachen (ohne viele deren Nachteile), ist aber weniger weit verbreitet.\nUm mehr zu erfahren, erkunden Sie die umfangreichen Online-Ressourcen und Dokumentationen für jede Sprache."
  },
  {
    "objectID": "pages/chapters/software.html#in-dieser-veranstaltung-verwendete-software",
    "href": "pages/chapters/software.html#in-dieser-veranstaltung-verwendete-software",
    "title": "Programmiersprachen",
    "section": "In dieser Veranstaltung verwendete Software",
    "text": "In dieser Veranstaltung verwendete Software\nWir haben uns entschieden, in dieser Veranstaltung Python zu verwenden, um ein Experiment zu erstellen, und R für die Analyse der Daten. Matlab wird nicht verwendet; einerseits da es kommerziell ist, andererseits weil es aus unserer Sicht nicht die beste Wahl für die Analyse von Verhaltensdaten ist. Ausserdem ist es schon schwierig genug, eine Programmiersprache zu lernen, ohne gleichzeitig noch zwei weitere zu lernen."
  },
  {
    "objectID": "pages/chapters/software.html#python-1",
    "href": "pages/chapters/software.html#python-1",
    "title": "Programmiersprachen",
    "section": "Python",
    "text": "Python\nWenn Sie Python suf Ihrem Rechner installieren wollen, können Sie entweder den offiziellen Installer https://www.python.org/downloads/ downloaden, oder die Anaconda Distribution https://www.anaconda.com/products/distribution verwenden. Die Anaconda Distribution ist eine Python-Distribution, die viele nützliche Pakete enthält, die für wissenschaftliches Rechnen und Datenanalyse verwendet werden. Wenn man tatsächlich mit Python arbeiten will, empfiehlt es sich, die Anaconda Distribution zu benutzen. Wir werden in dieser Veranstaltung Python benutzen, um ein Experiment zu programmieren. Dafür reicht es aus, den PsychoPy Installer zu verwenden; diesen finden Sie unter diesem Link: PsychoPy. PsychoPy ist ein Python-basiertes Tool, mit dem sich sowohl in einer grafischen Benutzeroberfläche (GUI) als auch mit Python Code Experimente programmieren lassen."
  },
  {
    "objectID": "pages/chapters/software.html#r-1",
    "href": "pages/chapters/software.html#r-1",
    "title": "Programmiersprachen",
    "section": "R",
    "text": "R\nAb der vierten Sitzung werden wir viel mit R arbeiten, um Daten aufzubereiten und grafisch darzustellen. Dafür müssen Sie die aktuelle Version von R installieren. Diese ist zurzeit R 4.2.2, und kann unter folgender URL geladen werden:\nR 👉 https://cloud.r-project.org/\nWir empfehlen für die Arbeit mit R die RStudio IDE zu verwenden. Diese ist kostenlos und kann unter folgender URL heruntergeladen werden:\nRStudio 👉 https://www.rstudio.com/products/rstudio/download/#download"
  },
  {
    "objectID": "pages/chapters/software.html#lernen",
    "href": "pages/chapters/software.html#lernen",
    "title": "Programmiersprachen",
    "section": "Lernen",
    "text": "Lernen\nDataCamp"
  },
  {
    "objectID": "pages/chapters/summarizing-data.html",
    "href": "pages/chapters/summarizing-data.html",
    "title": "Aggregierte Statistiken",
    "section": "",
    "text": "Lernziele\n\n\n\n\n\nIn der heutigen Sitzung lernen wir:\n\nZusammenfassende Statistiken berechnen.\nIn within-subject Designs aggregierte Statistiken berechnen.\nStandardfehler berechnen, welche Messwiederholungen berücksichtigen.\nWir haben in den vorherigen Kapiteln gesehen, wie wir Daten aus Verhaltensexperimenten in R einlesen und bearbeiten können. In diesem Kapitel werden wir uns mit der Frage beschäftigen, wie wir zusammenfassende Statistiken erstellen können, um diese grafisch darzustellen und zu interpretieren. Da wir uns in den Neurowissenschaften meist mit within-subject Designs beschäftigen, werden wir uns in diesem Kapitel auf Messwiederholungsdaten konzentrieren."
  },
  {
    "objectID": "pages/chapters/summarizing-data.html#individuell-für-jede-person-in-jeder-bedingung",
    "href": "pages/chapters/summarizing-data.html#individuell-für-jede-person-in-jeder-bedingung",
    "title": "Aggregierte Statistiken",
    "section": "Individuell für jede Person in jeder Bedingung",
    "text": "Individuell für jede Person in jeder Bedingung\n\naccuracy_individual <- data |>\n    group_by(ID, condition) |>\n    summarise(\n        N = n(),\n        ncorrect = sum(correct),\n        accuracy = mean(correct)\n    )\n\n`summarise()` has grouped output by 'ID'. You can override using the `.groups`\nargument.\n\naccuracy_individual\n\n# A tibble: 27 × 5\n# Groups:   ID [9]\n   ID    condition     N ncorrect accuracy\n   <fct> <fct>     <int>    <dbl>    <dbl>\n 1 JH    valid        64       60    0.938\n 2 JH    neutral      80       66    0.825\n 3 JH    invalid      16       13    0.812\n 4 NS    valid        64       58    0.906\n 5 NS    neutral      80       56    0.7  \n 6 NS    invalid      16       11    0.688\n 7 rh    valid        64       61    0.953\n 8 rh    neutral      80       64    0.8  \n 9 rh    invalid      16        2    0.125\n10 sb    valid        64       62    0.969\n# … with 17 more rows\n\n\n\naccuracy_individual |> \n  ggplot(aes(x = condition, y = accuracy, fill = condition)) +\n  geom_col() +\n  geom_line(aes(group = ID), linewidth = 2) +\n  geom_point(size = 4) +\n  scale_fill_manual(values = c(invalid = \"#9E0142\",\n                    neutral = \"#C4C4B7\",\n                    valid = \"#2EC762\")) +\n  labs(x = \"Cue\",\n      y = \"Proportion correct\",\n      title = \"Accuracy per person/condition\") +\n  facet_wrap(~ID) +\n  theme_linedraw(base_size = 14) +\n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "pages/chapters/summarizing-data.html#pro-bedingung-über-alle-personen-aggregiert",
    "href": "pages/chapters/summarizing-data.html#pro-bedingung-über-alle-personen-aggregiert",
    "title": "Aggregierte Statistiken",
    "section": "Pro Bedingung, über alle Personen aggregiert",
    "text": "Pro Bedingung, über alle Personen aggregiert\n\naccuracy_aggregated <- data |>\n    group_by(condition) |>\n    summarise(N = n(),\n              ncorrect = sum(correct),\n              accuracy = mean(correct))\n\naccuracy_aggregated\n\n# A tibble: 3 × 4\n  condition     N ncorrect accuracy\n  <fct>     <int>    <dbl>    <dbl>\n1 valid       576      475    0.825\n2 neutral     720      453    0.629\n3 invalid     144       56    0.389\n\n\n\naccuracy_aggregated |> \n  ggplot(aes(x = condition, y = accuracy, fill = condition)) +\n  geom_col() +\n  geom_line(aes(group = 1), linewidth = 2) +\n  geom_point(size = 4) +\n  scale_fill_manual(values = c(invalid = \"#9E0142\",\n                    neutral = \"#C4C4B7\",\n                    valid = \"#2EC762\")) +\n  labs(x = \"Cue\",\n      y = \"Proportion correct\",\n      title = \"Accuracy per condition\") +\n  theme_linedraw(base_size = 14) +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\nHands-on\n\n\n\nWir beurteilen Sie die beiden obenstehenden Plots. Was fällt Ihnen auf? Sind die Mittelwerte aussagekräftig?\n\n\n\n\n\n\n\n\nLösung\n\n\n\n\n\nEs fehlt eine Darstellung der Unsicherheit, die wir in der Schätzung des Mittelwerts haben."
  },
  {
    "objectID": "pages/chapters/summarizing-data.html#standardfehler",
    "href": "pages/chapters/summarizing-data.html#standardfehler",
    "title": "Aggregierte Statistiken",
    "section": "Standardfehler",
    "text": "Standardfehler\nWir wollen wir nicht mehr nur den Mittelwert betrachten, sondern auch die Standardabweichung und den Standardfehler. Letzteres ist eine Mass für die Unsicherheit, die wir in der Schätzung des Mittelwerts haben. Leider gibt es keine Funktion in R, die uns den Standardfehler berechnet. Der Standardfehler ist definiert als die Standardabweichung geteilt durch die Wurzel aus der Anzahl der Datenpunkte: \\[SE = sd/ \\sqrt{n}\\].\nWir können eine solche Funktion einfach selber definieren. sd() berechnet die Standardabweichung eines Vektors, und die Anzahl Datenpunkte ist die Länge des Vektors (length()), den wir als Argument übergeben.\n\n\n\n\nse <- function(x) {\n  sd(x) / sqrt(length(x))\n}"
  },
  {
    "objectID": "pages/chapters/summarizing-data.html#pro-bedingung-über-alle-personen-aggregiert-1",
    "href": "pages/chapters/summarizing-data.html#pro-bedingung-über-alle-personen-aggregiert-1",
    "title": "Aggregierte Statistiken",
    "section": "Pro Bedingung, über alle Personen aggregiert",
    "text": "Pro Bedingung, über alle Personen aggregiert\nEine Möglichkeit wäre, die Anzahl korrekter Entscheidungen in jeder Bedingung insgesamt, d.h. über alle Personen aggregiert, zu berechnen. Wir berechnen dabei den Standardfehler des Mittelwertes um ein Mass für die Unsicherheit zu enthalten, mit der wir die Mittelwerte schätzen können.\n\ndata |>\n    group_by(condition) |>\n            summarise(\n                  n = n(),\n                  ncorrect = sum(correct),\n                  accuracy = mean(correct),\n                  se = se(correct)\n            )\n\n# A tibble: 3 × 5\n  condition     n ncorrect accuracy     se\n  <fct>     <int>    <dbl>    <dbl>  <dbl>\n1 valid       576      475    0.825 0.0159\n2 neutral     720      453    0.629 0.0180\n3 invalid     144       56    0.389 0.0408\n\n\n\n\n\n\n\n\nHands-on\n\n\n\n\nWas sagen uns diese Kennzahlen?\nWelche Informationen gehen dabei verloren?\nÜberlegen Sie sich, was wir genau berechnet haben."
  },
  {
    "objectID": "pages/chapters/summarizing-data.html#ein-exkurs-über-within-person-standardfehler",
    "href": "pages/chapters/summarizing-data.html#ein-exkurs-über-within-person-standardfehler",
    "title": "Aggregierte Statistiken",
    "section": "Ein Exkurs über within-person Standardfehler",
    "text": "Ein Exkurs über within-person Standardfehler\n\n\n\n\n\n\nWithin-person Standardfehler berechnen\n\n\n\n\n\nFolgender Code erstellt einen Dataframe mit 10 Personen, die jeweils zu zwei Messzeitpunkten getestet werden. Es handelt sich also um ein within-subject Design.\n\nlibrary(tidyverse)\n\ndfw <- tribble(\n ~subject, ~pretest, ~posttest,\n       1,   59.4,     64.5,\n       2,   46.4,     52.4,\n       3,   46.0,     49.7,\n       4,   49.0,     48.7,\n       5,   32.5,     37.4,\n       6,   45.2,     49.5,\n       7,   60.3,     59.9,\n       8,   54.3,     54.1,\n       9,   45.4,     49.6,\n      10,   38.9,     48.5) |>\n    mutate(subject = as_factor(subject))\n\nDer Dataframe ist im wide Format – um die Daten zu analysieren, ist das long Format besser geeignet. Wir konvertieren vom wide ins long Format mit der Funktion pivot_longer().\n\ndfw\n\n# A tibble: 10 × 3\n   subject pretest posttest\n   <fct>     <dbl>    <dbl>\n 1 1          59.4     64.5\n 2 2          46.4     52.4\n 3 3          46       49.7\n 4 4          49       48.7\n 5 5          32.5     37.4\n 6 6          45.2     49.5\n 7 7          60.3     59.9\n 8 8          54.3     54.1\n 9 9          45.4     49.6\n10 10         38.9     48.5\n\n\n\ndfl <- dfw |>\n    pivot_longer(contains(\"test\"),\n                 names_to = \"condition\",\n                 values_to = \"value\") |>\n    mutate(condition = as_factor(condition))\n\n\ndfl\n\n# A tibble: 20 × 3\n   subject condition value\n   <fct>   <fct>     <dbl>\n 1 1       pretest    59.4\n 2 1       posttest   64.5\n 3 2       pretest    46.4\n 4 2       posttest   52.4\n 5 3       pretest    46  \n 6 3       posttest   49.7\n 7 4       pretest    49  \n 8 4       posttest   48.7\n 9 5       pretest    32.5\n10 5       posttest   37.4\n11 6       pretest    45.2\n12 6       posttest   49.5\n13 7       pretest    60.3\n14 7       posttest   59.9\n15 8       pretest    54.3\n16 8       posttest   54.1\n17 9       pretest    45.4\n18 9       posttest   49.6\n19 10      pretest    38.9\n20 10      posttest   48.5\n\n\nWas uns hier interessiert ist vor allem die “Verbesserung” jeder Person vom ersten zum zweiten Messzeitpunkt. Diese können wir grafisch darstellen.\n\n# Use a consistent y range\nymax <- max(dfl$value)\nymin <- min(dfl$value)\n\n\n# Plot the individuals\ndfl |>\n    ggplot(aes(x=condition, y=value, colour=subject, group=subject)) +\n    geom_line() + geom_point(shape=21, fill=\"white\") +\n    ylim(ymin,ymax)\n\n\n\n\nWir stellen fest, dass fast jede Person zum zweiten Messzeitpunkt einen höheren Wert als beim ersten aufweist. Gleichzeitig gibt es aber auch erhebliche Unterschiede zwischen den Personen in Bezug auf ihren Anfangswert. Diese interindividuellen Unterschiede sind aber hier nicht von Interesse. Wir können davon ausgehen, dass diese Unterschiede auf “stabile” Eigenschaften der Personen zurückzuführen sind. Die Personen sind also eine Quelle der Variabilität, die unsere Fragestellung “stört” - diese lautet: wie ist die Änderung zwischen den beiden Zeitpunkten?\nWir können so tun, als ob der Messzeitpunkt eine between-subject Variable wäre. In diesem Fall würden wir die Standardfehler wie folgt berechnen.\n\ndflsum_between_1 <- dfl |>\n    group_by(condition) |>\n    summarize(\n        mean = mean(value),\n        se = se(value)\n    )\n\ndflsum_between_1\n\n# A tibble: 2 × 3\n  condition  mean    se\n  <fct>     <dbl> <dbl>\n1 pretest    47.7  2.72\n2 posttest   51.4  2.29\n\n\nEine Alternative dazu bietet die Funktion summarySE() aus dem Rmisc Package.\n\n# Instead of summarySEwithin, use summarySE, which treats condition as though it were a between-subjects variable\ndflsum_between <- Rmisc::summarySE(data = dfl, \n                                   measurevar = \"value\", \n                                   groupvars = \"condition\", \n                                   na.rm = FALSE, \n                                   conf.interval = .95)\ndflsum_between\n\n  condition  N value       sd       se       ci\n1   pretest 10 47.74 8.598992 2.719240 6.151348\n2  posttest 10 51.43 7.253972 2.293907 5.189179\n\n\nDie Fehlerbalken im folgenden Plot berücksichtigen folgendermassen nicht die Tatsachen, dass ein grosser Anteil der Variabilität auf “stabile” Personenunterschiede zurückzuführen ist. In diesem Fall sind die “errorbars” sehr gross, und es sieht so aus, als ob es keinen feststellbaren Unterschied zwischen den Zeitpunkten gibt. Wir vermuten aber aufgrund der individuellen Grafiken, dass es sehr wohl einen Unterschied gibt.\n\ndflsum_between |>\n    ggplot(aes(x=condition, y=value, group=1)) +\n    geom_line() +\n    geom_errorbar(width=.1, aes(ymin=value-ci, ymax=value+ci), colour=\"red\") +\n    geom_point(shape=21, size=3, fill=\"white\") +\n    ylim(ymin,ymax)\n\n\n\n\nWenn wir nur die Unterschiede zwischen den Personen berücksichtigen könnten, hätten wir in diesem Fall kleinere Standardfehler, da wir sozusagen die Personenvariabilität subtrahieren können.\nIm Rmisc Package gibt es eine solche Funktion: mit summarySEwithin() können wir korrekt Standardfehler in within-subject Designs berechnen.\n\ndflsum <- dfl |>\n    Rmisc::summarySEwithin(measurevar = \"value\",\n                               withinvars = \"condition\",\n                               idvar = \"subject\",\n                               na.rm = FALSE,\n                               conf.interval = 0.95)\n\nDie resultierenden Fehlerbalken sind nun kleiner.\n\ndflsum |>\n    ggplot(aes(x = condition, y = value, group = 1)) +\n    geom_line() +\n    geom_errorbar(width = 0.1, aes(ymin = value-ci, ymax = value+ci)) +\n    geom_point(shape = 21, size = 3, fill = \"white\") +\n    ylim(40,60) +\n    ggtitle(\"Correct within standard errors\")\n\n\n\n\nWenn wir beide Varianten zusammen darstellen, wird der Unterschiedlich offentsichtlich. In dieser Grafik sind die between Standardfehler in rot eingezeichnet; die within Standardfehler sind in schwarz.\n\ndflsum_between |>\n    ggplot(aes(x=condition, y=value, group=1)) +\n    geom_line() +\n    geom_errorbar(width=.1, aes(ymin=value-ci, ymax=value+ci), colour=\"red\") +\n    geom_errorbar(width=.1, aes(ymin=value-ci, ymax=value+ci), colour=\"black\", data = dflsum) +\n    geom_point(shape=21, size=3, fill=\"white\") +\n    ylim(ymin,ymax)\n\n\n\n\nWas wir hier machen ist eigentlich einfach. Um die within Standardfehler zu berechnen, müssen wir zuerst die personen-spezifische Mittelwerte von den Daten subtrahieren, und den Gesamtmittelwert (grand mean) addieren. Dies können wir entweder mit mutate(), oder mit der Funktion normDataWithin() machen.\nMit mutate():\n\ndf_norm <- dfl |>\n    mutate(grand_mean = mean(value)) |>\n    group_by(subject) |>\n    mutate(person_mean = mean(value),\n           value_normed = value - person_mean + grand_mean)\n\ndf_norm\n\n# A tibble: 20 × 6\n# Groups:   subject [10]\n   subject condition value grand_mean person_mean value_normed\n   <fct>   <fct>     <dbl>      <dbl>       <dbl>        <dbl>\n 1 1       pretest    59.4       49.6        62.0         47.0\n 2 1       posttest   64.5       49.6        62.0         52.1\n 3 2       pretest    46.4       49.6        49.4         46.6\n 4 2       posttest   52.4       49.6        49.4         52.6\n 5 3       pretest    46         49.6        47.8         47.7\n 6 3       posttest   49.7       49.6        47.8         51.4\n 7 4       pretest    49         49.6        48.8         49.7\n 8 4       posttest   48.7       49.6        48.8         49.4\n 9 5       pretest    32.5       49.6        35.0         47.1\n10 5       posttest   37.4       49.6        35.0         52.0\n11 6       pretest    45.2       49.6        47.4         47.4\n12 6       posttest   49.5       49.6        47.4         51.7\n13 7       pretest    60.3       49.6        60.1         49.8\n14 7       posttest   59.9       49.6        60.1         49.4\n15 8       pretest    54.3       49.6        54.2         49.7\n16 8       posttest   54.1       49.6        54.2         49.5\n17 9       pretest    45.4       49.6        47.5         47.5\n18 9       posttest   49.6       49.6        47.5         51.7\n19 10      pretest    38.9       49.6        43.7         44.8\n20 10      posttest   48.5       49.6        43.7         54.4\n\n\nMit normDataWithin():\n\ndfNorm_long <- Rmisc::normDataWithin(data=dfl, \n                                     idvar=\"subject\",    \n                                     measurevar=\"value\")\ndfNorm_long\n\n   subject condition value valueNormed\n1        1   pretest  59.4      47.035\n2        1  posttest  64.5      52.135\n3       10   pretest  38.9      44.785\n4       10  posttest  48.5      54.385\n5        2   pretest  46.4      46.585\n6        2  posttest  52.4      52.585\n7        3   pretest  46.0      47.735\n8        3  posttest  49.7      51.435\n9        4   pretest  49.0      49.735\n10       4  posttest  48.7      49.435\n11       5   pretest  32.5      47.135\n12       5  posttest  37.4      52.035\n13       6   pretest  45.2      47.435\n14       6  posttest  49.5      51.735\n15       7   pretest  60.3      49.785\n16       7  posttest  59.9      49.385\n17       8   pretest  54.3      49.685\n18       8  posttest  54.1      49.485\n19       9   pretest  45.4      47.485\n20       9  posttest  49.6      51.685\n\n\nWenn wir nun die “normierten” Daten plotten, sind die Unterschiede zwischen den Personen “verschwunden”, weil wir eben die Daten normiert haben.\n\ndf_norm |> \n    ggplot(aes(x=condition, y=value_normed, colour=subject, group=subject)) +\n    geom_line() + geom_point(shape=21, fill=\"white\") +\n    ylim(ymin, ymax)\n\n\n\n\nDie Argumente der Funktion summarySEwithin() sind folgende:\n\n\nmeasurevar: die outcome` Variable\n\nwithinvars: eine o(oder mehrere) within-subject Variablen\n\nidvar: die Gruppierungsvariable der within-subject Variablen (Versuchsperson)\n\nna.rm: sollen fehlende Werte ignoriert werden?\n\n\nconf.interval: der gewünschte Konfidenzintervall (default: 0.95)\n\nIm Output erhalten wir die Mittelwerte der outcome Variablen für jede Stufe der within-Variable, sowie Standardabweichungen, Standardfehler und Konfidenzintervalle.\n\n\n\n\ndflsum <- dfl |>\n    Rmisc::summarySEwithin(measurevar = \"value\",\n                               withinvars = \"condition\",\n                               idvar = \"subject\",\n                               na.rm = FALSE,\n                               conf.interval = 0.95)\n\nZum Vergleich: die Berechnung der Standardfehler in dflsum berücksichtigt die Tatsache, dass Personen sich von Anfang an unterscheiden, und subtrahiert von jedem Datenpunkt den Mittelwert der Person.\n\n\n\n\ndflsum\n\n  condition  N value       sd        se       ci\n1   pretest 10 47.74 2.262361 0.7154214 1.618396\n2  posttest 10 51.43 2.262361 0.7154214 1.618396\n\n\nBei der Berechnung der Standardfehler in dflsum_between haben wir im Prinzip so getan, als seien die Messzeitpunkte unabhängig voneinander. Wir haben also die Standardfehler in dflsum_between so berechnet, als ob wir die Daten in zwei unabhängige Gruppen aufgeteilt hätten.\n\ndflsum_between\n\n  condition  N value       sd       se       ci\n1   pretest 10 47.74 8.598992 2.719240 6.151348\n2  posttest 10 51.43 7.253972 2.293907 5.189179"
  },
  {
    "objectID": "pages/chapters/summarizing-data.html#accuracy-mit-within-person-standardfehler",
    "href": "pages/chapters/summarizing-data.html#accuracy-mit-within-person-standardfehler",
    "title": "Aggregierte Statistiken",
    "section": "Accuracy mit within-person Standardfehler",
    "text": "Accuracy mit within-person Standardfehler\nWir können nun dieses Prinzip auf unsere RDK daten anwenden. Die messwiederholte Variable ist nun nicht mehr der Messzeitunkt, sondern die cue-Bedingung, und die outcome Variable ist accuracy, also die Proportion korrekter Antworten.\n\naccuracy_individual |> \n  ggplot(aes(x = condition, y = accuracy, colour = ID, group = ID)) +\n    geom_line() + \n  geom_point(shape=21, fill=\"white\")\n\n\n\n\nAuch hier stellen wir fest, dass es scheinbar einen Trend gibt, dass die Proportion korrekter Antworten in der valid Bedingung hoch, und in der invalid Bedingung niedrig ist. In der neutral Bedingung liegt die accuracy dazwischen.\nOhne Berücksichtigung der Messwiederholungen erhalten wir folgende Standarfehler:\nVon Hand berechnet:\n\ndatasum <- data |>\n   group_by(condition) |> \n   summarise(N = n(),\n             accuracy = mean(correct),\n             sd = sd(correct),\n             se = se(correct))\ndatasum\n\n# A tibble: 3 × 5\n  condition     N accuracy    sd     se\n  <fct>     <int>    <dbl> <dbl>  <dbl>\n1 valid       576    0.825 0.381 0.0159\n2 neutral     720    0.629 0.483 0.0180\n3 invalid     144    0.389 0.489 0.0408\n\n\nMit der Funktion summarySE():\n\ndatasum_2 <- data |>\n    Rmisc::summarySE(measurevar = \"correct\",\n                              groupvars = \"condition\",\n                               na.rm = FALSE,\n                               conf.interval = 0.95)\ndatasum_2\n\n  condition   N   correct        sd         se         ci\n1     valid 576 0.8246528 0.3805943 0.01585810 0.03114686\n2   neutral 720 0.6291667 0.4833637 0.01801390 0.03536613\n3   invalid 144 0.3888889 0.4891996 0.04076663 0.08058308\n\n\nWenn wir nun die within Standardfehler berechnen, erhalten wir folgende Ergebnisse:\n\ndatasum_3 <- data |>\n    Rmisc::summarySEwithin(measurevar = \"correct\",\n                               withinvars = \"condition\",\n                               idvar = \"ID\",\n                               na.rm = FALSE,\n                               conf.interval = 0.95)\ndatasum_3\n\n  condition   N   correct        sd         se         ci\n1     valid 576 0.8246528 0.4523391 0.01884746 0.03701827\n2   neutral 720 0.6291667 0.5726512 0.02134145 0.04189901\n3   invalid 144 0.3888889 0.5773528 0.04811273 0.09510406\n\n\n\np_accuracy <- datasum_3 |>\n    ggplot(aes(x = condition, y = correct, group = 1)) +\n    geom_line() +\n    geom_errorbar(width = .1, aes(ymin = correct-se, ymax = correct+se), colour=\"red\") +\n    geom_point(shape=21, size=3, fill=\"white\")\np_accuracy"
  },
  {
    "objectID": "pages/chapters/summarizing-data.html#pro-versuchsperson",
    "href": "pages/chapters/summarizing-data.html#pro-versuchsperson",
    "title": "Aggregierte Statistiken",
    "section": "Pro Versuchsperson",
    "text": "Pro Versuchsperson\nWir fassen die Daten pro Person pro Block mit Mittelwert, Median und Standarabweichung zusammen. Wenn wir Daten anhand mehrerer statistischer Kennzahlen zusammenfassen möchten, können wir dies entweder manuell machen, oder die Funktion across() verwenden.\nEinfachere Version:\n\nby_subj <- data |> \n  drop_na(rt) |> \n  group_by(ID, condition) |>  \n  dplyr::summarise(mean = mean(rt),\n                   median = median(rt),\n                   sd = sd(rt))\n\nKomplizierte Version:\n\nfuns <- list(mean = mean, median = median, sd = sd, se = se)\n\nby_subj <- data %>%\n  drop_na(rt) |> \n  group_by(ID, condition) %>% \n  dplyr::summarise(across(rt, funs, .names = \"{.fn}\"))\n\n\nby_subj \n\n# A tibble: 27 × 6\n# Groups:   ID [9]\n   ID    condition  mean median     sd      se\n   <fct> <fct>     <dbl>  <dbl>  <dbl>   <dbl>\n 1 JH    valid     0.696  0.658 0.190  0.0240 \n 2 JH    neutral   0.799  0.733 0.202  0.0226 \n 3 JH    invalid   0.775  0.739 0.163  0.0421 \n 4 NS    valid     0.738  0.715 0.191  0.0240 \n 5 NS    neutral   0.885  0.844 0.201  0.0226 \n 6 NS    invalid   0.894  0.913 0.207  0.0518 \n 7 rh    valid     0.443  0.390 0.185  0.0233 \n 8 rh    neutral   0.525  0.503 0.0841 0.00941\n 9 rh    invalid   0.423  0.389 0.151  0.0378 \n10 sb    valid     0.386  0.349 0.175  0.0218 \n# … with 17 more rows\n\n\n\nby_subj |> \n  ggplot(aes(x = condition, y = mean, fill = condition)) +\n  geom_col() +\n  geom_line(aes(group = ID), linewidth = 2) +\n  geom_point(size = 8) +\n  scale_fill_manual(\n    values = c(invalid = \"#9E0142\",\n    neutral = \"#C4C4B7\",\n    valid = \"#2EC762\")\n  ) +\n  labs(\n    x = \"Cue\",\n    y = \"Response time\") +\n  theme_linedraw(base_size = 28) +\n  facet_wrap(~ID)\n\n\n\n\nWir können selbstverständlich auch die indivuellen mittleren Reaktionszeiten mit Standardfehler plotten:\n\nby_subj |> \n  ggplot(aes(condition, mean)) +\n  geom_line(aes(group = 1), linetype = 3) +    \n  geom_errorbar(aes(ymin = mean-se, ymax = mean+se),\n                width = 0.2, size=1, color=\"blue\") +\n  geom_point(size = 2) +\n  facet_wrap(~ID, scales = \"free_y\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead."
  },
  {
    "objectID": "pages/chapters/summarizing-data.html#über-versuchsperson-aggregiert",
    "href": "pages/chapters/summarizing-data.html#über-versuchsperson-aggregiert",
    "title": "Aggregierte Statistiken",
    "section": "Über Versuchsperson aggregiert",
    "text": "Über Versuchsperson aggregiert\n\nrtsum <- data |>\n  drop_na(rt) |> \n    Rmisc::summarySEwithin(measurevar = \"rt\",\n                               withinvars = \"condition\",\n                               idvar = \"ID\",\n                               na.rm = FALSE,\n                               conf.interval = 0.95)\nrtsum\n\n  condition   N        rt        sd         se         ci\n1     valid 568 0.6716487 0.2482698 0.01041717 0.02046095\n2   neutral 710 0.7238269 0.2449543 0.00919297 0.01804870\n3   invalid 141 0.7055247 0.2204498 0.01856522 0.03670444\n\n\n\np_rt <- rtsum |>\n    ggplot(aes(x = condition, y = rt, group = 1)) +\n    geom_line() +\n    geom_errorbar(width = .1, aes(ymin = rt-se, ymax = rt+se), colour=\"red\") +\n    geom_point(shape=21, size=3, fill=\"white\")\n\n\np_rt\n\n\n\n\nWir haben oben die beiden Grafiken als Variablen p_accuracy und p_rt gespeichert. Nun können wir diese Grafiken mit dem patchwork Package kombinieren.\npatchwork muss zuerst installiert werden: install.packages(\"patchwork\")\n\nlibrary(patchwork)\n\n\np_accuracy / p_rt"
  },
  {
    "objectID": "pages/chapters/uebung_1_experiment.html",
    "href": "pages/chapters/uebung_1_experiment.html",
    "title": "Übung 1",
    "section": "",
    "text": "In dieser Übung führen Sie mit zwei Personen das Random Dot Experiment durch und laden die Datensätze hoch. In dieser Übung gibt es kein Peer Feedback. Die erhobenen Daten werden wir dann in den kommenden Sitzungen verwenden."
  },
  {
    "objectID": "pages/chapters/uebung_1_experiment.html#random-dot-experiment-durchführen",
    "href": "pages/chapters/uebung_1_experiment.html#random-dot-experiment-durchführen",
    "title": "Übung 1",
    "section": "Random Dot Experiment durchführen",
    "text": "Random Dot Experiment durchführen\n\nDas fertige Experiment befindet sich auf Github. Sie können es unter diesem Link downloaden. (Wenn Sie auf den grünen Button Code klicken, kann man das Experiment als Zip-Datei herunterladen: Download ZIP)\nFühren Sie das Experiment ein- oder mehrere Male selber durch. Kontrollieren Sie, ob ein Datensatz gespeichert wird.\nTesten Sie zwei Personen (Alter zwischen 20 und 60 Jahre). Diese Personen sollten die Hypothese nicht kennen (also keine Mitstudierende aus dem ComputerLab)."
  },
  {
    "objectID": "pages/chapters/uebung_1_experiment.html#datenabgabe",
    "href": "pages/chapters/uebung_1_experiment.html#datenabgabe",
    "title": "Übung 1",
    "section": "Datenabgabe",
    "text": "Datenabgabe\n\nDaten abgeben: Zippen Sie bitte die .csv-Datensätze der getesteten Personen (nicht von den Selbsttests) und laden Sie das ZIP File bis in 10 Tagen auf ILIAS."
  },
  {
    "objectID": "pages/chapters/uebung_1_experiment.html#trouble-shooting",
    "href": "pages/chapters/uebung_1_experiment.html#trouble-shooting",
    "title": "Übung 1",
    "section": "Trouble shooting",
    "text": "Trouble shooting\nBitte Fehlermeldung im Fenster genau durchlesen. Dort finden Sie Hinweise darauf, was schief gelaufen ist.\nDas Experiment startet nicht.\n\nUnter Einstellungen (Radsymbol) den Reiter Basic auswählen. Bei Use PsychoPy version die laufende PsychoPy Version auswählen (z.B. 2022.2.5).\n\nDas Experiment startet zwar, der Bildschirm ist aber dann einfach für eine kurze Zeit grau und das Fenster schliesst sich wieder.\n\nZugriffsrechte gegeben?\nUnter Einstellungen (Radsymbol) den Reiter Input auswählen. Keyboard Backend auf PsychToolbox statt ioHub."
  },
  {
    "objectID": "pages/chapters/uebung_2_data_wrangling.html",
    "href": "pages/chapters/uebung_2_data_wrangling.html",
    "title": "Übung 2",
    "section": "",
    "text": "Die Übung 2 besteht aus den zwei folgenden Aufgaben:\n1. Skript erstellen und ausführen: In diesem Skript werden die Daten unseres PsychoPy-Experiments eingelesen, Variablen erstellt und erste Werte berechnet. Das Skript muss von einer anderen Person ausgeführt werden können (Reproduzierbarkeit) und gut kommentiert sein. Zeit: 1 Woche.\n2. Peer Feedback: Mittels Ilias wird Ihnen ein Skript einer anderen Person zugeordnet. Ihr Auftrag ist es, dieses Skript auszuführen und dazu Feedback zu geben. Zeit: 1 Woche."
  },
  {
    "objectID": "pages/chapters/uebung_2_data_wrangling.html#vorbereitung",
    "href": "pages/chapters/uebung_2_data_wrangling.html#vorbereitung",
    "title": "Übung 2",
    "section": "Vorbereitung",
    "text": "Vorbereitung\n\nLaden Sie zuerst das RStudio Projekt für Übung 2 herunter. Dieses muss “entzippt” werden. In dem Projektordner finden Sie den Ordner data. Darin befinden sich alle Datensätze des PsychoPy Experiments. Das Projekt kann durch einen Doppelklick auf das Projekt-File uebung-2.Rproj geöffnet werden.\n\n\n\n\n\n\n\nWichtig\n\n\n\n👉 RStudio Projekt für Übung 2 herunterladen\n\n\n\nProjekte ermöglichen, relative Pfade. So stellen wir sicher, dass andere Personen, die dieses Projekt öffnen, dieses File auch sehen und ausführen können.\n\n\nÖffnen Sie das File uebung-2_script.r. Dieses File können Sie genau so verwenden und nach Bearbeitung speichern. Fügen Sie dem Filenamen Ihre Initialen an, das könnte dann so aussehen: uebung-2_script_gw.r.\n\n\nPraktischer ist es mit RMarkdown zu arbeiten. Das werden wir in den nächsten Wochen lernen. Dafür eignen sich z.B. .qmd-Files. Hier kann für Text die Markdown-Syntax verwendet werden, und der Code wird in Code-Blocks geschrieben."
  },
  {
    "objectID": "pages/chapters/uebung_2_data_wrangling.html#kommentare-code",
    "href": "pages/chapters/uebung_2_data_wrangling.html#kommentare-code",
    "title": "Übung 2",
    "section": "Kommentare & Code",
    "text": "Kommentare & Code\n\nKommentare werden mit #davor gekennzeichnet, so weiss R, dass dies Text und nicht ausführbarer Code ist. Verwenden Sie also vor jedem Kommentar am Anfang der Zeile ein #.\nKommentieren Sie mit knappen, genauen Angaben. So weiss Ihr Peer Reviewer, was das Skript machen wird und was das Ziel des Codes ist."
  },
  {
    "objectID": "pages/chapters/uebung_2_data_wrangling.html#aufgaben",
    "href": "pages/chapters/uebung_2_data_wrangling.html#aufgaben",
    "title": "Übung 2",
    "section": "Aufgaben",
    "text": "Aufgaben\n\nGehen Sie das Skript durch. Das Skript enthält ein “Gerüst” an Code, mit dem Sie arbeiten können. Sie können auch den Code der Website übernehmen und etwas anpassen, wenn nötig. Überall wo ___ steht, müssen Sie das Fehlende einfügen. Manchmal ist das ein Kommentar. Manchmal ist es ein Codestück.\nSie finden hier Infos dazu, wie die Daten bearbeitet werden können."
  },
  {
    "objectID": "pages/chapters/uebung_2_data_wrangling.html#reproduzierbar-machen",
    "href": "pages/chapters/uebung_2_data_wrangling.html#reproduzierbar-machen",
    "title": "Übung 2",
    "section": "Reproduzierbar machen",
    "text": "Reproduzierbar machen\nSobald Sie den Code und die Kommentare ergänzt haben, ist es wichtig, das Skript auf seine Reproduzierbarkeit zu testen.\n\nLöschen Sie die Variablen im Workspace. Verwenden Sie dazu z.B. das “Besen”-Icon unter Environment oder nutzen Sie unter dem Reiter Session den Befehl Clear Workspace. Führen Sie danach das Skript nochmals von oben bis unten aus.\nPrüfen Sie, ob alle Pfade relativ, also nicht an Ihren Rechner gebunden sind.\nPrüfen Sie, ob alles gut und verständlich kommentiert ist.\nPrüfen Sie, ob Sie die 3 Werte für Accuracy pro Bedingung (für valide, invalide und neutral) als Kommentar in das Skript geschrieben haben."
  },
  {
    "objectID": "pages/chapters/uebung_2_data_wrangling.html#hochladen",
    "href": "pages/chapters/uebung_2_data_wrangling.html#hochladen",
    "title": "Übung 2",
    "section": "Hochladen",
    "text": "Hochladen\nLaden Sie das uebung-2_script_initialen.r - Skript auf Ilias hoch."
  },
  {
    "objectID": "pages/chapters/uebung_2_data_wrangling.html#trouble-shooting",
    "href": "pages/chapters/uebung_2_data_wrangling.html#trouble-shooting",
    "title": "Übung 2",
    "section": "Trouble Shooting",
    "text": "Trouble Shooting\nPackages updaten\n\nUpdaten Sie alle packages mit update.packages(ask = FALSE) in der Konsole. Oder unter dem Reiter Tools > Check for Package Updates ...\n\nProbleme mit read_csv\n\nVerwenden Sie read.csv() als Alternative\n\nFalls nichts hilft …\n\nFragen Sie Mitstudierende. Ziemlich sicher hat jemand dieses Problem schon gelöst.\nSchreiben Sie eine Mail mit folgenden Infos:\n\nOutput von sessionInfo() in derKonsole\nausgeführter Code\nFehlermeldung\nwas haben Sie schon versucht als Lösung?"
  },
  {
    "objectID": "pages/chapters/uebung_2_data_wrangling.html#vorbereitung-1",
    "href": "pages/chapters/uebung_2_data_wrangling.html#vorbereitung-1",
    "title": "Übung 2",
    "section": "Vorbereitung",
    "text": "Vorbereitung\n\nLesen Sie hier die Peer Feedback-Grundsätze durch.\nLaden Sie das Ihnen zugeordnete .r-Skript herunter und speichern Sie es in Ihr R-Projektordner, wo sich auch das Projekt-File uebung-2.Rproj und Ihr eigenens .r-Skript befindet.\nÖffnen Sie das Projekt. Löschen Sie alle gespeicherten Variablen im Workspace. Verwenden Sie dazu z.B. das “Besen”-Icon unter Environment oder nutzen Sie unter dem Reiter Session den Befehl Clear Workspace."
  },
  {
    "objectID": "pages/chapters/uebung_2_data_wrangling.html#fragen-für-peer-review",
    "href": "pages/chapters/uebung_2_data_wrangling.html#fragen-für-peer-review",
    "title": "Übung 2",
    "section": "Fragen für Peer Review",
    "text": "Fragen für Peer Review\nÖffnen Sie das .r-Skript und führen Sie es von oben bis unten aus und schreiben Sie zu folgenden Punkten eine Rückmeldung in ein Word/Text-File.\n1. Reproduzierbarkeit des Codes\n\nIst das Skript ausführbar?\nWenn nein: Wo genau gibt es eine Fehlermeldung, weshalb kommt diese und wie könnte diese behoben werden?\nStimmen die 3 Accuracy pro Bedingung- Werte mit den im Kommentar beschriebenen Werten überein?\nStimmen die Werte mit den von Ihnen selber errechneten Werten überein?\n\n2. Kommentierung/Implementierung des Codes\n\nGeben Sie mit mind. 5 Sätzen Rückmeldung zum .r-Skript. Mögliche Themen könnten z.B. sein: War der Code angemessen kommentiert? Was war gut? Was hätte man besser machen können? Sind Ihnen an den Daten ähnliche Dinge aufgefallen? Haben Sie etwas gelernt von dem gereviewten Skript? Oder haben Sie etwas besser gelöst gehabt in Ihrem Skript? Haben Sie Vorschläge? usw."
  },
  {
    "objectID": "pages/chapters/uebung_2_data_wrangling.html#hochladen-1",
    "href": "pages/chapters/uebung_2_data_wrangling.html#hochladen-1",
    "title": "Übung 2",
    "section": "Hochladen",
    "text": "Hochladen\nLaden Sie Ihr Peer Review anschliessend als Word/Text-File auf Ilias hoch."
  },
  {
    "objectID": "pages/chapters/uebung_3_data_visualization.html",
    "href": "pages/chapters/uebung_3_data_visualization.html",
    "title": "Übung 3",
    "section": "",
    "text": "Reusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{wyssen,\n  author = {Gerda Wyssen},\n  title = {Übung 3},\n  url = {https://kogpsy.github.io/neuroscicomplabFS23//uebung_3_data_visualization.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nGerda Wyssen. n.d. “Übung 3.” https://kogpsy.github.io/neuroscicomplabFS23//uebung_3_data_visualization.html."
  },
  {
    "objectID": "slides/01_introduction.html#model-based-cognitive-neuroscience",
    "href": "slides/01_introduction.html#model-based-cognitive-neuroscience",
    "title": "1. Sitzung",
    "section": "(Model-based) Cognitive Neuroscience",
    "text": "(Model-based) Cognitive Neuroscience\n\n\nWas heisst Model-based Neuroscience?\nWelche Kenntnisse brauchen wir, um Experiment durchzuführen und Daten auszuwerten?\nWelche Programmiertechniken/sprachen brauchen wir?"
  },
  {
    "objectID": "slides/01_introduction.html#model-based-neuroscience-beispiel",
    "href": "slides/01_introduction.html#model-based-neuroscience-beispiel",
    "title": "1. Sitzung",
    "section": "Model-based Neuroscience: Beispiel",
    "text": "Model-based Neuroscience: Beispiel\nMulder, M. J., Wagenmakers, E.-J., Ratcliff, R., Boekel, W., & Forstmann, B. U. (2012). Bias in the Brain: A Diffusion Model Analysis of Prior Probability and Potential Payoff. Journal of Neuroscience, 32(7), 2335–2343.\n👉 https://www.jneurosci.org/content/32/7/2335\nIn dieser Studie geht es darum, den Einfluss von Vorwissen (prior knowledge) auf eine simple perzeptuelle Entscheidung zu untersuchen.\n\nAls Task haben die Autoren ein Random Dot Motion Experiment benutzt.\nFür die Datenanalyse wurde unter anderem ein Diffusion Decision Model verwendet."
  },
  {
    "objectID": "slides/01_introduction.html#diffusion-decision-model",
    "href": "slides/01_introduction.html#diffusion-decision-model",
    "title": "1. Sitzung",
    "section": "Diffusion Decision Model",
    "text": "Diffusion Decision Model"
  },
  {
    "objectID": "slides/01_introduction.html#model-based-neuroscience",
    "href": "slides/01_introduction.html#model-based-neuroscience",
    "title": "1. Sitzung",
    "section": "Model-based Neuroscience",
    "text": "Model-based Neuroscience\n\nÜberfliegen Sie das Paper, und achten Sie dabei darauf, welche Skills Sie benötigen, um eine solche Studie durchzuführen.\n\nWelches theoretische Wissen brauchen Sie?\nWelche Programmierkenntnisse brauchen Sie?\n\nfür das Experiment\nfür die Datenanalyse\n\nWelche statistischen Verfahen brauchen Sie, um die Daten auszuwerten?\nWarum wurde das Experiment im Scanner und ausserhalb des Scanners durchgeführt?\nWas kann man mit einer solchen Studie herausfinden?"
  },
  {
    "objectID": "slides/01_introduction.html#vorwissen",
    "href": "slides/01_introduction.html#vorwissen",
    "title": "1. Sitzung",
    "section": "Vorwissen",
    "text": "Vorwissen\nEs wurden zwei verschiedene Typen von Vorwissen benutzt.\n\nA-Priori Wahrscheinlichkeit, dass die Punktwolke sich nach rechts oder nach links bewegte.\nAsymmetrische Belohnung für korrekte links/rechts Entscheidungen."
  },
  {
    "objectID": "slides/01_introduction.html#diffusion-decision-model-1",
    "href": "slides/01_introduction.html#diffusion-decision-model-1",
    "title": "1. Sitzung",
    "section": "Diffusion Decision Model",
    "text": "Diffusion Decision Model"
  },
  {
    "objectID": "slides/01_introduction.html#model-based-neuroscience-1",
    "href": "slides/01_introduction.html#model-based-neuroscience-1",
    "title": "1. Sitzung",
    "section": "Model-based Neuroscience",
    "text": "Model-based Neuroscience\n\n\nSchematische Darstellung der erwarteten Resultate.\n\nStarting point: korrekte und inkorrekte RTs unterschieden sich.\nDrift rate: korrekte und inkorrekte RTs sind sich ähnlich.\n\n\n\nTatsächliche Resultate: Quantifizierung des Bias anhand des DDM."
  },
  {
    "objectID": "slides/01_introduction.html#model-based-neuroscience-2",
    "href": "slides/01_introduction.html#model-based-neuroscience-2",
    "title": "1. Sitzung",
    "section": "Model-based Neuroscience",
    "text": "Model-based Neuroscience\nBOLD Responses der Areale welche besonder stark sowohl auf die “prior probability” als auch auf die “payoff” Manipulation reagierten.\n\n\n\nright MedFG (right medial frontal gyrus)\nACG (anterior cingulate cortex)\nSFG (superior frontal gyrus)\nleft middle temporal gyrus\nIPS (intra-parietal sulcus).\n\n\n\n\n\nDiese Areale sollen eine besondere Rolle in der Verarbeitung von Bias im Entscheidungsverhalten haben."
  },
  {
    "objectID": "slides/01_introduction.html#wichtige-skills",
    "href": "slides/01_introduction.html#wichtige-skills",
    "title": "1. Sitzung",
    "section": "Wichtige Skills",
    "text": "Wichtige Skills\n\n\n\nTheorien über Entscheidungsverhalten\nExperimente programmieren\n\nTiming (inside/outside scanner)\n\nData cleaning and manipulation (data wrangling)\nStatistische Verfahren für messwiederholte Daten\n\nPsychometric curve\nBinary choices / Reaktionszeiten\nrepeated-measures ANOVA\n\n\n\n\nGrafische Darstellung der Resultate\nKognitive Prozessmodelle\n\nfit Diffusion Decision Model (DDM)\n\nAuswertung von fRMI Daten\n\n\n\n\nMit diesen Themen (ausser der Analyse von fMRI Daten) beschäftigen wir uns in diesem Kurs.\n\n\n\n🏠 Neurowissenschaft im Computerlab FS22"
  },
  {
    "objectID": "slides/02_psychopy.html#bias-rdk-experiment",
    "href": "slides/02_psychopy.html#bias-rdk-experiment",
    "title": "2. Sitzung",
    "section": "Bias RDK Experiment",
    "text": "Bias RDK Experiment\n\n\n\nRandom-dot motion direction-discrimination task\nInside/outside scanner (timing)\nBias: cue (probability left/right/unbiased)\nFixation cross\nRDK: 3x3 pixels, coherence\n40 bias trials, 40 neutral trials\n32 valid, 8 invalid trials"
  },
  {
    "objectID": "slides/02_psychopy.html#psychopy",
    "href": "slides/02_psychopy.html#psychopy",
    "title": "2. Sitzung",
    "section": "PsychoPy",
    "text": "PsychoPy\n\n\n\nPsychoPy Website\nRessourcen\nWalk-through: Builder\nDiskussionsforum\nKapitel: Verhaltensexperiment mit PsychoPy"
  },
  {
    "objectID": "slides/02_psychopy.html#pavlovia",
    "href": "slides/02_psychopy.html#pavlovia",
    "title": "2. Sitzung",
    "section": "Pavlovia",
    "text": "Pavlovia\n\nPavlovia:\n\n\nPavlovia is a place for the wide community of researchers in the behavioural sciences to run, share, and explore experiments online.\n\n\nExperimente suchen.\nZum Beispiel ChoiceRTT ausprobieren und den Code anschauen."
  },
  {
    "objectID": "slides/02_psychopy.html#understanding-your-computer",
    "href": "slides/02_psychopy.html#understanding-your-computer",
    "title": "2. Sitzung",
    "section": "Understanding your Computer",
    "text": "Understanding your Computer\n\nRefresh rate: 60 Hz. Ein Frame dauert 1/60 Sekunde, oder 16.667 ms.\n\nfrom psychopy import visual\n\nwin = visual.Window()\nwin.getActualFrameRate()\n\nKeyboard timing: Variabilität ~15 ms.\nScreen refresh fängt oben an und endet (~10 ms später) unten."
  },
  {
    "objectID": "slides/02_psychopy.html#probieren-sie-es-selber",
    "href": "slides/02_psychopy.html#probieren-sie-es-selber",
    "title": "2. Sitzung",
    "section": "Probieren Sie es selber!",
    "text": "Probieren Sie es selber!\n\nVersuchen Sie selber, Teile des Experiments in PsychoPy zu implementieren\n\n\nWenn Sie eine Starthilfe benötigen, downloaden Sie ein Beipiel: 👉 Practice Trials\nEine Einführung finden Sie hier: 👉 Verhaltensexperiment mit PsychoPy\n\n\n\n\n🏠 Neurowissenschaft im Computerlab FS23"
  },
  {
    "objectID": "slides/02_psychopy_gw.html#perceptual-decisions",
    "href": "slides/02_psychopy_gw.html#perceptual-decisions",
    "title": "PsychoPy Experiment",
    "section": "Perceptual decisions",
    "text": "Perceptual decisions\n\nberuhen auf der Wahrnehmung, Evaluation, Integration von Sinnesempfindungen\nsind oft handlungsrelevant\nneurowissenschaftlich untersucht werden die neuronalen Schaltkreise welche Wahrnehmungssignale kodieren, speichern und analysieren und wie diese mit Verhalten zusammenhängen\nmögliche Fragenstellungen: Gewichtung von Sinnesinformationen bei sensorischen Konflikten oder der Einfluss von Vorwissen auf Entscheidungen\n\n\n\n\n\n\n\nHands-on\n\n\n\nIn welchen Situationen treffen wir perzeptuelle Entscheidungen?\nWo ist der Einfluss von Vorwissen auf perzeptuelle Entscheidungen alltagsrelevant?\n\nDiskutieren Sie die Fragen in kleinen Gruppen und finden Sie je 3 Beispiele."
  },
  {
    "objectID": "slides/02_psychopy_gw.html#random-dot-motion-experiment-i",
    "href": "slides/02_psychopy_gw.html#random-dot-motion-experiment-i",
    "title": "PsychoPy Experiment",
    "section": "Random-dot motion Experiment I",
    "text": "Random-dot motion Experiment I\n\n\n\nRandom-dot motion direction-discrimination task (Bias in the brain: Mulder et al., 2012)\ncoherence: probability that a dot moves coherent with the motion direction\nbias: prior probabity cue before random-dot task (left/right/unbiased) or reward cue for a left or right answer (if correct)\nmeasures: response times and accuracy"
  },
  {
    "objectID": "slides/02_psychopy_gw.html#random-dot-motion-experiment-ii",
    "href": "slides/02_psychopy_gw.html#random-dot-motion-experiment-ii",
    "title": "PsychoPy Experiment",
    "section": "Random-dot motion Experiment II",
    "text": "Random-dot motion Experiment II\n\n\n\n\n\n\nHands-on\n\n\nWie wirken sich die beiden Formen von Vorwissen auf das Antwortverhalten aus?\n\nBei welcher Bedingung antworten die Personen schneller?\nWo machen sie mehr Fehler?\n\nWas denken Sie? Diskutieren Sie die Fragen in kleinen Gruppen ohne im Paper nachzuschauen."
  },
  {
    "objectID": "slides/02_psychopy_gw.html#random-dot-motion-experiment-iii",
    "href": "slides/02_psychopy_gw.html#random-dot-motion-experiment-iii",
    "title": "PsychoPy Experiment",
    "section": "Random-dot motion Experiment III",
    "text": "Random-dot motion Experiment III"
  },
  {
    "objectID": "slides/02_psychopy_gw.html#random-dot-motion-experiment-iv",
    "href": "slides/02_psychopy_gw.html#random-dot-motion-experiment-iv",
    "title": "PsychoPy Experiment",
    "section": "Random-dot motion Experiment IV",
    "text": "Random-dot motion Experiment IV\n\nStimuli\n\nrandom dots: 3x3 pixels, coherence level: 8%\n\nConditions\n\n40 bias trials and 40 neutral trials (half of motion to left / other half to the right)\n32 valid (cue correct) and 8 invalid (cue incorrect) trials\n\nTrials and Timing\n\nFixation 1 (100/350/800/1200 ms)\nCue (1000 ms)\nFixation 2 (3400/4000/4500/5000 ms)\nDots (1500 ms)\nFeedback"
  },
  {
    "objectID": "slides/02_psychopy_gw.html#psychopy",
    "href": "slides/02_psychopy_gw.html#psychopy",
    "title": "PsychoPy Experiment",
    "section": "PsychoPy",
    "text": "PsychoPy\n\n\n\nPsychoPy Website\nRessourcen\nWalk-through: Builder\nDiskussionsforum\nKapitel: Verhaltensexperiment mit PsychoPy"
  },
  {
    "objectID": "slides/02_psychopy_gw.html#pavlovia",
    "href": "slides/02_psychopy_gw.html#pavlovia",
    "title": "PsychoPy Experiment",
    "section": "Pavlovia",
    "text": "Pavlovia\n\nPavlovia:\n\n\nPavlovia is a place for the wide community of researchers in the behavioural sciences to run, share, and explore experiments online.\n\n\nExperimente suchen.\nZum Beispiel ChoiceRTT ausprobieren und den Code anschauen."
  },
  {
    "objectID": "slides/02_psychopy_gw.html#understanding-your-computer",
    "href": "slides/02_psychopy_gw.html#understanding-your-computer",
    "title": "PsychoPy Experiment",
    "section": "Understanding your Computer",
    "text": "Understanding your Computer\n\nRefresh rate: 60 Hz. Ein Frame dauert 1/60 Sekunde, oder 16.667 ms.\n\nfrom psychopy import visual\n\nwin = visual.Window()\nwin.getActualFrameRate()\n\nKeyboard timing: Variabilität ~15 ms.\nScreen refresh fängt oben an und endet (~10 ms später) unten."
  },
  {
    "objectID": "slides/02_psychopy_gw.html#stimuli",
    "href": "slides/02_psychopy_gw.html#stimuli",
    "title": "PsychoPy Experiment",
    "section": "Stimuli",
    "text": "Stimuli\nErstellen Sie einen Random Dot Stimulus. Implementieren Sie dabei so genau wie möglich die Parameter von Mulder et al. 2012\nBeachten Sie folgende Aspekte:\n\nTiming (Stimulusdauer)\nFarbe\nGrösse\nKohärenz\n\n(Die Bewegungsrichtung können Sie noch vernachlässigen.)"
  },
  {
    "objectID": "slides/02_psychopy_gw.html#trial-i",
    "href": "slides/02_psychopy_gw.html#trial-i",
    "title": "PsychoPy Experiment",
    "section": "Trial I",
    "text": "Trial I\nErstellen Sie einen Trial noch ohne Instruktion fürs Vorwissen. Implementieren Sie dabei so genau wie möglich die Parameter von Mulder et al. 2012\n\nBewegungsrichtung (inkl. conditions.csv file)\nFixationskreuze\nTiming (ITI: Inter-Trial-Intervall)\nAntwort der Versuchsperson aufnehmen\n\n(Die Instruktion bezüglich Vorwissen können Sie noch vernachlässigen.)"
  },
  {
    "objectID": "slides/02_psychopy_gw.html#trial-ii",
    "href": "slides/02_psychopy_gw.html#trial-ii",
    "title": "PsychoPy Experiment",
    "section": "Trial II",
    "text": "Trial II\nErstellen Sie einen Trial mit Vorwissen. Implementieren Sie dabei so genau wie möglich die Parameter von Mulder et al. 2012\nBeachten Sie folgende Aspekte:\n\nCue / Vorwissen kann valide, invalide, neutral sein\nstimmt in 3 von 4 Fällen"
  },
  {
    "objectID": "slides/02_psychopy_gw.html#instruktion-debriefing",
    "href": "slides/02_psychopy_gw.html#instruktion-debriefing",
    "title": "PsychoPy Experiment",
    "section": "Instruktion & Debriefing",
    "text": "Instruktion & Debriefing\nFügen Sie eine Instruktion und ein kurzes Debriefing hinzu.\n\n\n\n🏠 Neurowissenschaft im Computerlab FS23"
  },
  {
    "objectID": "pages/exercises/exercise_01.html",
    "href": "pages/exercises/exercise_01.html",
    "title": "Übung 1",
    "section": "",
    "text": "Vertiefung\n\n\n\nDiese Übung muss nicht abgegeben werden; sie dient als Vorbereitung für die folgende Sitzung.\n\n\n\n\nInstallieren Sie PsychoPy von der Website. PsychoPy ist ein Open-Source Programm für MacOS, Windows und Linux, mit welchen wir sehr viele verschiedene Verhaltensexperimente (Neuroscience, Psychologie, Psychophysik, Linguistik) programmieren können. Diese lassen sich z.B. mit Eyetracking verbinden, oder im fRMI Scanner und mit EEG verwenden.\nPsychoPy 👉 https://www.psychopy.org/download.html.\nAm einfachsten ist es, das “Standalone package” für MacOS oder Windows zu installieren.\n\nUnter MacOS scheint die neueste Version vom Februar 2022 Probleme zu bereiten — es ist daher (zurzeit noch) besser, die Version 2021.2.3 zu installieren.\n\n\n\n\n\nWas verstehen Sie unter folgenen Begriffen:\n\n\nModel-based Neuroscience\nEvidence accumulation\n\n\nWas könnte man unter Vorwissen (prior knowledge) verstehen? In welchen Kontexten könnte es bei Entscheidungen nützlich sein, Vorwissen zu benutzen?"
  },
  {
    "objectID": "pages/exercises/exercise_02.html",
    "href": "pages/exercises/exercise_02.html",
    "title": "Übung 2",
    "section": "",
    "text": "Vertiefung\n\n\n\nDie Daten, welche Sie in dieser Übung sammeln, müssen abgegeben werden; wir werden diese im Verlauf des Semesters analysieren. Bitte die Datenfiles in einem ZIP File bis 8. März auf ILIAS hochladen.\n\n\n\n\n\nDas fertige Experiment befindet sich auf Github. Sie können es unter diesem Link downloaden. 👉 LINK.\nFühren Sie das Experiment ein- oder mehrere Male selber durch.\nTesten Sie eine weitere Person (Alter ca. 20-60).\nZippen Sie bitte Ihren Datensatz und denjenigen der anderen Testperson und laden Sie das ZIP FIle auf ILIAS."
  },
  {
    "objectID": "pages/solutions/solution_03.html",
    "href": "pages/solutions/solution_03.html",
    "title": "Übung 3: Lösung",
    "section": "",
    "text": "In dieser Aufgabe bearbeiten Sie Daten aus einem Detektionssexperiment. Versuchspersonen mussten in zwei Bedingungen (bias und no_bias) ein Signal, welches in Rauschen eingebettet war, detektieren. Im Datensatz sind folgende Variablen:\nsubject: Subjekt ID\ntrial_num: Trialnummer, durchnummeriert in jeder Bedingung\ncondition: Bedingung (_Bias_ und _No Bias_)\nsignal_present: Indikatorvariable für Signal (0: absent, 1: present)\ncorrect: Indikatorvariable für korrekte Antwort (0: incorrekt, 1: correct)\nrt: Reaktionszeit in Sekunden\n\n\n\nAufgabe 1\n\nSpeichern Sie das CSV File in Ihren Projektordner.\nLesen Sie das CSV File ein. Per Konvention verwenden wir den Variablennamen d für den Datensatz.\nÜberprüfen Sie, ob alle Variablen vorhanden sind. Verwenden Sie z.B. die Funktion glimpse().\nKonvertieren Sie die Gruppierungsvariablen subject und condition zu Faktoren.\n\n\n\nlibrary(tidyverse)\n\n\nd <- read_csv(\"data/data-exercise-03.csv\")\n\nSchauen Sie sich die Variablen an:\n\nglimpse(d)\n\nRows: 5,756\nColumns: 6\n$ subject        <dbl> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2…\n$ condition      <chr> \"bias\", \"bias\", \"bias\", \"bias\", \"bias\", \"bias\", \"bias\",…\n$ signal_present <dbl> 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0…\n$ correct        <dbl> 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1…\n$ rt             <dbl> 4.076, 1.167, 0.598, 0.375, 0.454, 0.410, 0.370, 0.559,…\n$ trial_num      <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, …\n\n\nKonvertieren Sie die Gruppierungsvariablen zu Faktoren:\n\nd <- d |>\n    mutate(subject = as_factor(subject),\n           condition = as_factor(condition))\n\n\nAufgabe 2\nGibt es Versuchspersonen die in einer der Bedingungen Reaktionszeiten hat, welche mehr als zwei Standardabweichungen über dem Bedingungsmittelwert liegen?\n\n\n# summary stats (means) for subjects/conditions\nsum_stats_participants <- d |>\n    group_by(subject, condition) |>\n    dplyr::summarise(\n        mean_P = mean(rt))\n\n\n# summary stats (means and SDs) for conditions\nsum_stats_conditions <- d |>\n    group_by(condition) |>\n    dplyr::summarise(\n        mean_C = mean(rt),\n        sd_C = sd(rt))\n\n\nsum_stats_participants <-\n    full_join(\n        sum_stats_participants,\n        sum_stats_conditions,\n        by = \"condition\") |>\n    mutate(outlier_P = (mean_P - mean_C) > 2 * sd_C)\n\n\n# show outlier participants\nsum_stats_participants |>\n    filter(outlier_P == 1) |>\n    show()\n\n# A tibble: 0 × 6\n# Groups:   subject [0]\n# … with 6 variables: subject <fct>, condition <fct>, mean_P <dbl>,\n#   mean_C <dbl>, sd_C <dbl>, outlier_P <lgl>\n\n\nEs gibt keine Versuchsperson, deren mittlere Reaktionszeit in einer Bedingung mehr als zwei Standardabweichungen über dem Bedingungsmittelwert liegt. Dies bedeutet, dass sich in excluded keine Personen befinden, und der Dataframe folglich \\(0\\) Zeilen hat.\n\nexcluded <- sum_stats_participants |>\n    filter(outlier_P == 1)\n\nexcluded\n\n# A tibble: 0 × 6\n# Groups:   subject [0]\n# … with 6 variables: subject <fct>, condition <fct>, mean_P <dbl>,\n#   mean_C <dbl>, sd_C <dbl>, outlier_P <lgl>\n\n\nDer nächste Schritt wäre also nicht unbedingt notwendig.\n\nd_cleaned <- d |>\n    filter(!(subject %in% excluded$subject)) |>\n    mutate(subject = fct_drop(subject))\n\n\nAufgabe 3\n\nGibt es einzelne Trials, in denen Versuchpersonen länger als 4 Standardabweichungen über dem Bedingungsmittelwert gebraucht haben, um zu Antworten?\nGibt es einzelne Trials, in denen Versuchpersonen zu schnell (unter 100 ms) geantwortet haben?\nSpeichern Sie den bearbeiteten Datensatz als CSV File.\n\n\nZu Aufgabe 3.a)\nWir wollen Trials identifizieren, bei denen Vpn länger gebraucht haben, als 4 Standardabweichungen über dem Bedingungsmittelwert. Das bedeutet (rt - mean_C) > 4 * sd_C, und nicht abs(rt - mean_C) > 4 * sd_C. Letzteres würde auch Trials als Ausreisser identifizieren, welche 4 Standardabweichungen unter dem Bedingungsmittelwert liegen.\nZu Aufgabe 3.b)\nDie Reaktionszeiten sind hier in Sekunden, nicht Millisekunden. Dies bedeutet, wir brauchen rt < 0.100, und nicht rt < 100.\n\nd_cleaned <- d_cleaned |>\n    full_join(\n        sum_stats_conditions,\n        by = \"condition\") |>\n    mutate(\n        trial_type = case_when(\n            (rt - mean_C) > 4 * sd_C ~ \"too slow\",\n            rt < 0.100 ~ \"too fast\",\n            TRUE ~ \"OK\") |>\n            factor(levels = c(\"OK\", \"too fast\", \"too slow\")))\n\n\nd_cleaned |>\n    ggplot(aes(x = trial_num, y = rt, color = trial_type, shape = trial_type)) +\n    geom_point(alpha = 0.6) +\n    facet_grid(~condition) +\n    scale_color_manual(values = c(\"gray70\", \"red\", \"steelblue\"))\n\n\n\n\n\nd_cleaned |>\n    filter(trial_type != \"OK\")\n\n# A tibble: 165 × 9\n   subject condition signal_present correct     rt trial_…¹ mean_C  sd_C trial…²\n   <fct>   <fct>              <dbl>   <dbl>  <dbl>    <dbl>  <dbl> <dbl> <fct>  \n 1 2       bias                   0       1 4.08          1  0.697 0.751 too sl…\n 2 2       bias                   1       1 0.035        41  0.697 0.751 too fa…\n 3 2       bias                   0       1 6.92         50  0.697 0.751 too sl…\n 4 2       bias                   0       1 0.085        51  0.697 0.751 too fa…\n 5 2       bias                   0       1 0.033        70  0.697 0.751 too fa…\n 6 2       bias                   0       1 5.09         74  0.697 0.751 too sl…\n 7 2       bias                   0       1 6.59         94  0.697 0.751 too sl…\n 8 2       bias                   0       1 5.09        121  0.697 0.751 too sl…\n 9 2       bias                   1       1 0.077       138  0.697 0.751 too fa…\n10 3       no_bias                1       0 0.0958        4  0.691 0.773 too fa…\n# … with 155 more rows, and abbreviated variable names ¹​trial_num, ²​trial_type\n\n\nVor dem Entfernen der Ausreisser Trials haben wir 5756 Datenpunkte.\n\nnrow(d_cleaned)\n\n[1] 5756\n\n\n\nd_cleaned <- d_cleaned |>\n    filter(trial_type == \"OK\") |>\n    select(subject, trial_num, condition, signal_present, correct, rt)\n\nNach dem Entfernen haben wir noch 5591.\n\nnrow(d_cleaned)\n\n[1] 5591\n\n\n\nd_cleaned |>\n    ggplot(aes(x = trial_num, y = rt)) +\n    geom_point(alpha = 0.6) +\n    facet_grid(~condition) +\n    scale_color_manual(values = c(\"gray70\", \"red\", \"steelblue\"))\n\n\n\n\n\nd_cleaned |> write_csv(\"data/data-cleaned.csv\")"
  }
]