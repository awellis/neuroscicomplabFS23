---
title: "Daten importieren: Teil 1"
description: Daten aus Verhaltensexperimenten importieren und bearbeiten.
date: "2023-03-13"
author:
  - name: Andrew Ellis
    url: https://github.com/awellis
    affiliation: Kognitive Psychologie, Wahrnehmung und Methodenlehre, Universit√§t Bern 
    affiliation-url: https://www.kog.psy.unibe.ch
    orcid: 0000-0002-2788-936X
license: CC BY
citation: true
bibliography: ../../bibliography.bib
format:
    html:
        toc: true
        code-link: true
execute: 
  cache: false
---

```{r}
#| include: false

# Set working directory of R
knitr::opts_knit$set(root.dir = '../../data/rdk_decision_experiment')
```

:::{.callout-tip collapse="false"}
## Lernziele

In der heutigen Sitzung lernen wir:

- Mit RStudio arbeiten
- Einzelne Psychopy `.csv` Datens√§tze importieren
- Variablen ausw√§hlen/umbenennen
- Neue Variablen berechnen
- Mehrere Datens√§tze importieren
- Mit ChatGPT Code verstehen
:::


:::{.callout-caution collapse="true"}
## Datacamp
- Falls Sie eine Starthilfe zu RStudio brauchen, empfehlen wir dieses [RStudio Tutorial](https://www.datacamp.com/tutorial/r-studio-tutorial).
- Falls Sie mir R und den `tidyverse` Packages (noch) nicht sattelfest sind, empfehlen wir Ihnen das erste Kapitel im folgenden Kurs auf DataCamp: [Introduction to the Tidyverse](https://app.datacamp.com/learn/courses/introduction-to-the-tidyverse).
:::



# RStudio Projekt 

In der heutigen Sitzung werden wir Datens√§tze eines mit Psychopy erstellten Verhaltensexperimentes in R importieren. Die Datens√§tze stammen aus dem Kurs im FS 2022. Sie k√∂nnen unter folgendem Link ein [RStudio Projekt](../../downloadable_files/import-data.zip) herunterladen. Dieses muss zuerst "entzippt" werden. In dem Projektordner finden Sie zwei Ordner; In `testdata` befindet sich ein einzelner Datensatz, und in `data` befinden sich neun Datens√§tze. Das Projekt kann durch einen Doppelklick auf das File `import-data.Rproj` ge√∂ffnet werden. 

Erstellen Sie zuerst ein `R Script`. In dieses File kommt der R Code, den wir benutzen, um die Files zu importieren. Sie k√∂nnen den Code aus den mit grauem Hintergrund gekennzeichneten Code Chunks kopieren. Wir werden zuerst den einzelnen Datensatz einlesen, und bearbeiten. Danach werden wir lernen, wie wir diese Schritte automatisch auf mehrere Datens√§tze anwenden.

<!-- <aside>
Falls Sie nur den R Code m√∂chten, k√∂nnen Sie das File hier downloaden:
üëâ [R Code](../../downloadable_files/import-data.R)
</aside> -->




# Einen Datensatz bearbeiten

Wir ben√∂togen f√ºr alle nachfolgenden Schritte zuerst das `tidyverse` Package.
```{r}
#| echo: true
#| message: false
#| warning: false

library(tidyverse)
```
 
<!-- <aside>
In Ihrem Rstudio Projekt ist dieses File im Ordner `testdata` gespeichert (Hier in einem Ordner names `data/rdktest`). Bitte passen Sie den Pfad dementsprechend an, oder verwenden Sie den Code aus dem R Script im RStudio Projekt.
</aside> -->

## CSV File importieren

Wir werden nun das File `ZZ_rdk-discrimination_2022_Mar_07_1403.csv` aus dem `testdata` Ordner einlesen. Bevor wir das tun, ist es sinnvoll, sich das File z.B. in Excel anschauen.

:::{.callout-tip}
√ñffnen Sie `ZZ_rdk-discrimination_2022_Mar_07_1403.csv` in Excel. 

Was steht in den Spalten? Was steht in den Zeilen?
:::



Nun k√∂nnen Sie entweder √ºber die GUI-Option (`Menu > File > Import Dataset > From text (readr)`) oder direkt das File einlesen. 

```{r}
#| message: false
#| warning: false

testdata <- read_csv("testdata/ZZ_rdk-discrimination_2022_Mar_07_1403.csv") 
```



### Variablen √ºberpr√ºfen

```{r}
glimpse(testdata)
```

## Practice Trials l√∂schen

Vielleicht haben Sie bemerkt, dass die ersten  6 Zeilen √úbungstrials sind. Diese wollen wir nicht analysieren, und k√∂nnen folglich gel√∂scht werden.
```{r}
#| message: false
#| warning: false
#| echo: false
library(kableExtra)

testdata |> 
  slice_head(n = 12) |> 
  kbl() |> 
  kable_paper("striped", full_width = FALSE) |> 
  column_spec(2:7, bold = TRUE) |> 
  row_spec(1:6, bold = TRUE, color = "white", background = "#D7261E")
```


Die Variable `main_blocks_loop.thisN` ist die Trialnummer. Diese k√∂nnen wir verwenden, um die Zeilen auszuschliessen, die nicht zum Main Block geh√∂ren -- bei den √úbungstrials ist der Wert `NA`. 


```{r}
#| echo: false
testdata |> 
  slice_head(n = 12) |> 
  select(starts_with("main_block")) |> 
  kbl() |> 
  kable_paper("striped", full_width = FALSE) |> 
  row_spec(1:7, bold = TRUE, color = "white", background = "#D7261E")
```

Mit folgendem Code filtern wir zuerst, so dass , bei wir nur noch Zeilen behalten, bei denen nicht der Wert `NA` in der Spalte `main_blocks_loop.thisN` steht. Dann w√§hlen wir alle Spalten ausser `practice_block_loop`.
```{r}
testdata <- testdata |> 
    filter(!is.na(main_blocks_loop.thisN)) |>
    select(-contains("practice_block_loop"))
```

:::{.callout-tip}
## ChatGPT

Falls Code nicht verst√§ndlich finden, k√∂nnen Sie [ChatGPT](https://chat.openai.com/chat) fragen. Benutzen Sie folgenden Prompt:

```
What does the following R code do? 

testdata <- testdata |> 
    filter(!is.na(main_blocks_loop.thisN)) |>
    select(-contains("practice_block_loop"))
```
:::

## Variablen ausw√§hlen

Die folgenden Variablen enthalten Informationen zu den Inter-Trial Intervallen, Fixationskreuzen, Feedback, etc, und sind f√ºr uns an dieser Stelle nicht interessant.

```{r}
testdata |>
    select(contains("static"),
           contains("fixation"),
           contains("image"),
           contains("instruction"),
           contains("feedback"))
```

Mit `select` k√∂nnen wir alle Variablen ausser diesen ausw√§hlen.

```{r}
testdata <- testdata |>
    select(-contains("static"),
           -contains("fixation"),
           -contains("image"),
           -contains("instruction"),
           -contains("feedback"))
```

```{r}
testdata
```

## Variablen umbenennen

Nun wollen Variablen identifizieren, die uns interessieren. Diese wollen wir umbenennen.

```{r}
testdata <- testdata |>
    select(trial = main_blocks_loop.thisN,
           ID = Pseudonym,
           cue,
           direction,
           response = dots_keyboard_response.keys,
           rt = dots_keyboard_response.rt)

```

```{r}
testdata
```

## Neue Variablen definieren

Nun wollen wir zwei neue Variablen erstellen: eine "character" Variable, die uns sagt, ob "rechts" oder "links" entschieden wurde, und eine numerische Variable mit derselben Information. Je nachdem, ob wir die Daten grafisch darstellen oder analysieren wollen, brauchen wir beide Variablen.

```{r}
testdata <- testdata |>
    mutate(choice = if_else(response == "j", "right", "left"),
           response = if_else(choice == "right", 1, 0))
```

Folgender Code l√∂st das gleiche Problem mit der Funktion `as.numeric()`. Fragen Sie ruhig ChatGPT, falls Sie den Code nicht verstehen.

```{r}
#| eval: false
testdata <- testdata |>
    mutate(choice = if_else(response == "j", "right", "left"),
           response = as.numeric(choice == "right"))
```




Wir erstellen ausserdem hier eine Variable, welche angibt, ob der Cue `valid`, `invalid` oder `neutral` war. Ein Cue ist genau dann valide, wenn er dieselbe Richtung hat wie der Random Dot Stimulus, d.h. wenn `cue == direction`.

```{r}
testdata <- testdata |>
    mutate(condition = case_when(cue == "none" ~ "neutral",
                                 cue == direction ~ "valid",
                                 cue != direction ~ "invalid"))
```


:::{.callout-tip}
## ChatGPT

What does the R function `case_when()` do?
:::

Zum Schluss erstellen wir noch eine Variable, welche festh√§lt, ob die Antwort der Versuchsperson korrekt war. 

```{r}
testdata <- testdata |>
    mutate(correct = as.numeric(choice == direction))
```

## Gruppierungsvariablen

```{r}
glimpse(testdata)
```

```{r}
testdata <- testdata |>
    mutate_if(is.character, as.factor)
```

```{r}
glimpse(testdata)
```

## Accuracy pro Bedingung

Wir k√∂nnen nun die _accuracy_ in jeder Cue-Bedingung berechnen. Es gibt hier zwei M√∂glichkeiten: wir berechen die Anzahl Trials (`N`), und die Anzahl korrekter Antworten (`ncorrect`) separat. Der Anteil korrekter Antworten ist dann einfach `ncorrect/N`. Dasselbe Ergebnis erhalten wir, wenn wir einfach den Mittelwert der korrekten Antworten nehmen.

```{r}
testaccuracy <- testdata |>
    group_by(condition) |>
    summarise(N = n(),
              ncorrect = sum(correct),
              accuracy = ncorrect/N,
              accuracy2 = mean(correct))

testaccuracy
```


