---
title: "Grafiken erstellen mit `ggplot`"
description: Wissenschaftliche Daten sichtbar machen.
date: "2023-04-03"
author:
  - name: Andrew Ellis
    url: https://github.com/awellis
    affiliation: Kognitive Psychologie, Wahrnehmung und Methodenlehre, Universit√§t Bern 
    affiliation-url: https://www.kog.psy.unibe.ch
    orcid: 0000-0002-2788-936X
  - name: Gerda Wyssen
    # url: https://github.com/awellis
    affiliation: Kognitive Psychologie, Wahrnehmung und Methodenlehre, Universit√§t Bern 
    affiliation-url: https://www.kog.psy.unibe.ch
    orcid: 0000-0001-7427-3149
license: CC BY
citation: true
bibliography: ../../bibliography_gw.bib
format:
    html:
        toc: true
        code-link: true
---

```{r}
#| include: false
# Set working directory of R
knitr::opts_knit$set(root.dir = '../../data')
getwd()
```

::: {.callout-tip collapse="false"}
## Lernziele

Erstellen eines (reproduzierbaren) Data Reports mit Datenvisualisierungen zu unserem Experiment.

-   das Erstellen von R Markdown Files
-   das Verwenden des `ggplot2`-packages
<!-- -   die Vor- und Nachteile verschiedener Formen von Datenvisualisierungen -->
<!-- -   was eine gute Grafik ausmacht -->
:::

<!-- ## Arten von Grafiken -->

<!-- Daten k√∂nnen ganz unterschiedlich dargestellt werden.  -->

<!-- -   Datenverarbeitung: Es k√∂nnen Rohwerte geplottet werden oder *summary statistics* (z.B. Mittelwerte, Standardabweichungen) -->
<!-- -   Anzahl Variablen: Es kann eine unterschiedliche Anzahl Variablen geplottet werden, z.B. nur eine Variable mit einem Histogramm oder mehrere, wie Reaktionszeit in einem 2x2 Design (3 Variablen). -->
<!-- -   Form der Grafik: Punkte, Linien, usw. -->

::: callout-caution
## Hands-on

Wir arbeiten heute in einem R-Markdown-File. So k√∂nnen wir Code und normalen Text verbinden, auch die Outputs des Codes (unsere Grafiken) werden anzeigt. Auf diese Weise erstellen wir reproduzierbare Grafiken.

-   √ñffnen Sie das RStudio-Project `dataviz`. Falls Sie diesen noch nicht heruntergeladen haben, laden Sie [hier](../../downloadable_files/data_viz.zip) den Projektordner herunter und entzippen Sie diesen.

-   √ñffnen Sie unter `File` \> `New File` \> `R Markdown ...` ein neues RMarkdown-File.

-   Geben Sie einen Titel und Ihren Namen ein und w√§hlen Sie `HTML`als Output-Format

-   Speichern Sie dass Dokument unter dem Namen `data_viz_example`ab.
:::

# Grafiken erstellen mit `ggplot`

Wir werden das package `ggplot2`in `R`verwenden. `gg`steht hierbei f√ºr *Grammar of Graphics*. Die anfangs etwas unintuitive Verwendung von `ggplot` l√§sst sich vereinfachen, wenn man ber√ºcksichtigt, dass Grafiken aus den unten beschriebenen Eigenschaften bestehen und sich damit beschreiben lassen.

<aside>Mit `ggplot`k√∂nnte man sogar Kunstwerke erstellen, wie bspw. [hier](https://www.data-imaginist.com/art) gezeigt wird.</aside>

Daten visualisieren erfordert:

-   **Daten**

-   **Geome**, also sichtbare Formen (*aesthetics),* z.B. Punkte, Linien oder Boxen.

-   **Koordinatensystem/Mapping**: wie sind Daten und Geome verbunden?

Weitere optionale Parameter sind:

-   Statistische Parameter

-   Position

-   Koordinatenfunktionen

-   **Facets**

-   Scales

-   **Themes**

Wir werden uns heute vor allem mit den Daten, Geomen und Mappings befassen. Zudem werden wir vor allem Facets und Themes genauer anschauen.

## Daten
 
Zuerst laden wir das `tidyverse` Package und lesen das im Ordner `data_example` gespeicherte `.csv` File ein und machen die Variable `dataset` zu einem Faktor. Wir schauen uns die Daten mit `glimpse()` an.

```{r}
#| message: false
#| warning: false
library(tidyverse)

data <- read.csv("../../data/data_example/DatasaurusDozen.csv") %>%
    mutate(condition = as.factor(condition))

glimpse(data)
```

### Datenformat

Am einfachsten ist das plotten, wenn die Daten im *long*-Format vorliegen. Jede Variable die gemessen/erhoben wird hat eine Spalte (z.B. Versuchspersonennummer, Reaktionszeit, Taste). Jede Messung hat eine Zeile. In unserem PsychoPy-Experiment entspricht dies einer Zeile pro Trial. Auch die hier eingelesenen Daten sind schon im *long*-Format. 

<aside> Falls die Daten im *wide*-Format abgespeichert sind, lohnt es sich diese umzuformatieren z.B. mit `pivot_longer()`. </aside>

### Variablen

Bevor wir weiterfahren, m√ºssen wir wissen, welche Variablen wir plotten m√∂chten und welches Skalenniveau diese Variablen haben. Je nach Anzahl Variablen und den entsprechenden Skalenniveaus eignen sich andere Grafik-Formen. 

![CC BY-SA 3.0, https://commons.wikimedia.org/w/index.php?curid=724035](/assets/images/Skalenniveau.png)

::: callout-caution
## Hands-on

Schauen Sie sich den Datensatz an. 

- Wie viele unterschiedliche Variablen gibt es? 
- Wie heissen die Variablen? 
- Welches Skalenniveau haben sie?

:::

### Subsetting

Manchmal m√∂chte man nur einen Teil der Daten plotten. Der Datensatz enth√§lt beispielsweise verschiedene Bedingungen, jeweils mit Werten f√ºr Variable `value1` und `value2`. Folgende 13 Bedingungen sind enthalten:

```{r}
unique(data$condition)
```

<!-- Wir k√∂nnen uns nun f√ºr jede Bedingung den Mittelwert und die Standardabweichung ausgeben lassen. -->

<!-- ```{r} -->
<!-- data_summary <- data %>% -->
<!--     group_by(dataset) %>% -->
<!--     summarise(mean_x = mean(x), -->
<!--               mean_y = mean(y), -->
<!--               sd_x = sd(x), -->
<!--               sd_y = sd(y))  -->

<!-- glimpse(data_summary) -->
<!-- ``` -->

F√ºrs erste entscheiden wir uns f√ºr die Bedingung `away`.

```{r}
data_away <- data %>%
    filter(condition == "away")
```


Wir k√∂nnen f√ºr diese Bedingung zus√§tzlich *summary statistics* berechnen, hier Mittelwert und Standardabweichung.

```{r}
data_away_summary <- data %>%
    summarise(mean_v1 = mean(value1),
              sd_v1 = sd(value1),
              mean_v2 = mean(value2),
              sd_v2 = sd(value2))

glimpse(data_away_summary)
```
Diese Werte geben Ihnen einen Anhaltspunkt, in welchem Bereich sich die Werte bewegen werden. 


### Plot

Die Daten der Bedingung `away` verwenden wir im Folgenden f√ºr die Beispiele. Wir geben in die Funktion `ggplot` also als erstes Argument `data = data_away` ein.

```{r}
ggplot(data = data_away)
```

Wir haben nun die Daten eingegeben, aber noch keine Formen und kein Mapping, deshalb ist die Grafik leer. 


## Geom / Formen

In `ggplot` wird die Form mit `geom_` hinzugef√ºgt. Beispielsweise werden mit `geom_point()` Punkte erstellt, mit `geom_line()` Linien, mit `geom_boxplot` Boxplots, usw. Bei der Wahl der passenden Form kommt es einerseits auf die Daten an. Sind die Daten nominal, ordinal, interval oder ratio skaliert? Wie viele Variablen werden gleichzeitig in die Grafik einbezogen? Andererseits ist es wichtig, was mit der Grafik gezeigt werden soll: Unterschiede? Gemeinsamkeiten? Ver√§nderungen √ºber Zeit? 

<aside>üëâ [Hier](https://github.com/rstudio/cheatsheets/blob/main/data-visualization.pdf) finden Sie das `ggplot`-Cheatsheet.</aside>

Oft verwendete Formen sind:

- Punkte / Scatterplots - `geom_point()`
- Linien - `geom_line()`

Oder wenn zusammenfassende Werte geplottet werden sollen:

- Histogramme - `geom_histogram()`
- Mittelwerte und Standardabweichungen - `geom_pointrange()`
- Dichte - `geom_density()`
- Boxplots - `geom_boxplot()`
- Violinplots - `geom_violin()`

Es gibt auch weitere Arten informative Arten der Darstellung wie *heat maps* oder *shift functions*, auf die wir in dieser Veranstaltung nicht eingehen.

::: callout-caution
## Hands-on

Welche `geoms` eignen sich f√ºr welches Skalenniveau und welche Variablenanzahl?

Schauen Sie sich die verschiedenen Formen von Plots [hier](https://www.data-to-viz.com) an. 

:::

Wenn wir nun aber 

```
ggplot(data = data_away) +
    geom_point()
```
ausf√ºhren w√ºrden, erg√§be das  eine Fehlermeldung. Wir haben n√§mlich nicht angegeben, wie die Daten mit `geom` verbunden werden soll: Das `mapping` fehlt.

## Mapping

Jede `geom`-Funktion in `ggplot` ben√∂tigt Angaben zum `mapping`. Damit wird definiert, wie die Variablen auf die Formen (*aesthetics*) gemappt werden sollen. Am einfachsten geht das, wenn wir dies zu Beginn festlegen (wir k√∂nnten es auch in der Funktion `geom_` eingeben). Wir geben ein welche Variable auf der x-Achse und auf der y-Achse abgetragen werden soll. Eine weitere Variable k√∂nnten wir hier als `group = ...` oder `color = ...` einf√ºgen.

```{r}
ggplot(data = data_away,
       mapping = aes(x = value1,
                     y = value2))
```

Jetzt k√∂nnen wir das `geom` hinzuf√ºgen:

```{r}
ggplot(data = data_away,
       mapping = aes(x = value1,
                     y = value2)) +
    geom_point()
```

## Beschriftungen und Themes

Sch√∂nere und informativere Plots lassen sich gestalten, wenn wir einen Titel hinzuf√ºgen, die Achsenbeschriftung anpassen und das `theme` ver√§ndern:

```{r}

ggplot(data = data_away,
       mapping = aes(x = value1,
                     y = value2)) +
    geom_point() +
    ggtitle ("Ein etwas sch√∂nerer Plot") +
    xlab("Wert 1 [a.u.]") +
    ylab("Wert 2 [a.u.]") +
    theme_minimal()

```
<aside> Auch `theme_classic` oder `theme_bw` eignen sich gut. </aside>

# Daten plotten: Hands on

Im Folgenden k√∂nnen Sie den Datensatz mit Grafiken erkunden. Sie k√∂nnen entweder in Ihrem R Markdown File weiterarbeiten oder Sie k√∂nnen ein GUI (graphical user interface) verwenden, dass f√ºr Sie den Code schreibt.


::: callout-note
## GUI
Falls Sie ein GUI verwenden m√∂chten, gehen Sie wie folgt vor: 

- Installieren Sie das package `esquisse` mit `install.packages("esquisse")` in Ihrer Konsole oder √ºber `Tools` > `Install packages...`

- Geben Sie in Ihrer Konsole `esquisse::esquisser()` ein und w√§hlen Sie dann unter `Import Data` den Datensatz `DatasaurusDozen.csv` aus
:::

<aside>Ein weiteres `R`-basiertes Visualisierungstool in welchem der Code per GUI erstellt wird, ist [trelliscopejs](https://hafen.github.io/trelliscopejs/)</aside>


::: callout-caution
## Hands-on

- Welche `geom_`s/Formen eignen sich gut f√ºr diesen Datensatz? 

- Welche Abbildungen k√∂nnen alle 3 Variablen des Datensatzes ber√ºcksichtigen?

- Wie kann man Bedingungen miteinander vergleichen?

- Wie k√∂nnen Gr√∂sse und Farbe der Geome bestimmt werden?

- Wie passt man Schriftgr√∂ssen an?

- K√∂nnen Sie eine Grafik speichern?

Erstellen Sie eine m√∂glichst informative Grafik. Kopieren Sie den Code in das R Markdown File. Dieser Code dient Ihnen n√§chste Woche evtl. als gute Vorlage.

:::

## Weitere hilfreiche Informationen

- [Dokumentation](https://ggplot2.tidyverse.org/) von `ggplot2`

- Kurzweilige, sehr informative Informationen und Videos √ºber das Erstellen von Grafiken in `ggplot` finden Sie hier: [Website Psy TeachR: Data Skills for reproducible research](https://psyteachr.github.io/reprores-v3)

- [Hier](https://youtu.be/90IdULVGmYY) ist der Start der PsyTeachR Videoliste von Lisa deBruine, dort finden sich auch hilfreiche Kurzvideos zu Themen von Daten einlesen bis zu statistischen Analysen. Beispielsweise zu [Basic Plots](https://youtu.be/tOFQFPRgZ3M), [Common Plots](https://youtu.be/kKlQupjD__g) und [Plot Themes and Customization](https://youtu.be/6pHuCbOh86s)

- [Einf√ºhrung in R](https://methodenlehre.github.io/einfuehrung-in-R/chapters/05-plotting.html) von Andrew Ellis und Boris Mayer

