---
title: "√úbung 4"
description: |
   Untersuchung eines pr√§symptomatischen Indikators f√ºr die Alzheimer-Krankheit
date: "2022-05-05"
author:
  - name: Andrew Ellis
    url: https://github.com/awellis
    affiliation: Kognitive Psychologie, Wahrnehmung und Methodenlehre, Universit√§t Bern 
    affiliation-url: https://www.kog.psy.unibe.ch
    orcid: 0000-0002-2788-936X
license: CC BY
citation: true
bibliography: ../../bibliography.bib
format:
    html:
        toc: true
        code-link: true
execute: 
  cache: false
code-annotations: select
---

```{r}
#| include: false
# Set working directory of R
knitr::opts_knit$set(root.dir = '../../data/uebung-4')
```



:::{.callout-tip}
## RStudio Projekt

üëâ [RStudio Projekt f√ºr diese √úbung herunterladen](../../downloadable_files/amyloidSDT.zip)

Sie finden darin ein Rmarkdown-File, welches Sie bearbeiten m√ºssen, und den Datensatz. 
:::


:::{.callout-tip collapse="false"}
## Aufgaben
Die √úbung 4 besteht aus den zwei folgenden Aufgaben:

**1. Rmarkdown-File ausf√ºhren**: In diesem File werden die Daten eingelesen, SDT Kennzahlen berechnet und Grafiken erstellt. Beantworten Sie die Fragen direkt im Rmarkdown-File. Das Rmarkdown-File muss von einer anderen Person ausgef√ºhrt werden k√∂nnen (Reproduzierbarkeit). Zeit: 1 Woche.

**2. Peer Feedback**: Mittels Ilias wird Ihnen das Rmarkdown-File einer anderen Person zugeordnet. Ihr Auftrag ist es, dieses Rmarkdown-File auszuf√ºhren und Feedback zu geben. Zeit: 1 Woche.
:::



## Einleitung
In √úbung 4 arbeiten wir mit einem klinischen Datensatz. Das Ziel ist es, Sensitivit√§t und Bias f√ºr zwei Gruppen von insgesamt 60 Patienten zu untersuchen, die sich in ihrem Risiko f√ºr Alzheimer-Krankheit unterscheiden. 

Die Anwesenheit von [Beta-Amyloid](https://de.wikipedia.org/wiki/Beta-Amyloid) wurde durch einen [Bluttest](https://www.nia.nih.gov/news/blood-test-can-predict-presence-beta-amyloid-brain-new-study-finds) untersucht. Ein positiver Beta-Amyloid Test gilt als pr√§symptomatischer Indikator f√ºr die Alzheimer-Krankheit.

Aufgrund dieses Bluttests wurden die Patienten in zwei Gruppen eingeteilt. Es soll nun untersucht werden, ob sich die beiden in ihrer Ged√§chtnisleistung unterscheiden. 

Dazu wurde der "Rey auditory verbal learning test" (RALVT: Bean, 2011) durchgef√ºhrt. 

In diesem Test m√ºssen Patienten zuerst eine Liste bestehend aus 15 W√∂rtern lernen. Sie werden danach mit 30 W√∂rtern getestet (15 alte, 15 neue W√∂rter) und m√ºssen angeben, ob ein Wort auf der Liste war oder nicht (alt/neu). 

Die Antworten der Patienten wurden bereits als als korrekte oder inkorrekte 'Ja'-Antworten klassifiziert (`hits`  und `false alarms`). 

## Packages laden

```{r load-packages, echo=TRUE, message=FALSE, warning=FALSE}
library(tidyverse)
library(patchwork)
```


## Daten laden

```{r}
d <- read_csv("data/amyloidSDT.csv")
```

Immer zuerst Daten anschauen. 
```{r}
d
```

Im Datensatz halben wir folgende Variablen: 


- `ID`: Patienten-ID
- `group`: Indikator f√ºr Beta-Amyloid Bluttest (Negative oder Positive)
- `hit`: Anzahl hits
- `miss`: Anzahl misses
- `fa`: Anzahl false alarms
- `cr`: Anzahl correct rejections


Im Datensatz gibt es es einige Nullen -- z.B. hat die Person mit der `ID` 1 keine False Alarms. Dies ist problematisch, weil wir die relative H√§ufigkeiten von Hits (`hit_rate`) und False Alarms (`fa_rate`) berechnen und anschliessen diese z-transformieren wollen. Die `fa_rate` ist der Anteil 'Ja'-Antworten wenn das Wort tats√§chlich aber nicht auf der Liste war, also `fa / (fa + cr)`. Bei der ersten Person w√§re dies `0/(0 + 15) = 0`. 

Das Problem ist nun, dass die relative H√§ufigkeit hier als $0$ gesch√§tzt wird - eine Wahrscheinlichkeit darf aber eigentlich nicht $0$ sein, sondern liegt zwischen $-\infty$ und $\infty$. Wenn wir `qnorm()` (die Quantilfunktion der Normalverteilung) auf den Wert $0$ anwenden, erhalten wir:

```{r}
qnorm(0)
```

Damit k√∂nnen wir nicht weiterrechnen. Wir wenden daher einen Trick an: wir addieren einfach zu jeder Zelle im Datensatz den Wert $0.5$. Somit erhalten wir f√ºr die `fa_rate` der ersten Person:

```{r}
0 + 0.5 / (0 + 0.5 + 15 + 0.5)
```


Dies bedeutet, dass wir einen kleine Wahrscheinlichkeit erhalten; diese ist aber nicht Null. Diesen Wert k√∂nnen wir nun in `qnorm()` einsetzen.

```{r}
qnorm(0.03125)
```

## Den Wert `0` ersetzen

```{r}
add_half_count <- function(count) {
    count + 0.5
}
```

```{r}
d <- d |>
    mutate(across(c(hit, miss, fa, cr), add_half_count))
```

## Hit und False Alarm Rate berechnen

```{r}
d <- d |>
    mutate(
        hit_rate = hit / (hit + miss),
        fa_rate = fa / (fa + cr)
    )
```


## Hit Rate vs False Alarm Rate

Bevor wir die SDT Kennzahlen berechnen, stellen wir die hit rate und false alarm rate grafisch dar:

```{r}
d |>
      ggplot(aes(fa_rate, hit_rate, color = group)) +
      geom_abline(intercept = 0, slope = 1, linetype = 2) +
      geom_jitter() +
      scale_color_viridis_d(direction = -1, begin = 0.1, end = 0.8) +
      facet_wrap(~ group) +
      xlim(c(0, 1)) +
      theme_linedraw()
```

## d' und bias berechnen

```{r}
d <- d |>
    mutate(
        zhr = qnorm(hit_rate),
        zfa = qnorm(fa_rate)
    )
```


```{r}
d <- d |>
    mutate(
        dprime = zhr - zfa,
        k = -zfa,
        c = -0.5 * (zhr + zfa)
    )
```

Wir runden nun `dprime, k` und `c` auf zwei Nachkommastellen.

```{r}
d <- d |>
    mutate(across(c(dprime, k, c), \(x) round(x, 2)))
```


```{r}
d
```




## Aggregierte Kennzahlen
```{r}
se <- function(x) {
  sd(x) / sqrt(length(x))
}
```

```{r}
dprimes <- d |>
  select(group, dprime) |> 
  group_by(group) |> 
  summarize(mean = mean(dprime),
            se = se(dprime))
```

```{r}
cs <- d |> 
  select(group, c) |> 
  group_by(group) |> 
  summarize(mean = mean(c),
            se = se(c))
```


## Grafische Darstellung von `d'` und `bias`

```{r}
p_dprimes <- dprimes |>
  ggplot(aes(x=group, y=mean, group=1)) +
    geom_jitter(aes(group, dprime), alpha = 0.1, data = d, width = 0.05) +
    geom_line() +
    geom_errorbar(width=.1, aes(ymin=mean-se, ymax=mean+se), colour="black") +
    geom_point(shape=21, size=3, fill="white") +
    ylab("Sensitivity")
```

```{r}
p_cs <- cs |>
    ggplot(aes(x=group, y=mean, group=1)) +
    geom_jitter(aes(group, c), alpha = 0.1, data = d, width = 0.05) +
    geom_line() +
    geom_errorbar(width=.1, aes(ymin=mean-se, ymax=mean+se), colour="black") +
    geom_point(shape=21, size=3, fill="white") +
    ylab("Bias")
```

```{r}
p_dprimes + p_cs
```

## Fragen

Bitte versuchen Sie, folgende Fragen so gut wie m√∂glich zu beantworten. Schreiben Sie Ihre Antworten direkt unter die Fragen.


### Frage 1 
>Wie unterscheiden sich die Gruppen in der `hit rate` und `false alarm rate` (siehe erste Grafik)?

**Antwort**:  

### Frage 2 
> Wie unterscheidet sich die Sensitivit√§t zwischen den Gruppen im RALVT? Was k√∂nnte das bedeuten? Denken Sie, dass der Unterschied von relevanter Gr√∂sse ist?
 
**Antwort**: 

### Frage 3 
> Wie unterscheidet sich die Antworttendenz zwischen den Gruppen im RALVT? Was k√∂nnte das bedeuten? Denken Sie, dass der Unterschied von relevanter Gr√∂sse ist? 
 
**Antwort**: 

### Frage 4 
> Wie denken Sie h√§ngen Sensitivit√§t und Antworttendenz in diesem Experiment zusammen? Was k√∂nnten die Gr√ºnde sein? Was passiert, wenn d' kleiner wird, das Kriterium k aber konstant bleibt? Eventuell hilft diese Grafik, um dar√ºber nachzudenken.

```{r echo=FALSE}
p_scatter <- d |>
    ggplot(aes(c, dprime, color = group)) +
    geom_jitter(width = 0.8) +
    scale_color_viridis_d(direction = -1, begin = 0.1, end = 0.8) +
    theme_linedraw() +
    ggtitle("Scatterplot: bias vs sensitivity")
```

```{r echo=FALSE, message=FALSE, warning=FALSE}
xlims <- c(-4.5, 4.5)
alpha <- c(0.6, 0.2)

colors <- c("orange", "purple")

dprime <- 1.6
criterion <- 1.2

p1 <- tibble(x = seq(xlims[1], xlims[2], by = 0.1)) |> 
    ggplot(aes(x)) +
    stat_function(fun = dnorm, colour = colors[1], 
                  args = list(mean = 0, sd = 1),
                  linewidth = 1.5) +
    stat_function(fun = dnorm, colour = colors[2], 
                  args = list(mean = dprime, sd = 1),
                  linewidth = 1.5) +
    geom_vline(xintercept = c(0, dprime), linewidth = 1,
               linetype = "dotted", alpha =  0.4) +
    scale_y_continuous(breaks = NULL) +
    scale_x_continuous(labels = NULL) +
    labs(x = "Familarity", y = "") +
    annotate("text", 
           x = 0.5, 
           y = dnorm(dprime, mean = dprime, sd = 1) + 0.03,
           label = "d'", 
           size = 6) +
    annotate("segment", x = 0, 
                 xend = dprime, 
                 y = dnorm(dprime, mean = dprime, sd = 1) + 0.01, 
                 yend = dnorm(dprime/2, mean = dprime/2, sd = 1) + 0.01,
           linewidth = 1) +
    annotate("text", 
           x = -0.4, 
           y = dnorm(dprime, mean = dprime, sd = 1) + 0.03,
           label = "new", 
           size = 6, 
           color = "grey60") +
      annotate("text", 
           x = 1.8, 
           y = dnorm(dprime, mean = dprime, sd = 1) + 0.03,
           label = "old", 
           size = 6, 
           color = "grey60") +
    xlim(c(xlims[1], xlims[2])) +
  theme_linedraw()
p2 <- p1 + 
  geom_vline(xintercept = 0, linewidth = 1, 
               alpha = 0.4,
             linetype = "dashed") +
  geom_area(stat = "function", fun = dnorm, 
              args = list(mean = 0, sd = 1),
              fill = colors[1], alpha = 0.6,
              xlim = c(criterion, xlims[2])) +

  geom_area(stat = "function", fun = dnorm, 
              args = list(mean = dprime, sd = 1),
              fill = colors[2], alpha = alpha[2],
              xlim = c(criterion, xlims[2])) +
  geom_vline(xintercept = criterion, linewidth = 1, 
               linetype = 1) +
    annotate("text", 
           x = 1,
           y = 0.02,
           label = "k", 
           size = 6)
```

```{r echo=FALSE, message=FALSE, warning=FALSE}
dprime <- 0.6
criterion <- 1.2

p3 <- tibble(x = seq(xlims[1], xlims[2], by = 0.1)) |> 
    ggplot(aes(x)) +
    stat_function(fun = dnorm, colour = colors[1], 
                  args = list(mean = 0, sd = 1),
                  linewidth = 1.5) +
    stat_function(fun = dnorm, colour = colors[2], 
                  args = list(mean = dprime, sd = 1),
                  linewidth = 1.5) +
    geom_vline(xintercept = c(0, dprime), linewidth = 1,
               linetype = "dotted", alpha =  0.4) +
    scale_y_continuous(breaks = NULL) +
    scale_x_continuous(labels = NULL) +
    labs(x = "Familarity", y = "") +
    annotate("text", 
           x = 0.5, 
           y = dnorm(dprime, mean = dprime, sd = 1) + 0.03,
           label = "d'", 
           size = 6) +
    annotate("segment", x = 0, 
                 xend = dprime, 
                 y = dnorm(dprime, mean = dprime, sd = 1) + 0.01, 
                 yend = dnorm(dprime/2, mean = dprime/2, sd = 1) + 0.01,
           linewidth = 1) +
    annotate("text", 
           x = -0.4, 
           y = dnorm(dprime, mean = dprime, sd = 1) + 0.03,
           label = "new", 
           size = 6, 
           color = "grey60") +
      annotate("text", 
           x = 1.8, 
           y = dnorm(dprime, mean = dprime, sd = 1) + 0.03,
           label = "old", 
           size = 6, 
           color = "grey60") +
    xlim(c(xlims[1], xlims[2])) +
  theme_linedraw()
p4 <- p3 + 
  geom_vline(xintercept = 0, linewidth = 1, 
               alpha = 0.4,
             linetype = "dashed") +
  geom_area(stat = "function", fun = dnorm, 
              args = list(mean = 0, sd = 1),
              fill = colors[1], alpha = 0.6,
              xlim = c(criterion, xlims[2])) +

  geom_area(stat = "function", fun = dnorm, 
              args = list(mean = dprime, sd = 1),
              fill = colors[2], alpha = alpha[2],
              xlim = c(criterion, xlims[2])) +
  geom_vline(xintercept = criterion, linewidth = 1, 
               linetype = 1) +
    annotate("text", 
           x = 1,
           y = 0.02,
           label = "k", 
           size = 6)
```


```{r echo=FALSE, message=FALSE, warning=FALSE}
p2 / p4
```



## Fragen f√ºr Peer Review

√ñffnen Sie das `.Rmd`-File und f√ºhren Sie es mit `Knit` oder von oben bis unten aus und schreiben Sie zu den Antworten eine R√ºckmeldung in ein Word/Text-File.


## Hochladen

Laden Sie Ihr Peer Review anschliessend als Word/Text-File auf Ilias hoch.