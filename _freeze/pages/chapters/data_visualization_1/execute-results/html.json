{
  "hash": "89669fe8b17588b343e0f578d9ec0386",
  "result": {
    "markdown": "---\ntitle: \"Grafiken erstellen mit `ggplot`\"\ndescription: Wissenschaftliche Daten sichtbar machen.\ndate: \"2023-04-03\"\nauthor:\n  - name: Gerda Wyssen\n    # url: https://github.com/awellis\n    affiliation: Kognitive Psychologie, Wahrnehmung und Methodenlehre, Universit√§t Bern \n    affiliation-url: https://www.kog.psy.unibe.ch\n    orcid: 0000-0001-7427-3149\nlicense: CC BY\ncitation: true\nbibliography: ../../bibliography_gw.bib\nformat:\n    html:\n        toc: true\n        code-link: true\n---\n\n\n\n\n::: {.callout-tip collapse=\"false\"}\n## Lernziele\n\nErstellen eines (reproduzierbaren) Data Reports mit Datenvisualisierungen zu unserem Experiment.\n\n-   das Erstellen von R Markdown Files\n-   das Verwenden des `ggplot2`-packages\n\n:::\n\n::: callout-caution\n## Hands-on\n\nWir arbeiten heute in einem R-Markdown-File. So k√∂nnen wir Code und normalen Text verbinden, auch die Outputs des Codes (unsere Grafiken) werden anzeigt. Auf diese Weise erstellen wir reproduzierbare Grafiken.\n\n-   √ñffnen Sie das RStudio-Project `dataviz`. Falls Sie diesen noch nicht heruntergeladen haben, laden Sie [hier](../../downloadable_files/data_viz.zip) den Projektordner herunter und entzippen Sie diesen.\n\n-   √ñffnen Sie unter `File` \\> `New File` \\> `R Markdown ...` ein neues RMarkdown-File.\n\n-   Geben Sie einen Titel und Ihren Namen ein und w√§hlen Sie `HTML`als Output-Format\n\n-   Speichern Sie dass Dokument unter dem Namen `data_viz_example`ab.\n:::\n\n\n# Grafiken erstellen mit `ggplot`\n\nWir werden das package `ggplot2`in `R`verwenden. `gg`steht hierbei f√ºr *Grammar of Graphics*. Der anfangs oft etwas unintuitive Aufbauvon `ggplot` l√§sst sich vereinfachen, wenn man ber√ºcksichtigt, dass Grafiken aus den unten beschriebenen Bauteilen zusammengesetzt werden und sich damit vollst√§ndig beschreiben lassen.\n\n<aside>Mit `ggplot`k√∂nnte man sogar Kunstwerke erstellen, wie bspw. [hier](https://www.data-imaginist.com/art) gezeigt wird.</aside>\n\nDaten visualisieren erfordert:\n\n-   **Daten**\n\n-   **Geome**, also sichtbare Formen (*aesthetics*), z.B. Punkte, Linien oder Boxen.\n\n-   **Koordinatensystem/Mapping**: wie sind Daten und Geome verbunden?\n\nWeitere optionale Parameter sind:\n\n-   Statistische Parameter\n\n-   Position\n\n-   Koordinatenfunktionen\n\n-   **Facets**\n\n-   Scales\n\n-   **Themes**\n\nWir werden uns heute vor allem mit den Daten, Geomen und Mappings befassen. Zudem werden wir vor allem Facets und Themes genauer anschauen.\n\n## Daten\n \nZuerst laden wir das `tidyverse` Package und lesen das im Ordner `data_example` gespeicherte `.csv` File ein und machen die Variable `condition` zu einem Faktor. Wir schauen uns die Daten mit `glimpse()` an. Passen Sie hierzu den Datei-Pfad an Ihren Ordner an.\n\n<aside>Der verwendete Datensatz stammt von @matejka_same_2017. </aside>\n\n\n::: {.cell hash='data_visualization_1_cache/html/unnamed-chunk-2_4ad02b79365633cd479b80986b591a55'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\ndata <- read.csv(\"../../data/data_example/DatasaurusDozen.csv\") %>%\n    mutate(condition = as.factor(condition))\n\nglimpse(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,846\nColumns: 3\n$ condition <fct> away, away, away, away, away, away, away, away, away, away, ‚Ä¶\n$ value1    <dbl> 32.33111, 53.42146, 63.92020, 70.28951, 34.11883, 67.67072, ‚Ä¶\n$ value2    <dbl> 61.411101, 26.186880, 30.832194, 82.533649, 45.734551, 37.11‚Ä¶\n```\n:::\n:::\n\n\n### Datenformat\n\nAm einfachsten ist das plotten, wenn die Daten im *long*-Format vorliegen. Das bedeutet:\n\n- Jede Variable die gemessen/erhoben wird hat eine Spalte (z.B. Versuchspersonennummer, Reaktionszeit, Taste). \n- Jede Messung hat eine Zeile. In unserem PsychoPy-Experiment entspricht dies einer Zeile pro Trial. \n\nDie hier eingelesenen Daten sind schon im *long*-Format. \n\n<aside> Falls die Daten im *wide*-Format abgespeichert sind, lohnt es sich diese umzuformatieren z.B. mit `pivot_longer()`. </aside>\n\n### Variablen\n\nBevor wir weiterfahren, m√ºssen wir wissen, welche Variablen wir plotten m√∂chten und welches Skalenniveau diese Variablen haben. Je nach Anzahl Variablen und den entsprechenden Skalenniveaus eignen sich andere Grafik-Formen. \n\n![CC BY-SA 3.0, https://commons.wikimedia.org/w/index.php?curid=724035](/assets/images/Skalenniveau.png)\n\n::: callout-caution\n## Hands-on\n\nSchauen Sie sich den Datensatz an. \n\n- Wie viele unterschiedliche Variablen gibt es? \n- Wie heissen die Variablen? \n- Welches Skalenniveau haben sie?\n\n:::\n\n### Subsetting\n\nManchmal m√∂chte man nur einen Teil der Daten plotten. Der aktuelle Datensatz enth√§lt beispielsweise verschiedene Bedingungen, jeweils mit Werten f√ºr Variable `value1` und `value2`. Folgende 13 Bedingungen sind enthalten:\n\n\n::: {.cell hash='data_visualization_1_cache/html/unnamed-chunk-3_1d58e657755fac1722ea16fb211d8d19'}\n\n```{.r .cell-code}\nunique(data$condition)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] away       bullseye   circle     dino       dots       h_lines   \n [7] high_lines slant_down slant_up   star       v_lines    wide_lines\n[13] x_shape   \n13 Levels: away bullseye circle dino dots h_lines high_lines ... x_shape\n```\n:::\n:::\n\n\n<!-- Wir k√∂nnen uns nun f√ºr jede Bedingung den Mittelwert und die Standardabweichung ausgeben lassen. -->\n\n<!-- ```{r} -->\n<!-- data_summary <- data %>% -->\n<!--     group_by(dataset) %>% -->\n<!--     summarise(mean_x = mean(x), -->\n<!--               mean_y = mean(y), -->\n<!--               sd_x = sd(x), -->\n<!--               sd_y = sd(y))  -->\n\n<!-- glimpse(data_summary) -->\n<!-- ``` -->\n\nF√ºrs erste entscheiden wir uns f√ºr die Bedingung `away`.\n\n\n::: {.cell hash='data_visualization_1_cache/html/unnamed-chunk-4_c72714cdc1f80f280f68365249af1710'}\n\n```{.r .cell-code}\ndata_away <- data %>%\n    filter(condition == \"away\")\n```\n:::\n\n\n\nWir k√∂nnen f√ºr diese Bedingung zus√§tzlich *summary statistics* berechnen, hier Mittelwert und Standardabweichung.\n\n\n::: {.cell hash='data_visualization_1_cache/html/unnamed-chunk-5_11003f9415e44cf4ccadeafb1ae4240a'}\n\n```{.r .cell-code}\ndata_away_summary <- data %>%\n    summarise(mean_v1 = mean(value1),\n              sd_v1 = sd(value1),\n              mean_v2 = mean(value2),\n              sd_v2 = sd(value2))\n\nglimpse(data_away_summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1\nColumns: 4\n$ mean_v1 <dbl> 54.2657\n$ sd_v1   <dbl> 16.713\n$ mean_v2 <dbl> 47.8351\n$ sd_v2   <dbl> 26.84777\n```\n:::\n:::\n\nDiese Werte geben Ihnen einen Anhaltspunkt, in welchem Bereich sich die Werte bewegen werden. \n\n\n### Plot\n\nIn den folgenden Beispielen verwenden wir die Daten der Bedingung `away`. Wir geben in die Funktion `ggplot` als erstes Argument `data = data_away` ein.\n\n\n::: {.cell hash='data_visualization_1_cache/html/unnamed-chunk-6_51ae0a976be12a4dbcfaeca53fba58c6'}\n\n```{.r .cell-code}\nggplot(data = data_away)\n```\n\n::: {.cell-output-display}\n![](data_visualization_1_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nWir haben nun die Daten eingegeben, aber noch keine Formen und kein Mapping, deshalb ist die Grafik leer. \n\n\n## Geom / Formen\n\nIn `ggplot` wird die Form mit `geom_` hinzugef√ºgt. Beispielsweise werden mit `geom_point()` Punkte erstellt, mit `geom_line()` Linien, mit `geom_boxplot` Boxplots, usw. Bei der Wahl der passenden Form kommt es einerseits auf die Daten an. Sind die Daten nominal, ordinal, interval oder ratio skaliert? Wie viele Variablen werden gleichzeitig in die Grafik einbezogen? Andererseits ist es wichtig, was mit der Grafik gezeigt werden soll: Unterschiede? Gemeinsamkeiten? Ver√§nderungen √ºber Zeit? \n\nOft verwendete Formen sind:\n\n- Punkte / Scatterplots - `geom_point()`\n- Linien - `geom_line()`\n\nOder wenn zusammenfassende Werte geplottet werden sollen:\n\n- Histogramme - `geom_histogram()`\n- Mittelwerte und Standardabweichungen - `geom_pointrange()`\n- Dichte - `geom_density()`\n- Boxplots - `geom_boxplot()`\n- Violinplots - `geom_violin()`\n\n<aside>Es gibt auch weitere Arten informative Arten der Darstellung wie *heat maps* oder *shift functions*, auf die wir in dieser Veranstaltung nicht eingehen.</aside>\n\n::: callout-caution\n## Hands-on\n\nWelche `geoms` eignen sich f√ºr welches Skalenniveau und welche Variablenanzahl?\n\nüëâ [Hier](https://github.com/rstudio/cheatsheets/blob/main/data-visualization.pdf) finden Sie das `ggplot`-Cheatsheet.\n\nSchauen Sie sich die verschiedenen Formen von Plots [hier](https://www.data-to-viz.com) an. \n\n:::\n\nWenn wir nun aber \n\n```\nggplot(data = data_away) +\n    geom_point()\n```\nausf√ºhren w√ºrden, erg√§be das  eine Fehlermeldung. Wir haben n√§mlich nicht angegeben, wie die Daten mit `geom` verbunden werden soll: Das `mapping` fehlt.\n\n## Mapping\n\nJede `geom`-Funktion in `ggplot` ben√∂tigt Angaben zum `mapping`. Damit wird definiert, wie die Variablen auf die Formen (*aesthetics*) gemappt werden sollen. Am einfachsten geht das, wenn wir dies zu Beginn festlegen (wir k√∂nnten es auch in der Funktion `geom_` eingeben). Wir geben ein welche Variable auf der x-Achse und auf der y-Achse abgetragen werden soll. Eine weitere Variable k√∂nnten wir hier als `group = ...` oder `color = ...` einf√ºgen.\n\n\n::: {.cell hash='data_visualization_1_cache/html/unnamed-chunk-7_5c302bd1266b7a8dec23e348e71410fa'}\n\n```{.r .cell-code}\nggplot(data = data_away,\n       mapping = aes(x = value1,\n                     y = value2))\n```\n\n::: {.cell-output-display}\n![](data_visualization_1_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nJetzt k√∂nnen wir das `geom` hinzuf√ºgen:\n\n\n::: {.cell hash='data_visualization_1_cache/html/unnamed-chunk-8_7ac76677662fc924a330ddc263588eff'}\n\n```{.r .cell-code}\nggplot(data = data_away,\n       mapping = aes(x = value1,\n                     y = value2)) +\n    geom_point()\n```\n\n::: {.cell-output-display}\n![](data_visualization_1_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## Beschriftungen und Themes\n\nSch√∂nere und informativere Plots lassen sich gestalten, wenn wir einen Titel hinzuf√ºgen, die Achsenbeschriftung anpassen und das `theme` ver√§ndern:\n\n\n::: {.cell hash='data_visualization_1_cache/html/unnamed-chunk-9_57577d45340fb8082723af0e2f75c1c3'}\n\n```{.r .cell-code}\nggplot(data = data_away,\n       mapping = aes(x = value1,\n                     y = value2)) +\n    geom_point() +\n    ggtitle (\"Ein etwas sch√∂nerer Plot\") +\n    xlab(\"Wert 1 [a.u.]\") +\n    ylab(\"Wert 2 [a.u.]\") +\n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![](data_visualization_1_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n<aside> Auch `theme_classic` oder `theme_bw` eignen sich gut. </aside>\n\n# Daten plotten: Hands on\n\nIm Folgenden k√∂nnen Sie den Datensatz mit Grafiken erkunden. Sie k√∂nnen entweder in Ihrem R Markdown File weiterarbeiten oder Sie k√∂nnen ein GUI (graphical user interface) verwenden, dass f√ºr Sie den Code schreibt.\n\n\n::: callout-note\n## GUI\nFalls Sie ein GUI verwenden m√∂chten, gehen Sie wie folgt vor: \n\n- Installieren Sie das package `esquisse` mit `install.packages(\"esquisse\")` in Ihrer Konsole oder √ºber `Tools` > `Install packages...`\n\n- Geben Sie in Ihrer Konsole `esquisse::esquisser()` ein und w√§hlen Sie dann unter `Import Data` den Datensatz `DatasaurusDozen.csv` aus\n:::\n\n<aside>Ein weiteres `R`-basiertes Visualisierungstool in welchem der Code per GUI erstellt wird, ist [trelliscopejs](https://hafen.github.io/trelliscopejs/)</aside>\n\n\n::: callout-caution\n## Hands-on\n\n- Welche `geom_`s/Formen eignen sich gut f√ºr diesen Datensatz? \n\n- Welche Abbildungen k√∂nnen alle 3 Variablen des Datensatzes ber√ºcksichtigen?\n\n- Wie kann man Bedingungen miteinander vergleichen?\n\n- Wie k√∂nnen Gr√∂sse und Farbe der Geome bestimmt werden?\n\n- Wie passt man Schriftgr√∂ssen an?\n\n- K√∂nnen Sie eine Grafik speichern?\n\nErstellen Sie eine m√∂glichst informative Grafik. Kopieren Sie den Code in das R Markdown File. Dieser Code dient Ihnen n√§chste Woche evtl. als gute Vorlage.\n\n:::\n\n## Weitere hilfreiche Informationen\n\n- [Dokumentation](https://ggplot2.tidyverse.org/) von `ggplot2`\n\n- Kurzweilige, sehr informative Informationen und Videos √ºber das Erstellen von Grafiken in `ggplot` finden Sie hier: [Website PsyTeachR: Data Skills for reproducible research](https://psyteachr.github.io/reprores-v3)\n\n- [Hier](https://youtu.be/90IdULVGmYY) ist der Start der PsyTeachR Videoliste von Lisa deBruine, dort finden sich auch hilfreiche Kurzvideos zu Themen von Daten einlesen bis zu statistischen Analysen. Beispielsweise zu [Basic Plots](https://youtu.be/tOFQFPRgZ3M), [Common Plots](https://youtu.be/kKlQupjD__g) und [Plot Themes and Customization](https://youtu.be/6pHuCbOh86s)\n\n- [Einf√ºhrung in R](https://methodenlehre.github.io/einfuehrung-in-R/chapters/05-plotting.html) von Andrew Ellis und Boris Mayer\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}