{
  "hash": "e7d7f52443432733ef79f58282ae18ff",
  "result": {
    "markdown": "---\ntitle: \"Programmiersprachen\"\ndescription: Programmiersprachen lernen, Software\nauthor:\n  - name: Andrew Ellis\n    url: https://github.com/awellis\n    affiliation: Kognitive Psychologie, Wahrnehmung und Methodenlehre, Universität Bern \n    affiliation-url: https://www.kog.psy.unibe.ch\n    orcid: 0000-0002-2788-936X\n  - name: Gerda Wyssen\n    # url: https://github.com/awellis\n    affiliation: Kognitive Psychologie, Wahrnehmung und Methodenlehre, Universität Bern \n    affiliation-url: https://www.kog.psy.unibe.ch\n    orcid: 0000-0001-7427-3149\nlicense: CC BY\ncitation: true\nbibliography: ../../bibliography.bib\nformat:\n    html:\n        toc: true\n---\n\n\n## Ziel dieses Kurses\n\nIn diesem Kurs beschäftigen wir uns im weiteren Sinne mit dem Einsatz vom Computern im Bereich Cognitive Neuroscience. Es ist nicht Ziel dieses Kurses, EEG oder fMRI Daten zu analysieren (dafür gibt es eigene Kurse); wir werden uns stattdessen mit Daten aus Verhaltensexperimenten beschäftigen. Dies sind zum Beispiel binäre Antworten oder Reaktionszeiten, welche wir mit entsprechenden Modellen untersuchen werden. Unsere Anwendungsbeispiele werden immer aus der neurowissenschaftlichen Forschung stammen; der Fokus wird aber vor allem der Umgang mit Computern sein. Unser Ziel ist es, dass Sie nach dem Abschluss dieses Kurses eine neurowissenschaftliches Paper lesen können, und die darin verwendeten Experimente nachvollziehen können. Sie könnten eventuell sogar das Experiment selber programmieren, und die Daten analysieren.\n\n## Programmiersprachen\n\nProgrammiersprachen sind essentielle Werkzeuge für die Neurowissenschaftliche Forschung. Wir werden uns zuerst einen kurzen Überblick über drei häufig verwendete Programmiersprachen (Matlab, Python und R) verschaffen, deren Verwendungszwecke und Vor- und Nachteile.\n\n\n\n\n\n### Matlab\nMatlab ist ein Software für numerische Anwendung, welche in den Ingenieurwissenschaften, Naturwissenschaften und der Mathematik weit verbreitet ist.\n\n#### 👍🏼 Stärken:\n- Leistungsstarke Matrix- und Vektoroperationen, gut geeignet für Matrix-basierte Operationen, die in der Neurowissenschaftlichen Forschung häufig vorkommen.\n- Umfangreiche Bibliothek von integrierten Funktionen für wissenschaftliches Rechnen.\n\n#### 👎🏼 Schwächen:\n- Teuer\n- Weniger flexibel als Python oder R in Bezug auf Datenarten und Strukturen.\n- Matlab is kommerziell und proprietär. Dies bedeutet man muss teuere Lizenzen kaufen, und der Source Code der Software ist nicht offen.\n\n#### Typische Anwendung:\nDatenverarbeitung und -analyse, Signalverarbeitung, Visualisierung.\n\n\n#### Beispielcode:\n\n```matlab\nload('data.mat')\nfs = 1000;\nt = (0:numel(data)-1)/fs;\nplot(t, data)\n```\n\n\n\n### Python\nPython ist eine allgemeine (general purpose) Programmiersprache, die in vielen verschiedenen Bereichen wie wissenschaftlichem Rechnen, Datenanalyse und maschinellem Lernen weit verbreitet ist.\n#### 👍🏼 Stärken:\n- Eine Vielzahl von Bibliotheken und Modulen wie NumPy, SciPy und Pandas, die leistungsstarke Werkzeuge für wissenschaftliches Rechnen und Datenanalyse bieten.\n- Datenanalysewerkzeuge wie Pandas-Dataframes, die Seaborn-Visualisierungsbibliothek, und Jupyter Notebooks.\n- Open-source und kostenlos\n\n#### 👎🏼 Schwächen:\n- Kann in einigen numerischen Berechnungen langsamer sein als Matlab.\n- Da Python eine allgemeine Sprache ist, muss man für numerische Anwendungen immer verschiedene Packages importieren (z.B.) `numpy`, wenn man damit rechnen will. Dies führt zu weniger gut lesbarem Code.\n\n#### Typische Anwendung:\nDatenverarbeitung und -analyse, Signalverarbeitung, Visualisierung.\n\n#### Beispielcode:\n\n```python\nimport pandas as pd\nimport seaborn as sns\ndata = pd.read_csv('data.csv')\nsns.lineplot(data=data, x='time', y='voltage')\n```\n\n\n### R\nR ist eine Programmiersprache und Umgebung für statistisches Rechnen und Grafiken.\n\n#### 👍🏼 Stärken:\n- Entwickelt von Statistikern für statistisches Rechnen und Grafiken.\n- Eine große Bibliothek von statistischen Werkzeugen und Paketen, einschliesslich Visualisierungspackages (grammar of graphics).\n- Open-source und kostenlos\n- `tidyverse` Packages für Data Wrangling (sehr elegant).\n\n#### 👎🏼 Schwächen:\n- Steilere Lernkurve als Python.\n- Kann in einigen numerischen Berechnungen langsamer sein als Matlab oder Python.\n- Entwickelt von Statistiker (nicht von Software Designers). R gilt als sehr idiosynkratisch.\n\n#### Typische Anwendung:\nStatistische Analyse, Datenvisualisierung, Neurobildgebung-Analyse.\n\n\n#### Beispielcode:\n\n```r\nlibrary(tidyverse)\ndata <- read.csv('data.csv')\nggplot(data, aes(x=time, y=voltage)) + geom_line()\n```\n\n### Fazit\nMatlab, Python und R sind leistungsstarke Werkzeuge für die neurowissenschaftliche Forschung. Die Wahl der Sprache hängt unter anderem von der spezifischen Aufgabe ab. Weitere Faktoren ist Tradition: bestimmte Gruppen bevorzugen eher eine Sprache als andere. So ist Matlab unter Ingenieuren weit verbreiten und R unter Statistikern. Python ist im Bereich Künstliche Intelligenz und Machine Learning die beliebteste Sprache. Eine neuere Sprache ist Julia - diese vereint die Vorteile aller oben genannten Sprachen (ohne viele deren Nachteile), ist aber weniger weit verbreitet.\n\nUm mehr zu erfahren, erkunden Sie die umfangreichen Online-Ressourcen und Dokumentationen für jede Sprache.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Software\n\n## Experimente\nUm ein Experiment zu kreieren benutzen wir [PsychoPy](https://www.psychopy.org/). PsychoPy ist ein Python-basiertes Tool, mit dem sich sowohl in einer grafischen Benutzeroberfläche (GUI) als auch mit Python Code Experimente programmieren lassen.\n\n## Datenanalyse\nUm Daten zu verarbeiten (data cleaning), grafisch darzustellen und zu analysieren werden wir R verwenden. Sie sollten daher die aktuelle Version von R installieren (Version 4.2.2), sowie RStudio.\n\nR 👉 [https://cloud.r-project.org/](https://cloud.r-project.org/)\n\nRStudio 👉 [https://www.rstudio.com/products/rstudio/download/#download](https://www.rstudio.com/products/rstudio/download/#download)\n\nFür Bayesianische Datenanalyse verwenden wir ausserdem [JASP](https://jasp-stats.org) und [Stan](https://mc-stan.org/). JASP ist ein GUI Programm, ähnlich wie Jamovi, mit dem sich simple Bayesianische Tests durchführen lassen.\n\nJASP 👉 [https://jasp-stats.org/download/](https://jasp-stats.org/download/)\n\nStan ist eine probabilistische Programmiersprache, welche wir von R aus benutzen. Die dafür benötigte Software werden wir im Verlauf des Semesters installieren.\n\n\n# Languages\n\n- IDEs\n\n\n[DataCamp](https://www.datacamp.com)\n\n# Python\n\nhttps://www.python.org/doc/\nhttps://www.python.org/downloads/\nhttps://www.anaconda.com/products/distribution\nhttps://www.psychopy.org/\nhttps://jupyter.org/\nhttps://docs.jupyter.org/en/latest/index.html",
    "supporting": [
      "software_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}