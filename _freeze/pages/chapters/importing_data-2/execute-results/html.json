{
  "hash": "9ea7a239e8259f111bef3b2cd65eee89",
  "result": {
    "markdown": "---\ntitle: \"Daten importieren: Teil 2\"\ndescription: Mehrere Datensätze programmatisch bearbeiten.\ndate: \"2023-03-20\"\nauthor:\n  - name: Andrew Ellis\n    url: https://github.com/awellis\n    affiliation: Kognitive Psychologie, Wahrnehmung und Methodenlehre, Universität Bern \n    affiliation-url: https://www.kog.psy.unibe.ch\n    orcid: 0000-0002-2788-936X\nlicense: CC BY\ncitation: true\nbibliography: ../../bibliography.bib\nformat:\n    html:\n        toc: true\n        code-link: true\n---\n\n\n\n\n:::{.callout-tip collapse=\"false\"}\n## Lernziele\n\nIn der heutigen Sitzung lernen wir:\n\n- Arbeitsschritte automatisieren: mehrere Datensätze automatisch importieren\n- Mit ChatGPT Code verstehen\n:::\n\n\n:::{.callout-caution collapse=\"true\"}\n## Datacamp\n- Falls Sie eine Einführung in Programmierkonzepte (Conditionals and Control Flow, Functions, Loops) benötigen, empfehlen wir Ihnen den Datacamp Kurs [Intermediate R](https://app.datacamp.com/learn/courses/intermediate-r).\n:::\n\n\n# Mehrere Datensätze bearbeiten\n\n\n::: {.cell hash='importing_data-2_cache/html/unnamed-chunk-2_768c2607c174b442b5990275dcfb8ecc'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.1.8\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n\nNun werden wir dasselbe wie oben machen, aber dieses Mal für alle `.csv` Files, die  in einem Ordner gespeichert sind. \n\n<aside>\nIn Ihrem Rstudio Projekt sind die Files im Ordner `data` gespeichert (Hier in einem Ordner names `data/rdkdata`). Bitte passen Sie den Pfad dementsprechend an, oder verwenden Sie das R Script im RStudio Projekt.\n</aside>\n\n## Funktion definieren\n\nNun wollen wir die ersten paar Schritte gleichzeitig auf mehrere Files anwenden:\n\n1. `CSV` File einlesen\n2. Filename hinzufügen\n3. Practice Trials löschen\n4. Practice Variablen löschen\n\nDieser Vorgang ist in R ziemlich elegant. Anstatt dass wir manuell über alle Files iterieren müssen, können wir eine Funktion definieren, die wir auf ein File anwenden können, und dann wenden wir diese Funktion auf alle Files an.\n\n<aside>\nMit `map_*` Funktionen können wir eine Funktion auf alle Elemente einer Liste anwenden. `map_dfr` macht genau das, und gibt einen Dataframe als Output, in welchem die einzelnen Elemente _row-wise_ zusamengesetzt werden.\n</aside>\n\nDie Funktion, welche wir auf ein einzelnes `.csv` File anweden möchten, ist diese:\n\n\n::: {.cell hash='importing_data-2_cache/html/unnamed-chunk-3_04c946e36e055a2733f917893f5bac26'}\n\n```{.r .cell-code}\nimport_function <- function(filename) {\n    read_csv(filename) |>\n        mutate(filename = basename(filename)) |>\n        filter(!is.na(main_blocks_loop.thisN)) |>\n        select(-contains(\"practice_block_loop\"))\n}\n```\n:::\n\n\n<aside>\nProbieren Sie die Funktion mit dem einzelnen `.csv` File von oben. \n</aside>\n\n## Alle Files in einem Ordner auflisten\n\n\n::: {.cell hash='importing_data-2_cache/html/unnamed-chunk-4_bc60e7e4e5f1a456d08ac8db005c23dd'}\n\n```{.r .cell-code}\ndatadir <- \"data\"\nlist_of_files <- datadir |>\n    list.files(pattern = \"csv\", full.names = TRUE)\n```\n:::\n\n::: {.cell hash='importing_data-2_cache/html/unnamed-chunk-5_c204f8edf1255c689e9773316440be0e'}\n\n```{.r .cell-code}\nlist_of_files\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data//JH_rdk-discrimination_2022_Mar_07_1403.csv\"   \n[2] \"data//NS_rdk-discrimination_2022_Mar_07_1331.csv\"   \n[3] \"data//rh_rdk-discrimination_2022_Mar_02_1105.csv\"   \n[4] \"data//sb_rdk-discrimination_2022_Mar_06_0746.csv\"   \n[5] \"data//SS91_rdk-discrimination_2022_Mar_06_0953.csv\" \n[6] \"data//VP1_rdk-discrimination_2022_Mar_07_1237.csv\"  \n[7] \"data//VP2_rdk-discrimination_2022_Mar_07_1302.csv\"  \n[8] \"data//VPN01_rdk-discrimination_2022_Mar_01_2142.csv\"\n[9] \"data//VPN02_rdk-discrimination_2022_Mar_01_2208.csv\"\n```\n:::\n:::\n\n\n## Funktion auf Liste anwenden\n\n\n::: {.cell hash='importing_data-2_cache/html/unnamed-chunk-6_3ff8989b3d1101935179b3b54baf26d9'}\n\n```{.r .cell-code}\ndata <- list_of_files |> \n    map_dfr(~ import_function(.x))\n```\n:::\n\n::: {.cell hash='importing_data-2_cache/html/unnamed-chunk-7_a82e783bb75c4e7128bcf9b94451369d'}\n\n```{.r .cell-code}\ndata <- list_of_files |> \n    map(\\(x) import_function(x))\n    # map(import_function)\n```\n:::\n\n::: {.cell hash='importing_data-2_cache/html/unnamed-chunk-8_94b4dc091bee8ebf988dc3492294a64c'}\n\n```{.r .cell-code}\ndata2 <- list_of_files |> \n    map(read_csv) |>\n    list_rbind()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\nRows: 167 Columns: 40\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(17): cue, direction, fixation_pre.stopped, image.stopped, fixation_post... dbl\n(22): practice_block_loop.thisRepN, practice_block_loop.thisTrialN, prac... lgl\n(1): ...40\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\nNew names:\nRows: 167 Columns: 40\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(17): cue, direction, fixation_pre.stopped, image.stopped, fixation_post... dbl\n(22): practice_block_loop.thisRepN, practice_block_loop.thisTrialN, prac... lgl\n(1): ...40\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\nNew names:\nRows: 167 Columns: 40\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(17): cue, direction, fixation_pre.stopped, image.stopped, fixation_post... dbl\n(22): practice_block_loop.thisRepN, practice_block_loop.thisTrialN, prac... lgl\n(1): ...40\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\nNew names:\nRows: 167 Columns: 40\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(17): cue, direction, fixation_pre.stopped, image.stopped, fixation_post... dbl\n(22): practice_block_loop.thisRepN, practice_block_loop.thisTrialN, prac... lgl\n(1): ...40\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\nNew names:\nRows: 167 Columns: 40\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(17): cue, direction, fixation_pre.stopped, image.stopped, fixation_post... dbl\n(22): practice_block_loop.thisRepN, practice_block_loop.thisTrialN, prac... lgl\n(1): ...40\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\nNew names:\nRows: 167 Columns: 40\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(17): cue, direction, fixation_pre.stopped, image.stopped, fixation_post... dbl\n(22): practice_block_loop.thisRepN, practice_block_loop.thisTrialN, prac... lgl\n(1): ...40\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\nNew names:\nRows: 167 Columns: 40\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(17): cue, direction, fixation_pre.stopped, image.stopped, fixation_post... dbl\n(22): practice_block_loop.thisRepN, practice_block_loop.thisTrialN, prac... lgl\n(1): ...40\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\nNew names:\nRows: 167 Columns: 40\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(17): cue, direction, fixation_pre.stopped, image.stopped, fixation_post... dbl\n(22): practice_block_loop.thisRepN, practice_block_loop.thisTrialN, prac... lgl\n(1): ...40\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\nNew names:\nRows: 167 Columns: 40\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(17): cue, direction, fixation_pre.stopped, image.stopped, fixation_post... dbl\n(22): practice_block_loop.thisRepN, practice_block_loop.thisTrialN, prac... lgl\n(1): ...40\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...40`\n```\n:::\n:::\n\n::: {.cell hash='importing_data-2_cache/html/unnamed-chunk-9_c001a3c3e39a0118a759c646133891ef'}\n\n```{.r .cell-code}\ndata2  <- data2 |>  \n        filter(!is.na(main_blocks_loop.thisN)) |>\n        select(-contains(\"practice_block_loop\"))\n```\n:::\n\n::: {.cell hash='importing_data-2_cache/html/unnamed-chunk-10_2b831bc40555482e5e589a164ce28c1a'}\n\n```{.r .cell-code}\ndata2 <- data2 |>\n    select(-contains(\"static\"),\n           -contains(\"fixation\"),\n           -contains(\"image\"),\n           -contains(\"instruction\"),\n           -contains(\"feedback\")) |>\n    select(trial = main_blocks_loop.thisN,\n           ID = Pseudonym,\n           cue,\n           direction,\n           response = dots_keyboard_response.keys,\n           rt = dots_keyboard_response.rt)\n```\n:::\n\n::: {.cell hash='importing_data-2_cache/html/unnamed-chunk-11_9350f475c4ee61a20607cbae740bd80d'}\n\n```{.r .cell-code}\ndata[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 160 × 37\n   cue   direc…¹ main_…² main_…³ main_…⁴ main_…⁵ stati…⁶ stati…⁷ fixat…⁸ fixat…⁹\n   <chr> <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> <chr>  \n 1 right right         0       0       0      18  0.0160    2.02    86.5 None   \n 2 right right         0       1       1      31  0.0318    2.03    96.2 None   \n 3 none  right         0       2       2      66  0.0321    2.03   105.  None   \n 4 none  right         0       3       3      75  0.0321    2.03   114.  None   \n 5 left  left          0       4       4      13  0.0321    2.03   123.  None   \n 6 none  right         0       5       5      62  0.0321    2.03   133.  None   \n 7 none  left          0       6       6      41  0.0321    2.03   142.  None   \n 8 left  left          0       7       7      15  0.0321    2.03   152.  None   \n 9 left  right         0       8       8      32  0.0321    2.03   161.  None   \n10 none  right         0       9       9      68  0.0321    2.03   172.  None   \n# … with 150 more rows, 27 more variables: image.started <dbl>,\n#   image.stopped <chr>, fixation_post.started <dbl>,\n#   fixation_post.stopped <chr>, dots_background.started <dbl>,\n#   dots_background.stopped <chr>, dots_stimulus.started <dbl>,\n#   dots_stimulus.stopped <chr>, dots_keyboard_response.keys <chr>,\n#   dots_keyboard_response.started <dbl>, dots_keyboard_response.stopped <chr>,\n#   feedback_text.started <dbl>, feedback_text.stopped <chr>, …\n```\n:::\n:::\n\n::: {.cell hash='importing_data-2_cache/html/unnamed-chunk-12_a0d2069f472fdc5b184ee051438a9655'}\n\n```{.r .cell-code}\ndata <- data |> \n    list_rbind()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\n• `...40` -> `...36`\n```\n:::\n:::\n\n\n## Variablen auswählen und umbennen\n\n\n::: {.cell hash='importing_data-2_cache/html/unnamed-chunk-13_df48050ba2da67c2a671efe59d5ada73'}\n\n```{.r .cell-code}\ndata <- data |>\n    select(-contains(\"static\"),\n           -contains(\"fixation\"),\n           -contains(\"image\"),\n           -contains(\"instruction\"),\n           -contains(\"feedback\"))\n```\n:::\n\n::: {.cell hash='importing_data-2_cache/html/unnamed-chunk-14_428bfd801f4532041243b0b24832f5bf'}\n\n```{.r .cell-code}\ndata <- data |>\n    select(trial = main_blocks_loop.thisN,\n           ID = Pseudonym,\n           cue,\n           direction,\n           response = dots_keyboard_response.keys,\n           rt = dots_keyboard_response.rt)\n```\n:::\n\n\n## Neue Variablen definieren\n\n### Korrekte Antworten\n\n::: {.cell hash='importing_data-2_cache/html/unnamed-chunk-15_5c7de16010731300a361e3cd60beecd5'}\n\n```{.r .cell-code}\ndata <- data |>\n    mutate(choice = if_else(response == \"j\", \"right\", \"left\"),\n           response = if_else(choice == \"right\", 1, 0))\n```\n:::\n\n::: {.cell hash='importing_data-2_cache/html/unnamed-chunk-16_b280c42e5189b86900d6d3f24ddb5aad'}\n\n```{.r .cell-code}\ndata <- data |>\n    mutate(correct = as.numeric(choice == direction))\n```\n:::\n\n::: {.cell hash='importing_data-2_cache/html/unnamed-chunk-17_801eff9fa4658cec850206abd4723c62'}\n\n```{.r .cell-code}\nglimpse(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,440\nColumns: 8\n$ trial     <dbl> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17…\n$ ID        <chr> \"JH\", \"JH\", \"JH\", \"JH\", \"JH\", \"JH\", \"JH\", \"JH\", \"JH\", \"JH\", …\n$ cue       <chr> \"right\", \"right\", \"none\", \"none\", \"left\", \"none\", \"none\", \"l…\n$ direction <chr> \"right\", \"right\", \"right\", \"right\", \"left\", \"right\", \"left\",…\n$ response  <dbl> 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, …\n$ rt        <dbl> 0.7136441, 0.6271285, 0.6703410, 0.5738488, 0.8405913, 0.667…\n$ choice    <chr> \"right\", \"right\", \"left\", \"right\", \"right\", \"right\", \"right\"…\n$ correct   <dbl> 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n```\n:::\n:::\n\n::: {.cell hash='importing_data-2_cache/html/unnamed-chunk-18_c616eac24d41744847d81e9246cd126f'}\n\n```{.r .cell-code}\ndata |> \n  slice_head(n = 20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 9\n   trial ID    cue   direction response    rt choice correct condition\n   <dbl> <chr> <chr> <chr>        <dbl> <dbl> <chr>    <dbl> <chr>    \n 1     0 JH    right right            1 0.714 right        1 valid    \n 2     1 JH    right right            1 0.627 right        1 valid    \n 3     2 JH    none  right            0 0.670 left         0 neutral  \n 4     3 JH    none  right            1 0.574 right        1 neutral  \n 5     4 JH    left  left             1 0.841 right        0 valid    \n 6     5 JH    none  right            1 0.668 right        1 neutral  \n 7     6 JH    none  left             1 1.12  right        0 neutral  \n 8     7 JH    left  left             0 0.640 left         1 valid    \n 9     8 JH    left  right            0 1.13  left         0 invalid  \n10     9 JH    none  right            1 1.03  right        1 neutral  \n11    10 JH    none  left             0 1.35  left         1 neutral  \n12    11 JH    left  left             0 0.688 left         1 valid    \n13    12 JH    left  left             0 0.721 left         1 valid    \n14    13 JH    none  left             0 0.655 left         1 neutral  \n15    14 JH    right right            1 1.02  right        1 valid    \n16    15 JH    none  right            1 1.12  right        1 neutral  \n17    16 JH    left  left             0 1.08  left         1 valid    \n18    17 JH    right left             0 0.643 left         1 invalid  \n19    18 JH    right right            1 0.716 right        1 valid    \n20    19 JH    left  left             0 0.578 left         1 valid    \n```\n:::\n:::\n\n\n### Cue-Bedingungsvariable\n\n\n::: {.cell hash='importing_data-2_cache/html/unnamed-chunk-19_0ce15f62bda22b0eb77ae2be6dadd36d'}\n\n```{.r .cell-code}\ndata <- data |>\n    mutate(condition = case_when(cue == \"none\" ~ \"neutral\",\n                                 cue == direction ~ \"valid\",\n                                 cue != direction ~ \"invalid\"))\n```\n:::\n\n\n### Daten als CSV speichern\n\nAn dieser Stelle speichern wir den neu kreierten Datensatz als `.csv` File. Somit können wir die Daten einfach importieren, ohne die ganzen Schritte wiederholen zu müssen.\n\n\n::: {.cell hash='importing_data-2_cache/html/unnamed-chunk-20_b4bb8754484de1e97008b1501f3188b0'}\n\n```{.r .cell-code}\ndata |> write_csv(file = \"data_clean/rdkdata.csv\")\n```\n:::\n\n::: {.cell hash='importing_data-2_cache/html/unnamed-chunk-21_1abed1b8c0864e2ecd0cdbd3622ec395'}\n\n```{.r .cell-code}\ndata |> \n  slice_head(n = 20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 9\n   trial ID    cue   direction response    rt choice correct condition\n   <dbl> <chr> <chr> <chr>        <dbl> <dbl> <chr>    <dbl> <chr>    \n 1     0 JH    right right            1 0.714 right        1 valid    \n 2     1 JH    right right            1 0.627 right        1 valid    \n 3     2 JH    none  right            0 0.670 left         0 neutral  \n 4     3 JH    none  right            1 0.574 right        1 neutral  \n 5     4 JH    left  left             1 0.841 right        0 valid    \n 6     5 JH    none  right            1 0.668 right        1 neutral  \n 7     6 JH    none  left             1 1.12  right        0 neutral  \n 8     7 JH    left  left             0 0.640 left         1 valid    \n 9     8 JH    left  right            0 1.13  left         0 invalid  \n10     9 JH    none  right            1 1.03  right        1 neutral  \n11    10 JH    none  left             0 1.35  left         1 neutral  \n12    11 JH    left  left             0 0.688 left         1 valid    \n13    12 JH    left  left             0 0.721 left         1 valid    \n14    13 JH    none  left             0 0.655 left         1 neutral  \n15    14 JH    right right            1 1.02  right        1 valid    \n16    15 JH    none  right            1 1.12  right        1 neutral  \n17    16 JH    left  left             0 1.08  left         1 valid    \n18    17 JH    right left             0 0.643 left         1 invalid  \n19    18 JH    right right            1 0.716 right        1 valid    \n20    19 JH    left  left             0 0.578 left         1 valid    \n```\n:::\n:::\n\n\n## Gruppierungsvariablen \n\n\n::: {.cell hash='importing_data-2_cache/html/unnamed-chunk-22_929b66d738b64f53055ad7af71c2a814'}\n\n```{.r .cell-code}\ndata <- data |>\n    mutate_if(is.character, as.factor)\n```\n:::\n\n::: {.cell hash='importing_data-2_cache/html/unnamed-chunk-23_73d9aa5c29ecd5fcfa2eb4fbe2d533f7'}\n\n```{.r .cell-code}\nglimpse(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,440\nColumns: 9\n$ trial     <dbl> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17…\n$ ID        <fct> JH, JH, JH, JH, JH, JH, JH, JH, JH, JH, JH, JH, JH, JH, JH, …\n$ cue       <fct> right, right, none, none, left, none, none, left, left, none…\n$ direction <fct> right, right, right, right, left, right, left, left, right, …\n$ response  <dbl> 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, …\n$ rt        <dbl> 0.7136441, 0.6271285, 0.6703410, 0.5738488, 0.8405913, 0.667…\n$ choice    <fct> right, right, left, right, right, right, right, left, left, …\n$ correct   <dbl> 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ condition <fct> valid, valid, neutral, neutral, valid, neutral, neutral, val…\n```\n:::\n:::\n\n\n## Accuracy pro Person/Bedingung\n\nAccuracy pro Person und pro Bedingung berechnen.\n\n\n::: {.cell hash='importing_data-2_cache/html/unnamed-chunk-24_7a0abdf25c61303e429df291af03c41f'}\n\n```{.r .cell-code}\naccuracy <- data |>\n    group_by(ID, condition) |>\n    summarise(N = n(),\n              ncorrect = sum(correct),\n              accuracy = mean(correct))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'ID'. You can override using the `.groups`\nargument.\n```\n:::\n:::\n\n::: {.cell hash='importing_data-2_cache/html/unnamed-chunk-25_a03901d2a72d2cdfad96f014239a4b7a'}\n\n```{.r .cell-code}\naccuracy\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 27 × 5\n# Groups:   ID [9]\n   ID    condition     N ncorrect accuracy\n   <fct> <fct>     <int>    <dbl>    <dbl>\n 1 JH    invalid      16       13   0.812 \n 2 JH    neutral      80       66   0.825 \n 3 JH    valid        64       60   0.938 \n 4 NS    invalid      16       11   0.688 \n 5 NS    neutral      80       56   0.7   \n 6 NS    valid        64       58   0.906 \n 7 rh    invalid      16        2   0.125 \n 8 rh    neutral      80       64   0.8   \n 9 rh    valid        64       61   0.953 \n10 sb    invalid      16        1   0.0625\n# … with 17 more rows\n```\n:::\n:::\n\n\n## Visualisieren\n\n\n::: {.cell hash='importing_data-2_cache/html/unnamed-chunk-26_a386aa46c746dc90a7a108f5f0134acc'}\n\n```{.r .cell-code}\naccuracy |> \n  ggplot(aes(x = condition, y = accuracy, fill = condition)) +\n  geom_col() +\n  scale_fill_manual(\n    values = c(invalid = \"#9E0142\",\n    neutral = \"#C4C4B7\",\n    valid = \"#2EC762\")\n  ) +\n  labs(\n    x = \"Cue\",\n    y = \"Proportion correct\",\n    title = \"Accuracy per person/condition\"\n  ) +\n  theme_linedraw(base_size = 28) +\n  facet_wrap(~ID)\n```\n\n::: {.cell-output-display}\n![](importing_data-2_files/figure-html/unnamed-chunk-26-1.png){width=1440}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}