{
  "hash": "1f4c768bf3e4cce04d234bdf27a57134",
  "result": {
    "markdown": "---\ntitle: \"Tasks automatisieren\"\ndescription: Ein Exkurs zu den Themen Funktionen und Loops.\ndate: \"2023-03-13\"\nauthor:\n  - name: Andrew Ellis\n    url: https://github.com/awellis\n    affiliation: Kognitive Psychologie, Wahrnehmung und Methodenlehre, Universität Bern \n    affiliation-url: https://www.kog.psy.unibe.ch\n    orcid: 0000-0002-2788-936X\nlicense: CC BY\ncitation: true\nbibliography: ../../bibliography.bib\nformat:\n    html:\n        toc: true\n        code-link: true\n---\n\n\n\n\n:::{.callout-tip collapse=\"false\"}\n## Lernziele\n\nIn der heutigen Sitzung lernen wir:\n\n- Funktionen erstellen\n- Loops anwenden\n:::\n\n\n\n:::{.callout-caution collapse=\"true\"}\n## Datacamp\n- Falls Sie eine Einführung in Programmierkonzepte (Conditionals and Control Flow, Functions, Loops) benötigen, empfehlen wir Ihnen den Datacamp Kurs [Intermediate R](https://app.datacamp.com/learn/courses/intermediate-r).\n:::\n\n\n# Funktionen\n\n\n::: {.cell hash='functions-loops_cache/html/unnamed-chunk-2_707d9128396bbb0606fa8bf301f6e470'}\n\n```{.r .cell-code}\nadd_one <- function(x) {\n  x + 1\n}\n```\n:::\n\n::: {.cell hash='functions-loops_cache/html/unnamed-chunk-3_0d0d97f386da2f7b8b7788d8723f9a00'}\n\n```{.r .cell-code}\nadd_one(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\n# Loops    \n\n\n\n\n::: {.cell hash='functions-loops_cache/html/unnamed-chunk-4_97a2082fb519080d21ca5f4843ef6ff6'}\n\n```{.r .cell-code}\nnames <- c(\"Socrates\", \"Nietzsche\", \"Kant\", \"Hume\", \"Plato\")\n```\n:::\n\n::: {.cell hash='functions-loops_cache/html/unnamed-chunk-5_380c717e36164c8466aca01a8097b10d'}\n\n```{.r .cell-code}\nfor (name in names) {\n  print(paste(\"Hello\", name))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hello Socrates\"\n[1] \"Hello Nietzsche\"\n[1] \"Hello Kant\"\n[1] \"Hello Hume\"\n[1] \"Hello Plato\"\n```\n:::\n:::\n\n::: {.cell hash='functions-loops_cache/html/unnamed-chunk-6_05ab54daf73ed100885750bec52b5803'}\n\n```{.r .cell-code}\nfor (i in seq_along(names)) {\n  print(paste(\"Hello\", names[i]))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hello Socrates\"\n[1] \"Hello Nietzsche\"\n[1] \"Hello Kant\"\n[1] \"Hello Hume\"\n[1] \"Hello Plato\"\n```\n:::\n:::\n\n::: {.cell hash='functions-loops_cache/html/unnamed-chunk-7_89cd9ede0b9076507a83a41657fcbc7a'}\n\n```{.r .cell-code}\nlapply(names, function(x) paste(\"Hello\", x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"Hello Socrates\"\n\n[[2]]\n[1] \"Hello Nietzsche\"\n\n[[3]]\n[1] \"Hello Kant\"\n\n[[4]]\n[1] \"Hello Hume\"\n\n[[5]]\n[1] \"Hello Plato\"\n```\n:::\n:::\n\n::: {.cell hash='functions-loops_cache/html/unnamed-chunk-8_d67a177c27e9343fd86e9197de4f51ec'}\n\n```{.r .cell-code}\nsapply(names, function(x) paste(\"Hello\", x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         Socrates         Nietzsche              Kant              Hume \n \"Hello Socrates\" \"Hello Nietzsche\"      \"Hello Kant\"      \"Hello Hume\" \n            Plato \n    \"Hello Plato\" \n```\n:::\n:::\n\n::: {.cell hash='functions-loops_cache/html/unnamed-chunk-9_6a7380a50ed325d8d63c2c91f03e49b9'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.1.8\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n::: {.cell hash='functions-loops_cache/html/unnamed-chunk-10_244c3d99fca32a0128f87d9f56447c05'}\n\n```{.r .cell-code}\nnames |> map(\\(x) paste(\"Hello\", x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"Hello Socrates\"\n\n[[2]]\n[1] \"Hello Nietzsche\"\n\n[[3]]\n[1] \"Hello Kant\"\n\n[[4]]\n[1] \"Hello Hume\"\n\n[[5]]\n[1] \"Hello Plato\"\n```\n:::\n:::\n\n::: {.cell hash='functions-loops_cache/html/unnamed-chunk-11_001c1838438c5489d5053dd289e77677'}\n\n```{.r .cell-code}\nsay_hello <- function(x) {\n  paste(\"Hello\", x)\n}\n```\n:::\n\n::: {.cell hash='functions-loops_cache/html/unnamed-chunk-12_61b91e23c4c4a8ad5ebb1900435d96b3'}\n\n```{.r .cell-code}\nnames |> map(say_hello)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"Hello Socrates\"\n\n[[2]]\n[1] \"Hello Nietzsche\"\n\n[[3]]\n[1] \"Hello Kant\"\n\n[[4]]\n[1] \"Hello Hume\"\n\n[[5]]\n[1] \"Hello Plato\"\n```\n:::\n:::\n\n::: {.cell hash='functions-loops_cache/html/unnamed-chunk-13_a3c824f3dad5646efa1e061f59934614'}\n\n```{.r .cell-code}\nnames |> map(say_hello) |> unlist()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hello Socrates\"  \"Hello Nietzsche\" \"Hello Kant\"      \"Hello Hume\"     \n[5] \"Hello Plato\"    \n```\n:::\n:::\n\n\n```{r\n```\n\n\n::: {.cell hash='functions-loops_cache/html/unnamed-chunk-14_91e66b8e005bf7ca9cff8af3613374f0'}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}