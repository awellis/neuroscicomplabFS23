{
  "hash": "0a392602c9f0d8b32c2a669024e48102",
  "result": {
    "markdown": "---\ntitle: \"Aggregierte Statistiken\"\ndescription: |\n  Daten aus Verhaltensexperimenten zusammenfassen.\ndate: \"2022-03-27\"\nauthor:\n  - name: Andrew Ellis\n    url: https://github.com/awellis\n    affiliation: Kognitive Psychologie, Wahrnehmung und Methodenlehre, Universit√§t Bern \n    affiliation-url: https://www.kog.psy.unibe.ch\n    orcid: 0000-0002-2788-936X\nlicense: CC BY\ncitation: true\nbibliography: ../../bibliography.bib\nformat:\n    html:\n        toc: true\n        code-link: true\nexecute: \n  cache: false\ncode-annotations: select\n---\n\n\n\n\n<!-- :::{.callout-note}\nüëâ [R Code f√ºr dieses Kapitel downloaden](../../downloadable_files/summarizing-data.R)\n::: -->\n\n\n\n:::{.callout-tip collapse=\"false\"}\n## Lernziele\n\nIn der heutigen Sitzung lernen wir:\n\n- Zusammenfassende Statistiken berechnen.\n- In _within-subject_ Designs aggregierte Statistiken berechnen.\n- Standardfehler berechnen, welche Messwiederholungen ber√ºcksichtigen.\n:::\n\n\n\nWir haben in den vorherigen Kapiteln gesehen, wie wir Daten aus Verhaltensexperimenten in R einlesen und bearbeiten k√∂nnen. In diesem Kapitel werden wir uns mit der Frage besch√§ftigen, wie wir zusammenfassende Statistiken erstellen k√∂nnen, um diese grafisch darzustellen und zu interpretieren. Da wir uns in den Neurowissenschaften meist mit _within-subject_ Designs besch√§ftigen, werden wir uns in diesem Kapitel auf Messwiederholungsdaten konzentrieren.\n\n\n\n# Daten aus dem RDK Experiment einlesen\nZum Schluss der letzten Sitzung haben wir f√ºr jede Versuchsperson pro Bedingung die `accuracy` berechnet, und grafisch dargestellt. Wir wiederholen diesen Schritt hier nochmals, um die Daten f√ºr die folgenden Analysen vorzubereiten.\n\n\nZuerst laden wir das `tidyverse` Package und lesen das gespeicherte `csv` File ein.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ndata <- read_csv(\"data_clean/rdkdata.csv\")\n```\n:::\n\n\n\nIm ersten Schritt konvertieren wir wieder alle Gruppierungsvariablen zu Faktoren. Ob eine Variable als `factor` definiert ist, wird als Attribut gespeichert. Attribute werden aber in einem `.csv.` File nicht mitgespeichert; deshalb m√ºssen wir diesen Schritt nach dem Einlesen jedesmal neu ausf√ºhren. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data |>\n  mutate(across(where(is.character), as_factor))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,440\nColumns: 9\n$ trial     <dbl> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17‚Ä¶\n$ ID        <fct> JH, JH, JH, JH, JH, JH, JH, JH, JH, JH, JH, JH, JH, JH, JH, ‚Ä¶\n$ cue       <fct> right, right, none, none, left, none, none, left, left, none‚Ä¶\n$ direction <fct> right, right, right, right, left, right, left, left, right, ‚Ä¶\n$ response  <dbl> 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, ‚Ä¶\n$ rt        <dbl> 0.7136441, 0.6271285, 0.6703410, 0.5738488, 0.8405913, 0.667‚Ä¶\n$ choice    <fct> right, right, left, right, right, right, right, left, left, ‚Ä¶\n$ correct   <dbl> 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ‚Ä¶\n$ condition <fct> valid, valid, neutral, neutral, valid, neutral, neutral, val‚Ä¶\n```\n:::\n:::\n\n\nDie ersten 20 Zeilen der Tabelle sehen wie folgt aus:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata |>\n  slice_head(n = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 √ó 9\n   trial ID    cue   direction response    rt choice correct condition\n   <dbl> <fct> <fct> <fct>        <dbl> <dbl> <fct>    <dbl> <fct>    \n 1     0 JH    right right            1 0.714 right        1 valid    \n 2     1 JH    right right            1 0.627 right        1 valid    \n 3     2 JH    none  right            0 0.670 left         0 neutral  \n 4     3 JH    none  right            1 0.574 right        1 neutral  \n 5     4 JH    left  left             1 0.841 right        0 valid    \n 6     5 JH    none  right            1 0.668 right        1 neutral  \n 7     6 JH    none  left             1 1.12  right        0 neutral  \n 8     7 JH    left  left             0 0.640 left         1 valid    \n 9     8 JH    left  right            0 1.13  left         0 invalid  \n10     9 JH    none  right            1 1.03  right        1 neutral  \n```\n:::\n:::\n\n\n\n# Individuelle und Aggregierte Kennzahlen\n\nIn neurowissenschaftlichen Fragestellungen interessieren wir uns sowohl f√ºr aggregierte Statistiken, als auch f√ºr individuelle Kennzahlen, d.h. f√ºr die Kennzahlen, die wir erhalten, wenn wir die Daten f√ºr jede Versuchsperson einzeln betrachten. Wir schauen uns dies am Beispiel der korrekten Antworten in der RDK Entscheidungsaufgabe an.\n\n:::{.callout-important}\n- √úberlegen Sie sich, in welchen F√§llen Sie aggregierte Statistiken ben√∂tigen, und in welchen F√§llen individuelle Kennzahlen.\n:::\n\n\n\n# Korrekte Entscheidungen\n\n\n\nWir schauen uns zuerst (wie im letzten Kapitel) die Anzahl korrekter Entscheidungen an. \n\n## Individuell\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccuracy_individual <- data |>\n    group_by(ID, condition) |>\n    summarise(\n        N = n(),\n        ncorrect = sum(correct),\n        accuracy = mean(correct)\n    )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'ID'. You can override using the `.groups`\nargument.\n```\n:::\n\n```{.r .cell-code}\naccuracy_individual\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 27 √ó 5\n# Groups:   ID [9]\n   ID    condition     N ncorrect accuracy\n   <fct> <fct>     <int>    <dbl>    <dbl>\n 1 JH    valid        64       60    0.938\n 2 JH    neutral      80       66    0.825\n 3 JH    invalid      16       13    0.812\n 4 NS    valid        64       58    0.906\n 5 NS    neutral      80       56    0.7  \n 6 NS    invalid      16       11    0.688\n 7 rh    valid        64       61    0.953\n 8 rh    neutral      80       64    0.8  \n 9 rh    invalid      16        2    0.125\n10 sb    valid        64       62    0.969\n# ‚Ä¶ with 17 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\naccuracy_individual |> \n  ggplot(aes(x = condition, y = accuracy, fill = condition)) +\n  geom_col() +\n  geom_line(aes(group = ID), linewidth = 2) +\n  geom_point(size = 4) +\n  scale_fill_manual(values = c(invalid = \"#9E0142\",\n                    neutral = \"#C4C4B7\",\n                    valid = \"#2EC762\")) +\n  labs(x = \"Cue\",\n      y = \"Proportion correct\",\n      title = \"Accuracy per person/condition\") +\n  facet_wrap(~ID) +\n  theme_linedraw(base_size = 14) +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](summarizing-data_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n## Aggregiert\n\n::: {.cell}\n\n```{.r .cell-code}\naccuracy_aggregated <- data |>\n    group_by(condition) |>\n    summarise(N = n(),\n              ncorrect = sum(correct),\n              accuracy = mean(correct))\n\naccuracy_aggregated\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 √ó 4\n  condition     N ncorrect accuracy\n  <fct>     <int>    <dbl>    <dbl>\n1 valid       576      475    0.825\n2 neutral     720      453    0.629\n3 invalid     144       56    0.389\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\naccuracy_aggregated |> \n  ggplot(aes(x = condition, y = accuracy, fill = condition)) +\n  geom_col() +\n  geom_line(aes(group = 1), linewidth = 2) +\n  geom_point(size = 4) +\n  scale_fill_manual(values = c(invalid = \"#9E0142\",\n                    neutral = \"#C4C4B7\",\n                    valid = \"#2EC762\")) +\n  labs(x = \"Cue\",\n      y = \"Proportion correct\",\n      title = \"Accuracy per condition\") +\n  theme_linedraw(base_size = 14) +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](summarizing-data_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n:::{.callout-important}\n## Hands-on\nWir beurteilen Sie die beiden obenstehenden Plots. Was f√§llt Ihnen auf? Sind die Mittelwerte aussagekr√§ftig?\n:::\n\n:::{.callout-tip collapse=\"true\"}\n## L√∂sung\nEs fehlt eine Darstellung der Unsicherheit, die wir in der Sch√§tzung des Mittelwerts haben. \n:::\n\n\n\n## Standardfehler\n\nWir wollen wir nicht mehr nur den Mittelwert betrachten, sondern auch die Standardabweichung und den Standardfehler. Letzteres ist eine Mass f√ºr die Unsicherheit, die wir in der Sch√§tzung des Mittelwerts haben. Leider gibt es keine Funktion in R, die uns den Standardfehler berechnet. Der Standardfehler ist definiert als die Standardabweichung geteilt durch die Wurzel aus der Anzahl der Datenpunkte:  $$SE = sd/ \\sqrt{n}$$.\n\n\nWir k√∂nnen eine solche Funktion einfach selber definieren. `sd()` berechnet die Standardabweichung eines Vektors, und die Anzahl Datenpunkte ist die L√§nge des Vektors (`length()`), den wir als Argument √ºbergeben.\n\n\n::: {.cell}\n\n:::\n::: {.cell}\n\n```{.r .cell-code}\nse <- function(x) {\n  sd(x) / sqrt(length(x))\n}\n```\n:::\n\n\n\n\n\n#TODO\n\n\n\n## Pro Bedingung, √ºber alle Personen aggregiert\n\nEine M√∂glichkeit w√§re, die Anzahl korrekter Entscheidungen in jeder Bedingung insgesamt, d.h. √ºber alle Personen aggregiert, zu berechnen. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata |>\n    group_by(condition) |>\n            summarise(\n                  n = n(),\n                  ncorrect = sum(correct),\n                  accuracy = mean(correct),\n                  se = se(correct)\n            )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 √ó 5\n  condition     n ncorrect accuracy     se\n  <fct>     <int>    <dbl>    <dbl>  <dbl>\n1 valid       576      475    0.825 0.0159\n2 neutral     720      453    0.629 0.0180\n3 invalid     144       56    0.389 0.0408\n```\n:::\n:::\n\n\n\n:::{.callout-caution}\nWas sagen uns diese Kennzahlen? Welche Informationen gehen dabei verloren?\n:::\n\n\n\n\n## Ein Exkurs √ºber Within-person Standardfehler \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\ndfw <- tribble(\n ~subject, ~pretest, ~posttest,\n       1,   59.4,     64.5,\n       2,   46.4,     52.4,\n       3,   46.0,     49.7,\n       4,   49.0,     48.7,\n       5,   32.5,     37.4,\n       6,   45.2,     49.5,\n       7,   60.3,     59.9,\n       8,   54.3,     54.1,\n       9,   45.4,     49.6,\n      10,   38.9,     48.5) |>\n    mutate(subject = as.factor(subject))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndfw\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 √ó 3\n   subject pretest posttest\n   <fct>     <dbl>    <dbl>\n 1 1          59.4     64.5\n 2 2          46.4     52.4\n 3 3          46       49.7\n 4 4          49       48.7\n 5 5          32.5     37.4\n 6 6          45.2     49.5\n 7 7          60.3     59.9\n 8 8          54.3     54.1\n 9 9          45.4     49.6\n10 10         38.9     48.5\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndfl <- dfw |>\n    pivot_longer(contains(\"test\"),\n                 names_to = \"condition\",\n                 values_to = \"value\") |>\n    mutate(condition = as_factor(condition))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndfl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 √ó 3\n   subject condition value\n   <fct>   <fct>     <dbl>\n 1 1       pretest    59.4\n 2 1       posttest   64.5\n 3 2       pretest    46.4\n 4 2       posttest   52.4\n 5 3       pretest    46  \n 6 3       posttest   49.7\n 7 4       pretest    49  \n 8 4       posttest   48.7\n 9 5       pretest    32.5\n10 5       posttest   37.4\n11 6       pretest    45.2\n12 6       posttest   49.5\n13 7       pretest    60.3\n14 7       posttest   59.9\n15 8       pretest    54.3\n16 8       posttest   54.1\n17 9       pretest    45.4\n18 9       posttest   49.6\n19 10      pretest    38.9\n20 10      posttest   48.5\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndflsum <- dfl |>\n    Rmisc::summarySEwithin(measurevar = \"value\",\n                               withinvars = \"condition\",\n                               idvar = \"subject\",\n                               na.rm = FALSE,\n                               conf.interval = 0.95)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndflsum |>\n    ggplot(aes(x = condition, y = value, group = 1)) +\n    geom_line() +\n    geom_errorbar(width = 0.1, aes(ymin = value-ci, ymax = value+ci)) +\n    geom_point(shape = 21, size = 3, fill = \"white\") +\n    ylim(40,60)\n```\n\n::: {.cell-output-display}\n![](summarizing-data_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use a consistent y range\nymax <- max(dfl$value)\nymin <- min(dfl$value)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot the individuals\ndfl |>\n    ggplot(aes(x=condition, y=value, colour=subject, group=subject)) +\n    geom_line() + geom_point(shape=21, fill=\"white\") +\n    ylim(ymin,ymax)\n```\n\n::: {.cell-output-display}\n![](summarizing-data_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndfNorm_long <- Rmisc::normDataWithin(data=dfl, idvar=\"subject\", measurevar=\"value\")\n?Rmisc::normDataWithin\n\ndfNorm_long |>\n    ggplot(aes(x=condition, y=valueNormed, colour=subject, group=subject)) +\n    geom_line() + geom_point(shape=21, fill=\"white\") +\n    ylim(ymin,ymax)\n```\n\n::: {.cell-output-display}\n![](summarizing-data_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Instead of summarySEwithin, use summarySE, which treats condition as though it were a between-subjects variable\ndflsum_between <- Rmisc::summarySE(data = dfl, \n                                   measurevar = \"value\", \n                                   groupvars = \"condition\", \n                                   na.rm = FALSE, \n                                   conf.interval = .95)\ndflsum_between\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  condition  N value       sd       se       ci\n1   pretest 10 47.74 8.598992 2.719240 6.151348\n2  posttest 10 51.43 7.253972 2.293907 5.189179\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Show the between-S CI's in red, and the within-S CI's in black\ndflsum_between |>\n    ggplot(aes(x=condition, y=value, group=1)) +\n    geom_line() +\n    geom_errorbar(width=.1, aes(ymin=value-ci, ymax=value+ci), colour=\"red\") +\n    geom_errorbar(width=.1, aes(ymin=value-ci, ymax=value+ci), data=dflsum) +\n    geom_point(shape=21, size=3, fill=\"white\") +\n    ylim(ymin,ymax)\n```\n\n::: {.cell-output-display}\n![](summarizing-data_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n## Within-person Standardfehler\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccuracy_individual |> \n  ggplot(aes(x = condition, y = accuracy, colour = ID, group = ID)) +\n    geom_line() + \n  geom_point(shape=21, fill=\"white\")\n```\n\n::: {.cell-output-display}\n![](summarizing-data_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndatasum <- data |>\n   group_by(condition) |> \n   summarise(N = n(),\n             accuracy = mean(correct),\n             sd = sd(correct),\n             se = se(correct))\ndatasum\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 √ó 5\n  condition     N accuracy    sd     se\n  <fct>     <int>    <dbl> <dbl>  <dbl>\n1 valid       576    0.825 0.381 0.0159\n2 neutral     720    0.629 0.483 0.0180\n3 invalid     144    0.389 0.489 0.0408\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndatasum_2 <- data |>\n    Rmisc::summarySE(measurevar = \"correct\",\n                              groupvars = \"condition\",\n                               na.rm = FALSE,\n                               conf.interval = 0.95)\ndatasum_2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  condition   N   correct        sd         se         ci\n1     valid 576 0.8246528 0.3805943 0.01585810 0.03114686\n2   neutral 720 0.6291667 0.4833637 0.01801390 0.03536613\n3   invalid 144 0.3888889 0.4891996 0.04076663 0.08058308\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndatasum_3 <- data |>\n    Rmisc::summarySEwithin(measurevar = \"correct\",\n                               withinvars = \"condition\",\n                               idvar = \"ID\",\n                               na.rm = FALSE,\n                               conf.interval = 0.95)\ndatasum_3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  condition   N   correct        sd         se         ci\n1     valid 576 0.8246528 0.4523391 0.01884746 0.03701827\n2   neutral 720 0.6291667 0.5726512 0.02134145 0.04189901\n3   invalid 144 0.3888889 0.5773528 0.04811273 0.09510406\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np_accuracy <- datasum_3 |>\n    ggplot(aes(x = condition, y = correct, group = 1)) +\n    geom_line() +\n    geom_errorbar(width = .1, aes(ymin = correct-se, ymax = correct+se), colour=\"red\") +\n    geom_point(shape=21, size=3, fill=\"white\")\np_accuracy\n```\n\n::: {.cell-output-display}\n![](summarizing-data_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n\n\n\n# Reaktionszeiten\n\n## Pro Versuchsperson\n\nWir fassen die Daten pro Person pro Block mit Mittelwert, Median und Standarabweichung zusammen.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfuns <- list(mean = mean, median = median, sd = sd)\n\nby_subj <- data %>%\n  drop_na(rt) |> \n  group_by(ID, condition) %>% \n  dplyr::summarise(across(rt, funs, .names = \"{.fn}\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nby_subj \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 27 √ó 5\n# Groups:   ID [9]\n   ID    condition  mean median     sd\n   <fct> <fct>     <dbl>  <dbl>  <dbl>\n 1 JH    valid     0.696  0.658 0.190 \n 2 JH    neutral   0.799  0.733 0.202 \n 3 JH    invalid   0.775  0.739 0.163 \n 4 NS    valid     0.738  0.715 0.191 \n 5 NS    neutral   0.885  0.844 0.201 \n 6 NS    invalid   0.894  0.913 0.207 \n 7 rh    valid     0.443  0.390 0.185 \n 8 rh    neutral   0.525  0.503 0.0841\n 9 rh    invalid   0.423  0.389 0.151 \n10 sb    valid     0.386  0.349 0.175 \n# ‚Ä¶ with 17 more rows\n```\n:::\n:::\n\n\nEinfachere Version:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nby_subj <- data |> \n  drop_na(rt) |> \n  group_by(ID, condition) |>  \n  dplyr::summarise(mean = mean(rt),\n                   median = median(rt),\n                   sd = sd(rt))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nby_subj |> \n  ggplot(aes(x = condition, y = mean, fill = condition)) +\n  geom_col() +\n  geom_line(aes(group = ID), size = 2) +\n  geom_point(size = 8) +\n  scale_fill_manual(\n    values = c(invalid = \"#9E0142\",\n    neutral = \"#C4C4B7\",\n    valid = \"#2EC762\")\n  ) +\n  labs(\n    x = \"Cue\",\n    y = \"Response time\") +\n  theme_linedraw(base_size = 28) +\n  facet_wrap(~ID)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n‚Ñπ Please use `linewidth` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](summarizing-data_files/figure-html/unnamed-chunk-32-1.png){width=1440}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nse <- function(x, ...) sd(x, ...)/sqrt(length(x))\n\nby_subj <- data %>% \n  group_by(ID, condition) %>% \n  summarise(mean = mean(rt, na.rm = TRUE), \n            median = median(rt, na.rm = TRUE), \n            sd = sd(rt, na.rm = TRUE), \n            se = se(rt, na.rm = TRUE))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nby_subj |> \n  ggplot(aes(condition, mean)) +\n  geom_line(aes(group = 1), linetype = 3) +    \n  geom_errorbar(aes(ymin = mean-se, ymax = mean+se),\n                width = 0.2, size=1, color=\"blue\") +\n  geom_point(size = 2) +\n  facet_wrap(~ID, scales = \"free_y\")\n```\n\n::: {.cell-output-display}\n![](summarizing-data_files/figure-html/unnamed-chunk-34-1.png){width=768}\n:::\n:::\n\n\n## √úber Versuchsperson aggregieren\n\n::: {.cell}\n\n```{.r .cell-code}\nrtsum <- data |>\n  drop_na(rt) |> \n    Rmisc::summarySEwithin(measurevar = \"rt\",\n                               withinvars = \"condition\",\n                               idvar = \"ID\",\n                               na.rm = FALSE,\n                               conf.interval = 0.95)\nrtsum\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  condition   N        rt        sd         se         ci\n1     valid 568 0.6716487 0.2482698 0.01041717 0.02046095\n2   neutral 710 0.7238269 0.2449543 0.00919297 0.01804870\n3   invalid 141 0.7055247 0.2204498 0.01856522 0.03670444\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np_rt <- rtsum |>\n    ggplot(aes(x = condition, y = rt, group = 1)) +\n    geom_line() +\n    geom_errorbar(width = .1, aes(ymin = rt-se, ymax = rt+se), colour=\"red\") +\n    geom_point(shape=21, size=3, fill=\"white\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np_rt\n```\n\n::: {.cell-output-display}\n![](summarizing-data_files/figure-html/unnamed-chunk-37-1.png){width=768}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np_accuracy / p_rt\n```\n\n::: {.cell-output-display}\n![](summarizing-data_files/figure-html/unnamed-chunk-39-1.png){width=768}\n:::\n:::",
    "supporting": [
      "summarizing-data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}